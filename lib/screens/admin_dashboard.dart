import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:math';
import '../models/user.dart';
import '../models/person.dart';
import '../models/campaign.dart';
import '../models/ticket.dart';
import '../services/auth_service.dart';
import '../services/person_service.dart';
import '../services/campaign_service.dart';
import '../services/ticket_service.dart';
import '../services/financial_service.dart';
import '../services/complaint_service.dart';
import '../services/milli_piyango_service.dart';
import '../services/supabase_service.dart';
import 'login_screen.dart';
import 'package:piyangox/main.dart'; // themeNotifier eri≈üimi i√ßin

class AdminDashboard extends StatefulWidget {
  @override
  _AdminDashboardState createState() => _AdminDashboardState();
}

class _AdminDashboardState extends State<AdminDashboard> {
  final AuthService _authService = AuthService();
  final PersonService _personService = PersonService();
  final CampaignService _campaignService = CampaignService();
  final TicketService _ticketService = TicketService();
  final FinancialService _financialService = FinancialService();
  final ComplaintService _complaintService = ComplaintService();
  final MilliPiyangoService _milliPiyangoService = MilliPiyangoService();

  // üÜï YENƒ∞: Supabase Service entegrasyonu
  final SupabaseService _supabaseService = SupabaseService();

  final TextEditingController _searchController = TextEditingController();

  String _selectedMenuItem = 'genel_bilgi';
  List<Ticket> _searchResults = [];

  // Admin tarafƒ±ndan belirlenen bilet fiyatƒ±
  double _currentTicketPrice = 10.0;

  // Admin tarafƒ±ndan belirlenen bilet sayƒ±sƒ±
  int _currentTicketCount = 100;

  // Admin tarafƒ±ndan belirlenen ≈üans sayƒ±sƒ±
  int _currentChanceCount = 2;

  // Admin tarafƒ±ndan belirlenen son hane sayƒ±sƒ±
  int _currentLastDigitCount = 3;

  // Sample biletler listesi
  List<Ticket> _sampleTickets = [];

  // Biletler olu≈üturuldu mu kontrol
  bool _ticketsGenerated = false;

  @override
  void initState() {
    super.initState();
    _loadSampleData();
    // üÜï YENƒ∞: Realtime ba≈ülat
    _initializeRealtime();
  }

  void _loadSampleData() async {
    await _complaintService.addSampleComplaints();
  }

  // üÜï YENƒ∞: Realtime ba≈ülatma metodu
  Future<void> _initializeRealtime() async {
    try {
      await _supabaseService.testConnection();
      print('‚úÖ Admin Dashboard realtime ba≈ülatƒ±ldƒ±');
    } catch (e) {
      print('‚ùå Admin realtime ba≈ülatma hatasƒ±: $e');
    }
  }

  // üÜï YENƒ∞: Realtime event g√∂sterici
  void _showRealtimeEvent(Map<String, dynamic> event) {
    if (event['source'] == 'admin') return; // Kendi aksiyonlarƒ±nƒ± g√∂sterme

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.sync, color: Colors.white),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                'üîÑ ${event['data']['admin_action']} - ${event['timestamp'].toString().substring(11, 16)}',
              ),
            ),
          ],
        ),
        backgroundColor: Colors.blue,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      body: Row(
        children: [
          Container(
            width: 280,
            decoration: BoxDecoration(
              gradient: LinearGradient(
                begin: Alignment.topCenter,
                end: Alignment.bottomCenter,
                colors: [
                  Color(0xFF1A237E),
                  Color(0xFF3F51B5),
                ],
              ),
            ),
            child: _buildSideMenu(),
          ),
          Expanded(
            child: Column(
              children: [
                _buildTopBar(),
                Expanded(child: _buildMainContent()),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Geli≈ümi≈ü men√º butonu olu≈üturucu method
  Widget _buildEnhancedMenuItem({
    required IconData icon,
    required String title,
    required bool isSelected,
    required VoidCallback onTap,
    required Color color,
  }) {
    return Container(
      margin: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(15),
          onTap: onTap,
          hoverColor: color.withOpacity(0.15),
          splashColor: color.withOpacity(0.25),
          child: AnimatedContainer(
            duration: Duration(milliseconds: 250),
            curve: Curves.easeInOut,
            decoration: BoxDecoration(
              borderRadius: BorderRadius.circular(15),
              gradient: isSelected
                  ? LinearGradient(
                      colors: [
                        color.withOpacity(0.9),
                        color.withOpacity(0.7),
                      ],
                      begin: Alignment.topLeft,
                      end: Alignment.bottomRight,
                    )
                  : null,
              boxShadow: isSelected
                  ? [
                      BoxShadow(
                        color: color.withOpacity(0.4),
                        blurRadius: 15,
                        offset: Offset(0, 6),
                        spreadRadius: 1,
                      ),
                      BoxShadow(
                        color: color.withOpacity(0.2),
                        blurRadius: 8,
                        offset: Offset(0, 2),
                      ),
                    ]
                  : [
                      BoxShadow(
                        color: Colors.black.withOpacity(0.05),
                        blurRadius: 5,
                        offset: Offset(0, 2),
                      ),
                    ],
              border: isSelected
                  ? null
                  : Border.all(
                      color: Colors.white.withOpacity(0.1),
                      width: 1,
                    ),
            ),
            child: Container(
              padding: EdgeInsets.symmetric(horizontal: 16, vertical: 14),
              child: Row(
                children: [
                  Container(
                    padding: EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: isSelected
                          ? Colors.white.withOpacity(0.2)
                          : color.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(10),
                    ),
                    child: Icon(
                      icon,
                      size: 20,
                      color: isSelected ? Colors.white : color.withOpacity(0.8),
                    ),
                  ),
                  SizedBox(width: 14),
                  Expanded(
                    child: Text(
                      title,
                      style: TextStyle(
                        fontSize: 15,
                        fontWeight:
                            isSelected ? FontWeight.w700 : FontWeight.w500,
                        color:
                            isSelected ? Colors.white : color.withOpacity(0.85),
                        letterSpacing: 0.5,
                        shadows: isSelected
                            ? [
                                Shadow(
                                  color: Colors.black.withOpacity(0.3),
                                  blurRadius: 4,
                                  offset: Offset(0, 1),
                                ),
                              ]
                            : [],
                      ),
                    ),
                  ),
                  if (isSelected)
                    Container(
                      padding: EdgeInsets.all(4),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: Icon(
                        Icons.arrow_forward_ios,
                        size: 12,
                        color: Colors.white,
                      ),
                    ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildSideMenu() {
    final menuItems = [
      {
        'id': 'genel_bilgi',
        'title': 'Genel Bilgi',
        'icon': Icons.dashboard,
        'color': Colors.blue
      },
      {
        'id': 'bilgilerim',
        'title': 'Bilgilerim',
        'icon': Icons.person,
        'color': Colors.indigo
      },
      {
        'id': 'kisi_listesi',
        'title': 'Ki≈üi Listesi',
        'icon': Icons.people,
        'color': Colors.green
      },
      {
        'id': 'son_hane_sayisi',
        'title': 'Son Hane Sayƒ±sƒ±',
        'icon': Icons.filter_9_plus,
        'color': Colors.orange
      },
      {
        'id': 'sans_adeti',
        'title': '≈ûans Adeti',
        'icon': Icons.casino,
        'color': Colors.purple
      },
      {
        'id': 'bilet_adeti',
        'title': 'Bilet Adeti',
        'icon': Icons.confirmation_number,
        'color': Colors.teal
      },
      {
        'id': 'kampanya_ismi',
        'title': 'Kampanya ƒ∞smi',
        'icon': Icons.campaign,
        'color': Colors.red
      },
      {
        'id': 'ikramiye_cinsi',
        'title': 'ƒ∞kramiye Cinsi',
        'icon': Icons.monetization_on,
        'color': Colors.amber
      },
      {
        'id': 'ikramiye_tutari',
        'title': 'ƒ∞kramiye Tutarƒ±',
        'icon': Icons.attach_money,
        'color': Colors.green
      },
      {
        'id': 'bir_alt_ust',
        'title': 'Bir Alt-Bir √úst',
        'icon': Icons.tune,
        'color': Colors.cyan
      },
      {
        'id': 'bilet_fiyati',
        'title': 'Bilet Fiyatƒ±',
        'icon': Icons.local_offer,
        'color': Colors.deepOrange
      },
      {
        'id': 'liste',
        'title': 'Liste',
        'icon': Icons.list,
        'color': Colors.indigo
      },
      {
        'id': 'giderler',
        'title': 'Giderler',
        'icon': Icons.money_off,
        'color': Colors.red
      },
      {
        'id': 'borclu_olanlar',
        'title': 'Bor√ßlu Olanlar',
        'icon': Icons.account_balance_wallet,
        'color': Colors.deepPurple
      },
      {
        'id': 'liste_yayinla',
        'title': 'Liste Yayƒ±nla',
        'icon': Icons.publish,
        'color': Colors.brown
      },
      {
        'id': 'yeni_kampanya',
        'title': 'Yeni Kampanya',
        'icon': Icons.add_circle,
        'color': Colors.pink
      },
      {
        'id': 'kampanya_yonetimi',
        'title': 'Kampanya Y√∂netimi',
        'icon': Icons.manage_accounts,
        'color': Colors.deepPurple
      },
      {
        'id': 'ortak_sayisi',
        'title': 'Ortak Sayƒ±sƒ±',
        'icon': Icons.group,
        'color': Colors.lime
      },
      {
        'id': 'dilek_sikayet',
        'title': 'Dilek ≈ûikayet',
        'icon': Icons.feedback,
        'color': Colors.deepOrange
      },
    ];

    return Column(
      children: [
        // Profil alanƒ±
        Container(
          padding: EdgeInsets.all(20),
          child: Column(
            children: [
              Stack(
                children: [
                  CircleAvatar(
                    radius: 30,
                    backgroundColor: Colors.white,
                    child: _authService.currentUser?.profileImage != null
                        ? ClipOval(
                            child: Icon(
                              Icons.person,
                              size: 30,
                              color:
                                  Colors.green, // Profil resmi var g√∂stergesi
                            ),
                          )
                        : Icon(
                            Icons.admin_panel_settings,
                            size: 30,
                            color: Color(0xFF1A237E),
                          ),
                  ),
                  Positioned(
                    bottom: 0,
                    right: 0,
                    child: Container(
                      padding: EdgeInsets.all(4),
                      decoration: BoxDecoration(
                        color: Colors.green,
                        shape: BoxShape.circle,
                      ),
                      child: Icon(
                        Icons.check,
                        size: 12,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
              SizedBox(height: 10),
              Text(
                _authService.currentUser?.name ?? 'Admin',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Text(
                'Y√∂netici',
                style: TextStyle(
                  color: Colors.white70,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),

        Divider(color: Colors.white30),

        // Tema ge√ßi≈üi
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: SwitchListTile(
            title:
                const Text('Koyu Tema', style: TextStyle(color: Colors.white)),
            secondary: Icon(Icons.dark_mode, color: Colors.white),
            value: themeNotifier.value == ThemeMode.dark,
            onChanged: (dark) {
              themeNotifier.value = dark ? ThemeMode.dark : ThemeMode.light;
            },
          ),
        ),

        // Men√º √∂ƒüeleri - Geli≈ümi≈ü animasyonlu butonlar
        Expanded(
          child: ListView.builder(
            padding: EdgeInsets.symmetric(vertical: 8),
            itemCount: menuItems.length,
            itemBuilder: (context, index) {
              final item = menuItems[index];
              final isSelected = _selectedMenuItem == item['id'];
              return _buildEnhancedMenuItem(
                icon: item['icon'] as IconData,
                title: item['title'] as String,
                isSelected: isSelected,
                color: item['color'] as Color,
                onTap: () {
                  setState(() {
                    _selectedMenuItem = item['id'] as String;
                  });
                },
              );
            },
          ),
        ),
        // √áƒ±kƒ±≈ü butonu
        Container(
          padding: EdgeInsets.all(16),
          child: SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _logout,
              icon: Icon(Icons.logout),
              label: Text('√áƒ±kƒ±≈ü Yap'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTopBar() {
    return Container(
      height: 80,
      padding: EdgeInsets.symmetric(horizontal: 24),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            blurRadius: 4,
            offset: Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Text(
            _getPageTitle(),
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.grey[800],
            ),
          ),

          Spacer(),

          // Arama kutusu (sadece genel bilgi deƒüilse g√∂ster)
          if (_selectedMenuItem != 'bilgilerim')
            Container(
              width: 300,
              child: TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  hintText: 'ƒ∞sim, telefon veya bilet numarasƒ± ara...',
                  prefixIcon: Icon(Icons.search),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(25),
                    borderSide: BorderSide.none,
                  ),
                  filled: true,
                  fillColor: Colors.grey[100],
                  contentPadding:
                      EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                ),
                onChanged: _searchTickets,
              ),
            ),

          SizedBox(width: 16),

          // Bildirimler
          Stack(
            children: [
              IconButton(
                icon: Icon(Icons.notifications, size: 28),
                onPressed: _showNotifications,
              ),
              if (_ticketService.pendingNotifications.isNotEmpty)
                Positioned(
                  right: 8,
                  top: 8,
                  child: Container(
                    padding: EdgeInsets.all(2),
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    constraints: BoxConstraints(
                      minWidth: 16,
                      minHeight: 16,
                    ),
                    child: Text(
                      '${_ticketService.pendingNotifications.length}',
                      style: TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMainContent() {
    if (_searchController.text.isNotEmpty && _searchResults.isNotEmpty) {
      return _buildSearchResults();
    }

    switch (_selectedMenuItem) {
      case 'genel_bilgi':
        return _buildGenelBilgi();
      case 'bilgilerim':
        return _buildBilgilerim();
      case 'kisi_listesi':
        return _buildKisiListesi();
      case 'son_hane_sayisi':
        return _buildSonHaneSayisi();
      case 'sans_adeti':
        return _buildSansAdeti();
      case 'bilet_adeti':
        return _buildBiletAdeti();
      case 'liste':
        return _buildListe();
      case 'kampanya_ismi':
        return _buildKampanyaIsmi();
      case 'ikramiye_cinsi':
        return _buildIkramiyeCinsi();
      case 'ikramiye_tutari':
        return _buildIkramiyeTutari();
      case 'bir_alt_ust':
        return _buildBirAltUst();
      case 'bilet_fiyati':
        return _buildBiletFiyati();
      case 'giderler':
        return _buildGiderler();
      case 'borclu_olanlar':
        return _buildBorcluOlanlar();
      case 'liste_yayinla':
        return _buildListeYayinla();
      case 'yeni_kampanya':
        return _buildYeniKampanya();
      case 'kampanya_yonetimi':
        return _buildKampanyaYonetimi();
      case 'ortak_sayisi':
        return _buildOrtakSayisi();
      case 'dilek_sikayet':
        return _buildDilekSikayet();
      default:
        return _buildPlaceholderPage();
    }
  }

  String _getPageTitle() {
    switch (_selectedMenuItem) {
      case 'genel_bilgi':
        return 'üìä Genel Bilgi';
      case 'bilgilerim':
        return 'üë§ Bilgilerim';
      case 'kisi_listesi':
        return 'üë• Ki≈üi Listesi';
      case 'son_hane_sayisi':
        return 'üî¢ Son Hane Sayƒ±sƒ± Belirle';
      case 'sans_adeti':
        return 'üé≤ ≈ûans Adeti Gir';
      case 'bilet_adeti':
        return 'üé´ Bilet Adeti Gir';
      case 'liste':
        return 'üìã Liste';
      case 'kampanya_ismi':
        return 'üè∑Ô∏è Kampanya ƒ∞smi Gir';
      case 'ikramiye_cinsi':
        return 'üíé ƒ∞kramiye Cinsi Gir';
      case 'ikramiye_tutari':
        return 'üí∞ ƒ∞kramiye Tutarƒ± Gir';
      case 'bir_alt_ust':
        return '‚öñÔ∏è Bir Alt-Bir √úst Tanƒ±mla';
      case 'bilet_fiyati':
        return 'üíµ Bilet Fiyatƒ±';
      case 'giderler':
        return 'üìâ Giderler';
      case 'borclu_olanlar':
        return 'üí≥ Bor√ßlu Olanlar';
      case 'liste_yayinla':
        return 'üì¢ Liste Yayƒ±nla';
      case 'yeni_kampanya':
        return 'üÜï Yeni Kampanya Belirle';
      case 'kampanya_yonetimi':
        return 'üéØ Kampanya Y√∂netimi';
      case 'ortak_sayisi':
        return 'üë• Ortak Sayƒ±sƒ±';
      case 'dilek_sikayet':
        return 'üìù Dilek ≈ûikayet Kutusu';
      default:
        return 'üìä Admin Paneli';
    }
  }

  // Bilgilerim sayfasƒ±
  Widget _buildBilgilerim() {
    final user = _authService.currentUser!;

    return Padding(
      padding: EdgeInsets.all(24),
      child: SingleChildScrollView(
        child: Column(
          children: [
            // Profil kartƒ±
            Card(
              child: Padding(
                padding: EdgeInsets.all(24),
                child: Column(
                  children: [
                    // Profil resmi
                    Stack(
                      children: [
                        CircleAvatar(
                          radius: 60,
                          backgroundColor: Colors.grey[200],
                          backgroundImage: user.profileImage != null
                              ? NetworkImage(user.profileImage!)
                              : null,
                          child: user.profileImage == null
                              ? Icon(
                                  Icons.person,
                                  size: 60,
                                  color: Colors.grey[400],
                                )
                              : null,
                        ),
                        Positioned(
                          bottom: 0,
                          right: 0,
                          child: Container(
                            decoration: BoxDecoration(
                              color: Colors.blue,
                              shape: BoxShape.circle,
                            ),
                            child: IconButton(
                              icon: Icon(Icons.camera_alt, color: Colors.white),
                              onPressed: _pickAndUploadProfileImage,
                            ),
                          ),
                        ),
                      ],
                    ),

                    SizedBox(height: 24),

                    // Kullanƒ±cƒ± bilgileri
                    _buildInfoRow('üë§ Ad Soyad', user.name),
                    _buildInfoRow('üÜî Kullanƒ±cƒ± Adƒ±', user.username),
                    _buildInfoRow('üìß E-posta', user.email ?? 'Belirtilmemi≈ü'),
                    _buildInfoRow('üìû Telefon', user.phone ?? 'Belirtilmemi≈ü'),
                    _buildInfoRow('üëë Rol',
                        user.role == UserRole.admin ? 'Y√∂netici' : '√úye'),
                    _buildInfoRow('üìÖ Kayƒ±t Tarihi',
                        '${user.createdAt.day}/${user.createdAt.month}/${user.createdAt.year}'),

                    SizedBox(height: 32),

                    // Aksiyonlar
                    Row(
                      children: [
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _showEditProfileDialog,
                            icon: Icon(Icons.edit),
                            label: Text('Bilgileri D√ºzenle'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.blue,
                              foregroundColor: Colors.white,
                              padding: EdgeInsets.symmetric(vertical: 12),
                            ),
                          ),
                        ),
                        SizedBox(width: 16),
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _showChangePasswordDialog,
                            icon: Icon(Icons.lock),
                            label: Text('≈ûifre Deƒüi≈ütir'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange,
                              foregroundColor: Colors.white,
                              padding: EdgeInsets.symmetric(vertical: 12),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 150,
            child: Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.grey[600],
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(fontSize: 16),
            ),
          ),
        ],
      ),
    );
  }

  // Diƒüer sayfa metodlarƒ± (basitle≈ütirilmi≈ü)
  Widget _buildGenelBilgi() {
    final summary = _financialService.calculateSummary();
    final complaintStats = _complaintService.getStats();

    return Padding(
      padding: EdgeInsets.all(24),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(
                    child: _buildStatCard(
                        'Satƒ±lan Bilet',
                        '${summary.soldTickets}',
                        Icons.confirmation_number,
                        Colors.green)),
                SizedBox(width: 16),
                Expanded(
                    child: _buildStatCard(
                        'Satƒ±lmayan Bilet',
                        '${summary.availableTickets}',
                        Icons.pending,
                        Colors.orange)),
                SizedBox(width: 16),
                Expanded(
                    child: _buildStatCard(
                        'Havuz Birikimi',
                        '${summary.poolAmount.toStringAsFixed(0)} ‚Ç∫',
                        Icons.savings,
                        Colors.blue)),
                SizedBox(width: 16),
                Expanded(
                    child: _buildStatCard(
                        summary.balanceEmoji +
                            ' ' +
                            (summary.isProfit ? 'Kar' : 'Zarar'),
                        '${summary.balance.abs().toStringAsFixed(0)} ‚Ç∫',
                        Icons.account_balance,
                        summary.isProfit ? Colors.green : Colors.red)),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(
      String title, String value, IconData icon, Color color) {
    return Card(
      child: Container(
        padding: EdgeInsets.all(16),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          gradient: LinearGradient(
            colors: [color.withOpacity(0.1), color.withOpacity(0.05)],
          ),
        ),
        child: Column(
          children: [
            Icon(icon, size: 32, color: color),
            SizedBox(height: 8),
            Text(value,
                style: TextStyle(
                    fontSize: 24, fontWeight: FontWeight.bold, color: color)),
            Text(title, style: TextStyle(color: Colors.grey[600])),
          ],
        ),
      ),
    );
  }

  Widget _buildKisiListesi() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        children: [
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: _addPersonDialog,
                icon: Icon(Icons.person_add),
                label: Text('Ki≈üi Ekle'),
              ),
              SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: _importFromContacts,
                icon: Icon(Icons.contacts),
                label: Text('Telefon Rehberinden Ekle'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              ),
            ],
          ),
          SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: _personService.allPersons.length,
              itemBuilder: (context, index) {
                final person = _personService.allPersons[index];
                return Card(
                  child: ListTile(
                    leading: CircleAvatar(
                      child: Text(person.firstName[0].toUpperCase()),
                    ),
                    title: Text(person.fullName),
                    subtitle: Text('üìû ${person.phone}'),
                    trailing: PopupMenuButton(
                      itemBuilder: (context) => [
                        PopupMenuItem(value: 'edit', child: Text('D√ºzenle')),
                        PopupMenuItem(value: 'delete', child: Text('Sil')),
                      ],
                      onSelected: (value) =>
                          _handlePersonAction(person, value.toString()),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSonHaneSayisi() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üî¢ Son Hane Sayƒ±sƒ± Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Bilet numaralarƒ±nƒ±n ka√ß haneli olacaƒüƒ±nƒ± se√ßin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 32),
          Expanded(
            child: GridView.count(
              crossAxisCount: 2,
              childAspectRatio: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildHaneCard(
                    '2 Haneli', '2 haneli numara (10-99)', 2, Icons.looks_two),
                _buildHaneCard(
                    '3 Haneli', '3 haneli numara (100-999)', 3, Icons.looks_3),
                _buildHaneCard('4 Haneli', '4 haneli numara (1000-9999)', 4,
                    Icons.looks_4),
                _buildHaneCard('5 Haneli', '5 haneli numara (10000-99999)', 5,
                    Icons.looks_5),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildHaneCard(
      String title, String description, int haneCount, IconData icon) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _selectHaneCount(haneCount),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: Color(0xFF6A1B9A)),
              SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[800],
                ),
              ),
              SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _selectHaneCount(int haneCount) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üî¢ Hane Sayƒ±sƒ± Se√ßimi'),
        content: Text(
            '$haneCount haneli numara sistemini se√ßmek istediƒüinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _saveHaneCount(haneCount);
            },
            child: Text('Se√ß'),
          ),
        ],
      ),
    );
  }

  void _saveHaneCount(int haneCount) {
    // Hane sayƒ±sƒ±nƒ± kaydet
    setState(() {
      _currentLastDigitCount = haneCount;
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ $haneCount haneli numara sistemi se√ßildi'),
        backgroundColor: Colors.green,
      ),
    );

    // Ba≈üarƒ± efekti
    _showSuccessAnimation();
  }

  void _showSuccessAnimation() {
    // Basit bir flash efekti - overlay ile
    showDialog(
      context: context,
      barrierDismissible: false,
      barrierColor: Colors.transparent,
      builder: (context) => Container(
        decoration: BoxDecoration(
          gradient: RadialGradient(
            colors: [
              Colors.green.withOpacity(0.3),
              Colors.transparent,
            ],
          ),
        ),
        child: Center(
          child: Container(
            padding: EdgeInsets.all(20),
            decoration: BoxDecoration(
              color: Colors.green,
              shape: BoxShape.circle,
            ),
            child: Icon(
              Icons.check,
              color: Colors.white,
              size: 60,
            ),
          ),
        ),
      ),
    );

    // 1 saniye sonra kapat
    Future.delayed(Duration(milliseconds: 800), () {
      if (Navigator.canPop(context)) {
        Navigator.pop(context);
      }
    });
  }

  Widget _buildSansAdeti() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üé≤ ≈ûans Adeti Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Her bilet i√ßin ka√ß ≈üans verilecek se√ßin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 32),
          Expanded(
            child: GridView.count(
              crossAxisCount: 3,
              childAspectRatio: 1.2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildSansCard('1 ≈ûans', 'Tek numara\nKlasik sistem', 1,
                    Icons.looks_one, Colors.red),
                _buildSansCard('2 ≈ûans', 'ƒ∞ki numara\n√áift ≈üans', 2,
                    Icons.looks_two, Colors.orange),
                _buildSansCard('3 ≈ûans', '√ú√ß numara\n√ú√ßl√º ≈üans', 3,
                    Icons.looks_3, Colors.amber),
                _buildSansCard('4 ≈ûans', 'D√∂rt numara\nD√∂rtl√º ≈üans', 4,
                    Icons.looks_4, Colors.green),
                _buildSansCard('5 ≈ûans', 'Be≈ü numara\nBe≈üli ≈üans', 5,
                    Icons.looks_5, Colors.blue),
                _buildSansCard('6 ≈ûans', 'Altƒ± numara\nMaximum ≈üans', 6,
                    Icons.looks_6, Colors.purple),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSansCard(String title, String description, int sansCount,
      IconData icon, Color color) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _selectSansCount(sansCount),
        borderRadius: BorderRadius.circular(8),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                color.withOpacity(0.1),
                color.withOpacity(0.05),
              ],
            ),
          ),
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(icon, size: 48, color: color),
                SizedBox(height: 8),
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey[800],
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 11,
                    color: Colors.grey[600],
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _selectSansCount(int sansCount) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.casino, color: Color(0xFF6A1B9A)),
            SizedBox(width: 8),
            Text('üé≤ ≈ûans Adeti Se√ßimi'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
                '$sansCount ≈üans sistemini se√ßmek istediƒüinizden emin misiniz?'),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(Icons.info, color: Colors.blue, size: 20),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Her bilet i√ßin $sansCount adet numara √ºretilecek',
                      style: TextStyle(fontSize: 12, color: Colors.blue[800]),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _saveSansCount(sansCount);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
            child: Text('Se√ß'),
          ),
        ],
      ),
    );
  }

  void _saveSansCount(int sansCount) {
    // ≈ûans sayƒ±sƒ±nƒ± kaydet
    setState(() {
      _currentChanceCount = sansCount;
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            Icon(Icons.casino, color: Colors.white),
            SizedBox(width: 8),
            Text('‚úÖ $sansCount ≈üans sistemi se√ßildi'),
          ],
        ),
        backgroundColor: Colors.green,
        duration: Duration(seconds: 3),
      ),
    );

    // Ba≈üarƒ± efekti
    _showSuccessAnimation();
  }

  Widget _buildBiletAdeti() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üé´ Bilet Adeti Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Kampanya i√ßin ka√ß bilet basƒ±lacaƒüƒ±nƒ± belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 32),
          Expanded(
            child: GridView.count(
              crossAxisCount: 2,
              childAspectRatio: 1.5,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildBiletAdetiCard('100 Bilet', 'K√º√ß√ºk kampanya', 100,
                    Icons.confirmation_number),
                _buildBiletAdetiCard(
                    '500 Bilet', 'Orta √∂l√ßekli', 500, Icons.local_activity),
                _buildBiletAdetiCard(
                    '1000 Bilet', 'B√ºy√ºk kampanya', 1000, Icons.theaters),
                _buildBiletAdetiCard(
                    '√ñzel Sayƒ±', 'Manuel giri≈ü', 0, Icons.edit),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBiletAdetiCard(
      String title, String description, int count, IconData icon) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => count == 0
            ? _showManualBiletCountDialog()
            : _selectBiletCount(count),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: Color(0xFF6A1B9A)),
              SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[800],
                ),
              ),
              SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _selectBiletCount(int count) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üé´ Bilet Adeti Se√ßimi'),
        content: Text('$count adet bilet basmak istediƒüinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _saveBiletCount(count);
            },
            child: Text('Onayla'),
          ),
        ],
      ),
    );
  }

  void _showManualBiletCountDialog() {
    final controller = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('‚úèÔ∏è √ñzel Bilet Sayƒ±sƒ±'),
        content: TextField(
          controller: controller,
          decoration: InputDecoration(
            labelText: 'Bilet Sayƒ±sƒ±',
            hintText: '√ñrnek: 250',
            border: OutlineInputBorder(),
          ),
          keyboardType: TextInputType.number,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final count = int.tryParse(controller.text);
              if (count != null && count > 0) {
                Navigator.pop(context);
                _saveBiletCount(count);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå Ge√ßerli bir sayƒ± girin')),
                );
              }
            },
            child: Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  void _saveBiletCount(int count) {
    setState(() {
      _currentTicketCount = count;
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ $count bilet adeti belirlendi'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _showTicketEditDialog(Ticket ticket) {
    final nameController = TextEditingController(text: ticket.buyerName ?? '');
    final phoneController =
        TextEditingController(text: ticket.buyerPhone ?? '');

    showDialog(
      context: context,
      builder: (context) {
        TicketStatus selectedStatus = ticket.status;

        return StatefulBuilder(
          builder: (context, setDialogState) => AlertDialog(
            title: Text('üé´ Bilet D√ºzenle: ${ticket.numbersFormatted}'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(
                    labelText: 'Ad Soyad',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.person),
                  ),
                ),
                SizedBox(height: 16),
                TextField(
                  controller: phoneController,
                  decoration: InputDecoration(
                    labelText: 'Telefon',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.phone),
                    hintText: '05XXXXXXXXX',
                  ),
                  keyboardType: TextInputType.phone,
                ),
                SizedBox(height: 16),

                // Durum se√ßimi
                Container(
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    children: [
                      Container(
                        padding: EdgeInsets.all(12),
                        child: Row(
                          children: [
                            Icon(Icons.info, color: Colors.blue),
                            SizedBox(width: 8),
                            Text('Bilet Durumu:',
                                style: TextStyle(fontWeight: FontWeight.bold)),
                          ],
                        ),
                      ),
                      Divider(height: 1),
                      _buildStatusOptionInternal(
                          'Satƒ±lmadƒ±',
                          TicketStatus.available,
                          Colors.grey,
                          selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                      _buildStatusOptionInternal(
                          'Satƒ±ldƒ± (√ñdenmedi)',
                          TicketStatus.sold,
                          Colors.orange,
                          selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                      _buildStatusOptionInternal('√ñdendi', TicketStatus.paid,
                          Colors.green, selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                      _buildStatusOptionInternal(
                          'ƒ∞ptal',
                          TicketStatus.cancelled,
                          Colors.red,
                          selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                    ],
                  ),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: Text('ƒ∞ptal'),
              ),
              ElevatedButton(
                onPressed: () {
                  // Bilet g√ºncelle
                  _updateTicket(ticket, nameController.text.trim(),
                      phoneController.text.trim(), selectedStatus);
                  Navigator.pop(context);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
                child: Text('Kaydet'),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildStatusOptionInternal(String title, TicketStatus status,
      Color color, TicketStatus selectedStatus, Function(TicketStatus) onTap) {
    final isSelected = selectedStatus == status;

    return InkWell(
      onTap: () => onTap(status),
      child: Container(
        padding: EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: isSelected ? color.withOpacity(0.1) : null,
          border: Border(
            bottom: BorderSide(color: Colors.grey.shade200),
          ),
        ),
        child: Row(
          children: [
            Container(
              width: 20,
              height: 20,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(color: color, width: 2),
                color: isSelected ? color : Colors.transparent,
              ),
              child: isSelected
                  ? Icon(Icons.check, size: 14, color: Colors.white)
                  : null,
            ),
            SizedBox(width: 12),
            Text(
              title,
              style: TextStyle(
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                color: isSelected ? color : Colors.grey[700],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _updateTicket(
      Ticket ticket, String name, String phone, TicketStatus status) {
    // Bilet g√ºncelleme sim√ºlasyonu
    setState(() {
      // Ger√ßek uygulamada burada ticket service kullanƒ±lƒ±r
    });

    String statusText = '';
    Color statusColor = Colors.blue;

    switch (status) {
      case TicketStatus.available:
        statusText = 'Satƒ±lmadƒ± olarak i≈üaretlendi';
        statusColor = Colors.grey;
        break;
      case TicketStatus.sold:
        statusText = 'Satƒ±ldƒ± (√ñdenmedi) olarak i≈üaretlendi';
        statusColor = Colors.orange;
        break;
      case TicketStatus.unpaid:
        statusText = '√ñdenmedi olarak i≈üaretlendi';
        statusColor = Colors.orange;
        break;
      case TicketStatus.paid:
        statusText = '√ñdendi olarak i≈üaretlendi';
        statusColor = Colors.green;
        break;
      case TicketStatus.cancelled:
        statusText = 'ƒ∞ptal edildi';
        statusColor = Colors.red;
        break;
      case TicketStatus.winner:
        statusText = 'Kazanan olarak i≈üaretlendi';
        statusColor = Colors.purple;
        break;
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ Bilet ${ticket.numbersFormatted} $statusText'),
        backgroundColor: statusColor,
      ),
    );

    _showSuccessAnimation();
  }

  void _showTicketDialog(Ticket ticket) {
    final nameController = TextEditingController(text: ticket.buyerName ?? '');
    final phoneController =
        TextEditingController(text: ticket.buyerPhone ?? '');
    TicketStatus selectedStatus = ticket.status;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: Text('üé´ Bilet: ${ticket.numbersFormatted}'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: nameController,
                decoration: InputDecoration(
                  labelText: 'Ad Soyad',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person),
                ),
              ),
              SizedBox(height: 16),
              TextField(
                controller: phoneController,
                decoration: InputDecoration(
                  labelText: 'Telefon',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.phone),
                ),
                keyboardType: TextInputType.phone,
              ),
              SizedBox(height: 16),
              DropdownButtonFormField<TicketStatus>(
                value: selectedStatus,
                decoration: InputDecoration(
                  labelText: 'Durum',
                  border: OutlineInputBorder(),
                ),
                items: [
                  DropdownMenuItem(
                      value: TicketStatus.available, child: Text('Satƒ±lmadƒ±')),
                  DropdownMenuItem(
                      value: TicketStatus.sold,
                      child: Text('Satƒ±ldƒ± (√ñdenmedi)')),
                  DropdownMenuItem(
                      value: TicketStatus.paid, child: Text('√ñdendi')),
                  DropdownMenuItem(
                      value: TicketStatus.cancelled, child: Text('ƒ∞ptal')),
                ],
                onChanged: (value) {
                  if (value != null) {
                    setDialogState(() {
                      selectedStatus = value;
                    });
                  }
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('ƒ∞ptal'),
            ),
            ElevatedButton(
              onPressed: () async {
                // Bilet g√ºncelle
                await _ticketService.updateTicketStatus(
                  ticketId: ticket.id,
                  status: selectedStatus,
                  buyerName: nameController.text.trim().isEmpty
                      ? null
                      : nameController.text.trim(),
                  buyerPhone: phoneController.text.trim().isEmpty
                      ? null
                      : phoneController.text.trim(),
                );

                Navigator.pop(context);
                setState(() {});

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚úÖ Bilet g√ºncellendi')),
                );
              },
              child: Text('Kaydet'),
            ),
          ],
        ),
      ),
    );
  }

  void _clearAllTickets() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('‚ö†Ô∏è Dikkat'),
        content: Text('T√ºm biletleri silmek istediƒüinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              // T√ºm kampanyalarƒ± sil
              setState(() {});
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('‚úÖ T√ºm biletler temizlendi')),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: Text('Sil'),
          ),
        ],
      ),
    );
  }

  Widget _buildKampanyaIsmi() {
    final controller = TextEditingController();

    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üè∑Ô∏è Kampanya ƒ∞smi Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Yeni kampanyanƒ±z i√ßin bir isim belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 32),
          TextField(
            controller: controller,
            decoration: InputDecoration(
              labelText: 'Kampanya ƒ∞smi',
              hintText: '√ñrnek: Ocak 2024 ≈ûans Oyunu',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.campaign),
            ),
          ),
          SizedBox(height: 32),
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: () => _saveCampaignName(controller.text),
                icon: Icon(Icons.save),
                label: Text('Kaydet'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                ),
              ),
              SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: () => controller.clear(),
                icon: Icon(Icons.clear),
                label: Text('Temizle'),
              ),
            ],
          ),
          SizedBox(height: 32),
          Text(
            '√ñrnek ƒ∞simler:',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              'Yƒ±lba≈üƒ± √ñzel √áekili≈üi',
              'Bahar ≈ûans Oyunu',
              'Yaz Tatili B√ºy√ºk ƒ∞kramiye',
              'Okul D√∂nemi √áekili≈üi',
              'Ramazan √ñzel',
              'Kurban Bayramƒ± ≈ûansƒ±',
            ]
                .map((name) => ActionChip(
                      label: Text(name),
                      onPressed: () => controller.text = name,
                    ))
                .toList(),
          ),
        ],
      ),
    );
  }

  void _saveCampaignName(String name) {
    if (name.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå Kampanya ismi bo≈ü olamaz')),
      );
      return;
    }

    setState(() {});

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ Kampanya ismi belirlendi: $name'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildIkramiyeCinsi() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üíé ƒ∞kramiye Cinsi Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Verilecek ikramiye t√ºr√ºn√º se√ßin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 32),
          Expanded(
            child: GridView.count(
              crossAxisCount: 2,
              childAspectRatio: 1.2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildIkramiyeCard('Nakit Para', 'üí∞', 'cash'),
                _buildIkramiyeCard('Altƒ±n', 'üèÜ', 'gold'),
                _buildIkramiyeCard('Elektronik', 'üì±', 'electronic'),
                _buildIkramiyeCard('Ev E≈üyasƒ±', 'üè†', 'household'),
                _buildIkramiyeCard('Tatil', '‚úàÔ∏è', 'vacation'),
                _buildIkramiyeCard('Diƒüer', 'üéÅ', 'other'),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildIkramiyeCard(String title, String emoji, String type) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _selectIkramiyeType(title, type),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(emoji, style: TextStyle(fontSize: 48)),
              SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[800],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _selectIkramiyeType(String title, String type) {
    setState(() {});

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ ƒ∞kramiye cinsi se√ßildi: $title'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildIkramiyeTutari() {
    final controller = TextEditingController();

    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üí∞ ƒ∞kramiye Tutarƒ± Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Ana ikramiye miktarƒ±nƒ± girin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 32),
          TextField(
            controller: controller,
            decoration: InputDecoration(
              labelText: 'ƒ∞kramiye Tutarƒ± (‚Ç∫)',
              hintText: '√ñrnek: 10000',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.attach_money),
              suffixText: '‚Ç∫',
            ),
            keyboardType: TextInputType.number,
          ),
          SizedBox(height: 32),
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: () => _saveIkramiyeTutari(controller.text),
                icon: Icon(Icons.save),
                label: Text('Kaydet'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                ),
              ),
              SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: () => controller.clear(),
                icon: Icon(Icons.clear),
                label: Text('Temizle'),
              ),
            ],
          ),
          SizedBox(height: 32),
          Text(
            'Hazƒ±r Tutarlar:',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              '1000',
              '5000',
              '10000',
              '25000',
              '50000',
              '100000',
            ]
                .map((amount) => ActionChip(
                      label: Text('$amount ‚Ç∫'),
                      onPressed: () => controller.text = amount,
                    ))
                .toList(),
          ),
        ],
      ),
    );
  }

  void _saveIkramiyeTutari(String amount) {
    final parsedAmount = double.tryParse(amount);
    if (parsedAmount == null || parsedAmount <= 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå Ge√ßerli bir tutar girin')),
      );
      return;
    }

    setState(() {});

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
            '‚úÖ ƒ∞kramiye tutarƒ± belirlendi: ${parsedAmount.toStringAsFixed(0)} ‚Ç∫'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildBirAltUst() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            '‚öñÔ∏è Bir Alt-Bir √úst Tanƒ±mla',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Ana ikramiyenin bir altƒ± ve bir √ºst√º i√ßin ikramiye belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 32),
          Row(
            children: [
              Expanded(
                child: TextField(
                  decoration: InputDecoration(
                    labelText: 'Bir Alt ƒ∞kramiyesi (‚Ç∫)',
                    hintText: '500',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.remove_circle_outline),
                  ),
                  keyboardType: TextInputType.number,
                ),
              ),
              SizedBox(width: 16),
              Expanded(
                child: TextField(
                  decoration: InputDecoration(
                    labelText: 'Bir √úst ƒ∞kramiyesi (‚Ç∫)',
                    hintText: '500',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.add_circle_outline),
                  ),
                  keyboardType: TextInputType.number,
                ),
              ),
            ],
          ),
          SizedBox(height: 32),
          ElevatedButton.icon(
            onPressed: _saveBirAltUst,
            icon: Icon(Icons.save),
            label: Text('Kaydet'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
          ),
          SizedBox(height: 32),
          Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.info, color: Colors.blue),
                    SizedBox(width: 8),
                    Text(
                      'Nasƒ±l √áalƒ±≈üƒ±r?',
                      style: TextStyle(
                          fontWeight: FontWeight.bold, color: Colors.blue[800]),
                    ),
                  ],
                ),
                SizedBox(height: 8),
                Text(
                  '‚Ä¢ Ana kazanan numara: 123\n'
                  '‚Ä¢ Bir alt: 122 (123-1)\n'
                  '‚Ä¢ Bir √ºst: 124 (123+1)\n\n'
                  'Bu numaralara sahip biletler de ikramiye kazanƒ±r.',
                  style: TextStyle(color: Colors.blue[700]),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _saveBirAltUst() {
    setState(() {});

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ Bir alt-bir √ºst ikramiyeleri ayarlandƒ±'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildBiletFiyati() {
    final controller = TextEditingController();

    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üíµ Bilet Fiyatƒ± Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Her bilet i√ßin satƒ±≈ü fiyatƒ±nƒ± belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 16),

          // Mevcut fiyatƒ± g√∂ster
          Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.green.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.green.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                Icon(Icons.check_circle, color: Colors.green),
                SizedBox(width: 12),
                Text(
                  'Mevcut Bilet Fiyatƒ±: ',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                Text(
                  '${_currentTicketPrice.toStringAsFixed(0)} ‚Ç∫',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.green[700],
                    fontSize: 18,
                  ),
                ),
              ],
            ),
          ),

          SizedBox(height: 32),

          TextField(
            controller: controller,
            decoration: InputDecoration(
              labelText: 'Bilet Fiyatƒ± (‚Ç∫)',
              hintText: '√ñrnek: 10',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.local_offer),
              suffixText: '‚Ç∫',
            ),
            keyboardType: TextInputType.number,
          ),

          SizedBox(height: 32),

          Row(
            children: [
              ElevatedButton.icon(
                onPressed: () => _saveBiletFiyati(controller.text),
                icon: Icon(Icons.save),
                label: Text('Kaydet'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                ),
              ),
              SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: () => controller.clear(),
                icon: Icon(Icons.clear),
                label: Text('Temizle'),
              ),
            ],
          ),

          SizedBox(height: 32),

          Text(
            '√ñnerilen Fiyatlar:',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),

          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              '5',
              '10',
              '20',
              '50',
              '100',
              '500',
              '1000',
            ]
                .map((price) => ActionChip(
                      label: Text('$price ‚Ç∫'),
                      onPressed: () => controller.text = price,
                    ))
                .toList(),
          ),
        ],
      ),
    );
  }

  void _saveBiletFiyati(String price) {
    final parsedPrice = double.tryParse(price);
    if (parsedPrice == null || parsedPrice <= 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå Ge√ßerli bir fiyat girin')),
      );
      return;
    }

    setState(() {
      _currentTicketPrice = parsedPrice; // Admin fiyatƒ±nƒ± kaydet
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
            '‚úÖ Bilet fiyatƒ± belirlendi: ${parsedPrice.toStringAsFixed(0)} ‚Ç∫'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildListe() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(
                'üìã Bilet Listesi',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
              Spacer(),

              // Otomatik iptal kontrol√º
              Row(
                children: [
                  Text('Otomatik ƒ∞ptal: '),
                  Switch(
                    value: _autoCancel,
                    onChanged: (value) {
                      setState(() {
                        _autoCancel = value;
                      });

                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(value
                              ? '‚è∞ Otomatik iptal aktif: √áekili≈üe 1 saat kala √∂denmemi≈ü biletler iptal edilecek'
                              : '‚è∏Ô∏è Otomatik iptal devre dƒ±≈üƒ±'),
                          backgroundColor: value ? Colors.orange : Colors.grey,
                        ),
                      );
                    },
                    activeColor: Colors.orange,
                  ),
                ],
              ),

              SizedBox(width: 16),

              ElevatedButton.icon(
                onPressed: _fetchAllTicketsFromSupabase,
                icon: Icon(Icons.add),
                label: Text(_ticketsGenerated
                    ? 'Biletler Listelendi ‚úì'
                    : 'Biletleri Listele'),
                style: ElevatedButton.styleFrom(
                  backgroundColor:
                      _ticketsGenerated ? Colors.green : Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                ),
              ),
            ],
          ),

          SizedBox(height: 16),

          // Bilet istatistikleri
          if (_sampleTickets.isNotEmpty) ...[
            Row(
              children: [
                Expanded(
                    child: _buildStatCard('Toplam', '${_sampleTickets.length}',
                        Icons.confirmation_number, Colors.blue)),
                SizedBox(width: 8),
                Expanded(
                    child: _buildStatCard(
                        'M√ºsait',
                        '${_sampleTickets.where((t) => t.status == TicketStatus.available).length}',
                        Icons.sell,
                        Colors.grey)),
                SizedBox(width: 8),
                Expanded(
                    child: _buildStatCard(
                        '√ñdenmedi',
                        '${_sampleTickets.where((t) => t.status == TicketStatus.unpaid).length}',
                        Icons.schedule,
                        Colors.orange)),
                SizedBox(width: 8),
                Expanded(
                    child: _buildStatCard(
                        '√ñdendi',
                        '${_sampleTickets.where((t) => t.status == TicketStatus.paid).length}',
                        Icons.check_circle,
                        Colors.green)),
              ],
            ),
            SizedBox(height: 16),
          ],

          // Bilet listesi
          Expanded(
            child: _sampleTickets.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.confirmation_number_outlined,
                            size: 80, color: Colors.grey),
                        SizedBox(height: 16),
                        Text('Hen√ºz bilet olu≈üturulmamƒ±≈ü'),
                        SizedBox(height: 8),
                        Text('"Biletleri Listele" butonuna tƒ±klayƒ±n'),
                      ],
                    ),
                  )
                : GridView.builder(
                    gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 4,
                      childAspectRatio: 0.8,
                      crossAxisSpacing: 8,
                      mainAxisSpacing: 8,
                    ),
                    itemCount: _sampleTickets.length,
                    itemBuilder: (context, index) {
                      final ticket = _sampleTickets[index];
                      return _buildTicketCard(ticket);
                    },
                  ),
          ),
        ],
      ),
    );
  }

  // Otomatik iptal kontrol√º i√ßin deƒüi≈üken
  bool _autoCancel = true;

  // Bilet kartƒ± widget'ƒ± - geri sayƒ±m ile
  Widget _buildTicketCard(Ticket ticket) {
    Color backgroundColor;
    Color textColor = Colors.black;
    String statusText;
    IconData statusIcon;

    // Durum ve renk belirleme
    switch (ticket.status) {
      case TicketStatus.available:
        backgroundColor = Colors.grey[300]!;
        statusText = 'M√ºsait';
        statusIcon = Icons.sell;
        break;
      case TicketStatus.unpaid:
        backgroundColor = Colors.orange[200]!;
        statusText = '√ñdenmedi';
        statusIcon = Icons.schedule;
        break;
      case TicketStatus.paid:
        backgroundColor = Colors.green[300]!;
        statusText = '√ñdendi';
        statusIcon = Icons.check_circle;
        break;
      case TicketStatus.cancelled:
        backgroundColor = Colors.red[300]!;
        statusText = 'ƒ∞ptal';
        statusIcon = Icons.cancel;
        textColor = Colors.white;
        break;
      case TicketStatus.winner:
        backgroundColor = Colors.purple[300]!;
        statusText = 'Kazanan';
        statusIcon = Icons.star;
        break;
      default:
        backgroundColor = Colors.grey[300]!;
        statusText = 'Bilinmiyor';
        statusIcon = Icons.help;
        break;
    }

    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _showTicketStatusDialog(ticket),
        child: Container(
          decoration: BoxDecoration(
            color: backgroundColor,
            borderRadius: BorderRadius.circular(8),
            // √ñdenmemi≈ü biletler i√ßin gradient efekt
            gradient: ticket.status == TicketStatus.unpaid
                ? LinearGradient(
                    colors: [Colors.green[200]!, Colors.red[200]!],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  )
                : null,
          ),
          child: Padding(
            padding: EdgeInsets.all(12),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // Bilet numarasƒ±
                Text(
                  ticket.numbersFormatted,
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: textColor,
                  ),
                ),

                SizedBox(height: 8),

                // Durum ikonu ve metni
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(statusIcon, size: 16, color: textColor),
                    SizedBox(width: 4),
                    Flexible(
                      child: Text(
                        statusText,
                        style: TextStyle(
                          fontSize: 12,
                          color: textColor,
                          fontWeight: FontWeight.w500,
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),

                // Geri sayƒ±m (sadece √∂denmemi≈ü biletler i√ßin)
                if (ticket.status == TicketStatus.unpaid &&
                    ticket.drawDate != null) ...[
                  SizedBox(height: 8),
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      ticket.timeUntilDrawFormatted,
                      style: TextStyle(
                        fontSize: 10,
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),

                  // Otomatik iptal uyarƒ±sƒ±
                  if (_autoCancel && ticket.shouldAutoCancel)
                    Container(
                      margin: EdgeInsets.only(top: 4),
                      padding: EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(3),
                      ),
                      child: Text(
                        'YAKINDA ƒ∞PTAL',
                        style: TextStyle(
                          fontSize: 8,
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                ],

                // ƒ∞sim bilgisi (varsa)
                if (ticket.buyerName != null) ...[
                  SizedBox(height: 4),
                  Text(
                    ticket.buyerName!,
                    style: TextStyle(
                      fontSize: 10,
                      color: textColor.withOpacity(0.8),
                      fontWeight: FontWeight.w400,
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }

  // üîß G√úNCELLENDƒ∞: _generateSampleTickets metodu - Supabase'e kayƒ±t ekle
  void _generateSampleTickets() async {
    if (_ticketsGenerated) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚úÖ Biletler zaten olu≈üturulmu≈ü'),
          backgroundColor: Colors.blue,
        ),
      );
      return;
    }

    // Loading g√∂ster
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text(
                'L√ºtfen bekleyin...'), // Eski mesaj yerine daha genel bir mesaj
          ],
        ),
      ),
    );

    try {
      setState(() {
        _sampleTickets.clear();
      });

      // Admin ayarlarƒ±na g√∂re bilet olu≈ütur VE Supabase'e kaydet
      for (int i = 0; i < _currentTicketCount; i++) {
        final Random random = Random();

        // Her bilet i√ßin ≈üans sayƒ±sƒ± kadar numara √ºret
        List<String> numbers = [];
        for (int j = 0; j < _currentChanceCount; j++) {
          String number = '';
          for (int k = 0; k < _currentLastDigitCount; k++) {
            number += random.nextInt(10).toString();
          }
          numbers.add(number);
        }

        final ticket = Ticket(
          id: 'ticket_${DateTime.now().year}${DateTime.now().month.toString().padLeft(2, '0')}${DateTime.now().day.toString().padLeft(2, '0')}_${i.toString().padLeft(4, '0')}',
          campaignId: 'admin_live_campaign',
          numbers: numbers,
          price: _currentTicketPrice,
          status: TicketStatus.available,
          createdAt: DateTime.now(),
          userId: _supabaseService.currentUserId, // Supabase Auth UUID
          drawDate: DateTime.now().add(Duration(days: 1)),
          autoCancel: _autoCancel,
        );

        // üÜï YENƒ∞: Supabase'e kaydet
        final success = await _supabaseService.addTicket(ticket);
        if (success) {
          _sampleTickets.add(ticket);
          _campaignService.addTicketToSystem(ticket);
        } else {
          print('‚ùå Bilet ${ticket.id} Supabase\'e kaydedilemedi');
        }

        // Her 10 bilette bir progress g√ºncelle
        if (i % 10 == 0) {
          await Future.delayed(Duration(milliseconds: 50)); // UI donmasƒ±nƒ± √∂nle
        }
      }

      _ticketsGenerated = true;

      // Loading kapat
      Navigator.pop(context);

      setState(() {});

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              '‚úÖ ${_sampleTickets.length} bilet olu≈üturuldu ve Supabase\'e kaydedildi! Bayiler anƒ±nda g√∂rebilir.'),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 4),
        ),
      );
    } catch (e) {
      // Loading kapat
      Navigator.pop(context);

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå Bilet olu≈üturma hatasƒ±: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  Widget _buildGiderler() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üìâ Giderler',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: _showAddExpenseDialog,
                icon: Icon(Icons.add),
                label: Text('Gider Ekle'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
              ),
              SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: _showExpenseReport,
                icon: Icon(Icons.assessment),
                label: Text('Rapor Al'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              ),
            ],
          ),
          SizedBox(height: 24),
          Expanded(
            child: _financialService.expenses.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.money_off, size: 64, color: Colors.grey),
                        SizedBox(height: 16),
                        Text('Hen√ºz gider kaydƒ± yok'),
                        SizedBox(height: 8),
                        Text('Yeni gider eklemek i√ßin butona tƒ±klayƒ±n'),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: _financialService.expenses.length,
                    itemBuilder: (context, index) {
                      final expense = _financialService.expenses[index];
                      return Card(
                        child: ListTile(
                          leading: CircleAvatar(
                            backgroundColor: Colors.red.withOpacity(0.1),
                            child: Icon(Icons.money_off, color: Colors.red),
                          ),
                          title: Text(expense.description),
                          subtitle: Text(
                              '${expense.date.day}/${expense.date.month}/${expense.date.year}'),
                          trailing: Text(
                            '-${expense.amount.toStringAsFixed(0)} ‚Ç∫',
                            style: TextStyle(
                              color: Colors.red,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }

  void _showAddExpenseDialog() {
    final descController = TextEditingController();
    final amountController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üí∏ Yeni Gider Ekle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: descController,
              decoration: InputDecoration(
                labelText: 'Gider A√ßƒ±klamasƒ±',
                hintText: '√ñrnek: Kƒ±rtasiye masrafƒ±',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: amountController,
              decoration: InputDecoration(
                labelText: 'Tutar (‚Ç∫)',
                hintText: '100',
                border: OutlineInputBorder(),
                suffixText: '‚Ç∫',
              ),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              final amount = double.tryParse(amountController.text);
              if (descController.text.isNotEmpty &&
                  amount != null &&
                  amount > 0) {
                // Gider ekle - FinancialService'e ekleyelim
                final success = await _financialService.addExpense(
                  description: descController.text.trim(),
                  amount: amount,
                  date: DateTime.now(),
                );

                if (success) {
                  setState(() {
                    // UI'ƒ± g√ºncelle
                  });
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(
                          '‚úÖ Gider eklendi: ${descController.text} - ${amount.toStringAsFixed(0)} ‚Ç∫'),
                      backgroundColor: Colors.green,
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('‚ùå Gider eklenirken hata olu≈ütu'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('‚ùå L√ºtfen ge√ßerli bilgiler girin'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: Text('Ekle'),
          ),
        ],
      ),
    );
  }

  void _showExpenseReport() {
    final expenses = _financialService.expenses;
    final totalExpense = expenses.fold(0.0, (sum, exp) => sum + exp.amount);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üìä Gider Raporu'),
        content: Container(
          width: double.maxFinite,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // √ñzet kartƒ±
              Container(
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red),
                ),
                child: Row(
                  children: [
                    Icon(Icons.trending_down, color: Colors.red, size: 32),
                    SizedBox(width: 16),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Toplam Gider',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[600],
                          ),
                        ),
                        Text(
                          '${totalExpense.toStringAsFixed(0)} ‚Ç∫',
                          style: TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.red,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),

              SizedBox(height: 16),

              if (expenses.isEmpty)
                Text(
                  'Hen√ºz gider kaydƒ± bulunmuyor',
                  style: TextStyle(color: Colors.grey[600]),
                )
              else ...[
                Text(
                  'Son ${expenses.length} gider:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 8),
                Container(
                  height: 200,
                  child: ListView.builder(
                    itemCount: expenses.length,
                    itemBuilder: (context, index) {
                      final expense = expenses[index];
                      return ListTile(
                        leading:
                            Icon(Icons.money_off, color: Colors.red, size: 20),
                        title: Text(
                          expense.description,
                          style: TextStyle(fontSize: 14),
                        ),
                        subtitle: Text(
                          '${expense.date.day}/${expense.date.month}/${expense.date.year}',
                          style: TextStyle(fontSize: 12),
                        ),
                        trailing: Text(
                          '-${expense.amount.toStringAsFixed(0)} ‚Ç∫',
                          style: TextStyle(
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
        ],
      ),
    );
  }

  Widget _buildBorcluOlanlar() {
    // √ñdenmemi≈ü biletleri al (sadece isim ve telefon bilgisi olanlar)
    final unpaidTickets = _getUnpaidTicketsWithBuyerInfo();

    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üí≥ Bor√ßlu Olanlar',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Row(
            children: [
              Text(
                'Toplam ${unpaidTickets.length} ki≈üi bor√ßlu',
                style: TextStyle(fontSize: 16, color: Colors.grey[600]),
              ),
              Spacer(),
              ElevatedButton.icon(
                onPressed: () => _sendPaymentReminders(unpaidTickets),
                icon: Icon(Icons.send),
                label: Text('Hatƒ±rlatma G√∂nder'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
              ),
            ],
          ),
          SizedBox(height: 24),
          Expanded(
            child: unpaidTickets.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.check_circle, size: 64, color: Colors.green),
                        SizedBox(height: 16),
                        Text('Harika! Bor√ßlu kimse yok'),
                        SizedBox(height: 8),
                        Text('T√ºm √∂demeler tamamlanmƒ±≈ü'),
                        SizedBox(height: 16),
                        Text(
                          'Biletleri "√ñdenmedi" durumuna alƒ±p isim yazarsanƒ±z burada g√∂r√ºn√ºr.',
                          style:
                              TextStyle(color: Colors.grey[500], fontSize: 12),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: unpaidTickets.length,
                    itemBuilder: (context, index) {
                      final ticket = unpaidTickets[index];
                      return Card(
                        child: ListTile(
                          leading: CircleAvatar(
                            backgroundColor: Colors.orange.withOpacity(0.1),
                            child: Icon(Icons.confirmation_number,
                                color: Colors.orange),
                          ),
                          title: Text(ticket.buyerName ?? 'ƒ∞simsiz Bor√ßlu'),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              if (ticket.buyerPhone != null)
                                Text('üìû ${ticket.buyerPhone}'),
                              Text('üé´ ${ticket.numbersFormatted}'),
                              Text(
                                  'üìÖ ${ticket.soldAt?.day}/${ticket.soldAt?.month}/${ticket.soldAt?.year} tarihinde satƒ±ldƒ±'),
                            ],
                          ),
                          trailing: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                '${ticket.price.toStringAsFixed(0)} ‚Ç∫',
                                style: TextStyle(
                                  color: Colors.red,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 16,
                                ),
                              ),
                              Text(
                                'Bor√ß',
                                style: TextStyle(
                                  color: Colors.red,
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                          onTap: () => _showTicketDebtActions(ticket),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }

  List<Ticket> _getUnpaidTicketsWithBuyerInfo() {
    // √ñnce sadece sample biletleri kullan (√ß√ºnk√º bunlar zaten campaign service'e ekleniyor)
    List<Ticket> allTickets = [];

    // √ñncelik sample biletlere ver
    if (_sampleTickets.isNotEmpty) {
      allTickets.addAll(_sampleTickets);
    } else {
      // Eƒüer sample bilet yoksa campaign service'ten al
      allTickets.addAll(_campaignService.getAllSystemTickets());
    }

    // Duplikatlarƒ± ID'ye g√∂re temizle
    final Map<String, Ticket> uniqueTickets = {};
    for (var ticket in allTickets) {
      uniqueTickets[ticket.id] = ticket;
    }

    // T√úM √∂denmemi≈ü biletleri d√∂nd√ºr (isim olsun olmasƒ±n)
    // ƒ∞sim yoksa "ƒ∞simsiz Bor√ßlu" olarak g√∂sterilecek
    return uniqueTickets.values
        .where((ticket) =>
            ticket.status == TicketStatus.sold ||
            ticket.status == TicketStatus.unpaid)
        .toList();
  }

  void _showTicketDebtActions(Ticket ticket) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üí≥ ${ticket.buyerName}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Bilet: ${ticket.numbersFormatted}'),
            SizedBox(height: 8),
            Text('Bor√ß: ${ticket.price.toStringAsFixed(0)} ‚Ç∫'),
            if (ticket.buyerPhone != null) ...[
              SizedBox(height: 8),
              Text('Telefon: ${ticket.buyerPhone}'),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _markTicketAsPaid(ticket);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: Text('√ñdendi ƒ∞≈üaretle'),
          ),
        ],
      ),
    );
  }

  void _markTicketAsPaid(Ticket ticket) {
    // Bilet durumunu "√∂dendi" yap
    _updateTicketStatusWithInfo(
        ticket, TicketStatus.paid, ticket.buyerName, ticket.buyerPhone);

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
            '‚úÖ ${ticket.buyerName} - ${ticket.numbersFormatted} √∂dendi olarak i≈üaretlendi'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _sendPaymentReminders(List<Ticket> unpaidTickets) {
    if (unpaidTickets.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              'üì≠ Bor√ßlu kimse yok, hatƒ±rlatma g√∂nderilecek kimse bulunamadƒ±'),
          backgroundColor: Colors.blue,
        ),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üì≤ √ñdeme Hatƒ±rlatmasƒ±'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
                '${unpaidTickets.length} ki≈üiye √∂deme hatƒ±rlatmasƒ± g√∂nderilsin mi?'),
            SizedBox(height: 16),
            Container(
              height: 150,
              child: ListView.builder(
                itemCount: unpaidTickets.length,
                itemBuilder: (context, index) {
                  final ticket = unpaidTickets[index];
                  return ListTile(
                    leading: Icon(Icons.person, size: 20),
                    title: Text(ticket.buyerName ?? 'ƒ∞simsiz',
                        style: TextStyle(fontSize: 14)),
                    subtitle: Text(
                      '${ticket.numbersFormatted} - ${ticket.price.toStringAsFixed(0)} ‚Ç∫',
                      style: TextStyle(fontSize: 12),
                    ),
                    trailing: ticket.buyerPhone != null
                        ? Icon(Icons.phone, color: Colors.green, size: 16)
                        : Icon(Icons.phone_disabled,
                            color: Colors.red, size: 16),
                  );
                },
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _sendReminders(unpaidTickets);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: Text('G√∂nder'),
          ),
        ],
      ),
    );
  }

  void _sendReminders(List<Ticket> tickets) {
    final phonelessCount = tickets
        .where((t) => t.buyerPhone == null || t.buyerPhone!.isEmpty)
        .length;
    final phoneCount = tickets.length - phonelessCount;

    String message = '';
    if (phoneCount > 0) {
      message += 'üì± $phoneCount ki≈üiye SMS g√∂nderildi';
    }
    if (phonelessCount > 0) {
      if (message.isNotEmpty) message += '\n';
      message += '‚ö†Ô∏è $phonelessCount ki≈üinin telefonu yok';
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.orange,
        duration: Duration(seconds: 4),
      ),
    );
  }

  void _showDebtActions(Person person) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üí≥ ${person.fullName}'),
        content: Text('Bor√ß: ${person.debt.toStringAsFixed(0)} ‚Ç∫'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _markAsPaid(person);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: Text('√ñdendi ƒ∞≈üaretle'),
          ),
        ],
      ),
    );
  }

  void _markAsPaid(Person person) async {
    await _personService.markAsPaid(person.id);
    setState(() {});

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ ${person.fullName} √∂dendi olarak i≈üaretlendi'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildYeniKampanya() {
    final campaigns = _campaignService.campaigns;

    // Debug: Kampanyalarƒ± kontrol et
    print('üìã UI da gosterilecek kampanya sayisi: ${campaigns.length}');
    if (campaigns.isNotEmpty) {
      print('üìã Kampanya listesi: ${campaigns.map((c) => c.name).toList()}');
    }

    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'üÜï Yeni Kampanya Olu≈ütur',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          SizedBox(height: 16),
          Text(
            'Kendi ayarlarƒ±nƒ±zla √∂zel kampanya olu≈üturun ve yayƒ±nlayƒ±n:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          SizedBox(height: 24),

          // √ñzel kampanya olu≈ütur butonu
          Container(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _showCustomCampaignDialog,
              icon: Icon(Icons.add_circle, size: 24),
              label: Text(
                'Yeni √ñzel Kampanya Olu≈ütur',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFF6A1B9A),
                foregroundColor: Colors.white,
                minimumSize: Size(double.infinity, 60),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                elevation: 8,
              ),
            ),
          ),

          SizedBox(height: 32),

          // Olu≈üturulan kampanyalar
          Row(
            children: [
              Text(
                'üìã Olu≈üturulan Kampanyalar',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              Spacer(),
              Text(
                'Toplam: ${campaigns.length} kampanya',
                style: TextStyle(fontSize: 14, color: Colors.grey[600]),
              ),
            ],
          ),

          SizedBox(height: 16),

          Expanded(
            child: campaigns.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.campaign_outlined,
                            size: 80, color: Colors.grey),
                        SizedBox(height: 16),
                        Text(
                          'Hen√ºz kampanya olu≈üturmadƒ±nƒ±z',
                          style:
                              TextStyle(fontSize: 18, color: Colors.grey[600]),
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Yukarƒ±daki butonu kullanarak yeni kampanya olu≈üturun',
                          style:
                              TextStyle(fontSize: 14, color: Colors.grey[500]),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: campaigns.length,
                    itemBuilder: (context, index) {
                      final campaign = campaigns[index];
                      return _buildCampaignPublishCard(campaign);
                    },
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildCampaignPublishCard(Campaign campaign) {
    final stats = _campaignService.getTicketStats(campaign.id);
    final isPublished = _campaignService
        .isListPublished; // Her kampanya i√ßin ayrƒ± yayƒ±nlama durumu olmalƒ±

    return Card(
      elevation: 4,
      margin: EdgeInsets.only(bottom: 16),
      child: Padding(
        padding: EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Ba≈ülƒ±k ve durum
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        campaign.name,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.grey[800],
                        ),
                      ),
                      SizedBox(height: 4),
                      Text(
                        '${campaign.ticketCount} bilet ‚Ä¢ ${campaign.lastDigitCount} haneli ‚Ä¢ ${campaign.chanceCount} ≈üans',
                        style: TextStyle(color: Colors.grey[600], fontSize: 14),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: isPublished
                        ? Colors.green.withOpacity(0.1)
                        : Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Text(
                    isPublished ? 'üü¢ Yayƒ±nda' : 'üü° Hazƒ±r',
                    style: TextStyle(
                      color:
                          isPublished ? Colors.green[700] : Colors.orange[700],
                      fontWeight: FontWeight.bold,
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),

            SizedBox(height: 16),

            // Kampanya bilgileri
            Row(
              children: [
                Expanded(
                  child: _buildCampaignInfo('üí∞ Bilet Fiyatƒ±',
                      '${campaign.ticketPrice.toStringAsFixed(0)} ‚Ç∫'),
                ),
                Expanded(
                  child: _buildCampaignInfo(
                      'üèÜ Ana ƒ∞kramiye', _getCampaignPrizeText(campaign)),
                ),
                Expanded(
                  child: _buildCampaignInfo('üìÖ √áekili≈ü',
                      '${campaign.drawDate.day}/${campaign.drawDate.month}/${campaign.drawDate.year}'),
                ),
              ],
            ),

            SizedBox(height: 20),

            // Aksiyonlar
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _viewCampaignDetails(campaign),
                    icon: Icon(Icons.visibility, size: 18),
                    label: Text('Detaylarƒ± G√∂r√ºnt√ºle'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
                SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: isPublished
                        ? () => _unpublishCampaign(campaign)
                        : () => _publishCampaign(campaign),
                    icon: Icon(
                      isPublished ? Icons.visibility_off : Icons.publish,
                      size: 18,
                    ),
                    label: Text(
                        isPublished ? 'Yayƒ±ndan Kaldƒ±r' : 'Kampanyayƒ± Yayƒ±nla'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor:
                          isPublished ? Colors.orange : Colors.green,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCampaignInfo(String label, String value) {
    return Column(
      children: [
        Text(
          label,
          style: TextStyle(fontSize: 12, color: Colors.grey[600]),
          textAlign: TextAlign.center,
        ),
        SizedBox(height: 4),
        Text(
          value,
          style: TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  void _viewCampaignDetails(Campaign campaign) {
    _showCampaignDetails(campaign);
  }

  void _publishCampaign(Campaign campaign) async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üì¢ Kampanya Yayƒ±nla'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
                '${campaign.name} kampanyasƒ±nƒ± yayƒ±nlamak istediƒüinizden emin misiniz?'),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(Icons.info, color: Colors.green),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Kampanya yayƒ±nlandƒ±ƒüƒ±nda t√ºm bayiler bu kampanyayƒ± g√∂rebilir ve bilet satabilir.',
                      style: TextStyle(color: Colors.green[800]),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);

              // Kampanyayƒ± yayƒ±nla
              await _campaignService.publishList();
              setState(() {});

              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                      '‚úÖ ${campaign.name} kampanyasƒ± yayƒ±nlandƒ±! Bayiler artƒ±k g√∂rebilir.'),
                  backgroundColor: Colors.green,
                  duration: Duration(seconds: 3),
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: Text('Evet, Yayƒ±nla'),
          ),
        ],
      ),
    );
  }

  void _unpublishCampaign(Campaign campaign) async {
    await _campaignService.unpublishList();
    setState(() {});

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ ${campaign.name} kampanyasƒ± yayƒ±ndan kaldƒ±rƒ±ldƒ±!'),
        backgroundColor: Colors.orange,
        duration: Duration(seconds: 2),
      ),
    );
  }

  String _getCampaignPrizeText(Campaign campaign) {
    if (campaign.prizeCurrency == PrizeCurrency.other &&
        campaign.customCurrency != null) {
      return '${campaign.prizeAmount} ${campaign.customCurrency}';
    } else {
      String symbol;
      switch (campaign.prizeCurrency) {
        case PrizeCurrency.tl:
          symbol = '‚Ç∫';
          break;
        case PrizeCurrency.dolar:
          symbol = '\$';
          break;
        case PrizeCurrency.euro:
          symbol = '‚Ç¨';
          break;
        case PrizeCurrency.altin:
          symbol = 'ü•á';
          break;
        default:
          symbol = '‚Ç∫';
      }
      return '${campaign.prizeAmount} $symbol';
    }
  }

  // Kampanya Y√∂netimi sayfasƒ±
  Widget _buildKampanyaYonetimi() {
    final campaigns = _campaignService.campaigns;

    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(
                'üéØ Kampanya Y√∂netimi',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
              Spacer(),
              Text(
                'Toplam: ${campaigns.length} kampanya',
                style: TextStyle(fontSize: 16, color: Colors.grey[600]),
              ),
            ],
          ),
          SizedBox(height: 24),

          // Kampanya kartlarƒ±
          Expanded(
            child: campaigns.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.campaign, size: 80, color: Colors.grey),
                        SizedBox(height: 16),
                        Text(
                          'Hen√ºz kampanya yok',
                          style:
                              TextStyle(fontSize: 20, color: Colors.grey[600]),
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Yeni Kampanya sekmesinden kampanya olu≈üturun',
                          style: TextStyle(color: Colors.grey[500]),
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: campaigns.length,
                    itemBuilder: (context, index) {
                      final campaign = campaigns[index];
                      return _buildCampaignCard(campaign);
                    },
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildCampaignCard(Campaign campaign) {
    final stats = _campaignService.getTicketStats(campaign.id);
    final isCompleted = campaign.isCompleted;

    return Card(
      elevation: 4,
      margin: EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () => _showCampaignDetails(campaign),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Ba≈ülƒ±k ve durum
              Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          campaign.name,
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.grey[800],
                          ),
                        ),
                        SizedBox(height: 4),
                        Text(
                          'Hafta ${campaign.weekNumber} ‚Ä¢ ${campaign.lastDigitCount} haneli',
                          style: TextStyle(color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  ),
                  Container(
                    padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: isCompleted
                          ? Colors.red.withOpacity(0.1)
                          : Colors.green.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      isCompleted ? 'üî¥ Tamamlandƒ±' : 'üü¢ Aktif',
                      style: TextStyle(
                        color:
                            isCompleted ? Colors.red[700] : Colors.green[700],
                        fontWeight: FontWeight.bold,
                        fontSize: 12,
                      ),
                    ),
                  ),
                ],
              ),

              SizedBox(height: 16),

              // ƒ∞statistikler
              Row(
                children: [
                  _buildStatChip('Toplam Bilet', '${stats['total']}',
                      Icons.confirmation_number, Colors.blue),
                  SizedBox(width: 12),
                  _buildStatChip(
                      'Satƒ±lan', '${stats['sold']}', Icons.sell, Colors.green),
                  SizedBox(width: 12),
                  _buildStatChip('M√ºsait', '${stats['available']}',
                      Icons.pending, Colors.orange),
                ],
              ),

              SizedBox(height: 16),

              // ƒ∞kramiye bilgisi ve aksiyonlar
              Row(
                children: [
                  Icon(Icons.monetization_on, color: Colors.amber, size: 20),
                  SizedBox(width: 8),
                  Text(
                    'Ana ƒ∞kramiye: ${_getCampaignPrizeText(campaign)}',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.amber[800],
                    ),
                  ),
                  Spacer(),
                  if (!isCompleted) ...[
                    ElevatedButton.icon(
                      onPressed: () => _showDrawResultDialog(campaign),
                      icon: Icon(Icons.casino, size: 16),
                      label: Text('√áekili≈ü Sonucu Gir'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.purple,
                        foregroundColor: Colors.white,
                        padding:
                            EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      ),
                    ),
                    SizedBox(width: 8),
                    ElevatedButton.icon(
                      onPressed: () => _finishCampaign(campaign),
                      icon: Icon(Icons.stop_circle, size: 16),
                      label: Text('Kampanyayƒ± Bitir'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red,
                        foregroundColor: Colors.white,
                        padding:
                            EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      ),
                    ),
                  ],
                ],
              ),

              if (isCompleted && campaign.winningNumber != null) ...[
                SizedBox(height: 12),
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.purple.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          Icon(Icons.emoji_events, color: Colors.purple),
                          SizedBox(width: 8),
                          Text(
                            'Kazanan Numara: ${campaign.winningNumber}',
                            style: TextStyle(
                              color: Colors.purple[800],
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Spacer(),
                          ElevatedButton.icon(
                            onPressed: () => _showWinningTickets(campaign),
                            icon: Icon(Icons.star, size: 16),
                            label: Text('Talihli Biletleri G√∂ster'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.purple,
                              foregroundColor: Colors.white,
                              padding: EdgeInsets.symmetric(
                                  horizontal: 12, vertical: 6),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatChip(
      String label, String value, IconData icon, Color color) {
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 14, color: color),
          SizedBox(width: 4),
          Text(
            value,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    );
  }

  void _showCustomCampaignDialog() {
    final nameController = TextEditingController();
    final ticketCountController = TextEditingController();
    final digitCountController = TextEditingController();
    final chanceCountController = TextEditingController();
    final priceController = TextEditingController();
    final prizeController = TextEditingController();
    final prizeCurrencyController =
        TextEditingController(text: 'TL'); // Varsayƒ±lan deƒüer
    final upperPrizeController = TextEditingController();
    final lowerPrizeController = TextEditingController();

    DateTime selectedDrawDate =
        DateTime.now().add(Duration(days: 7)); // Varsayƒ±lan 1 hafta sonra

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: Text('üõ†Ô∏è √ñzel Kampanya Olu≈ütur'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: InputDecoration(
                    labelText: 'Kampanya Adƒ±',
                    hintText: '√ñrnek: √ñzel √áekili≈ü 2024',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.campaign),
                  ),
                ),
                SizedBox(height: 16),

                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: ticketCountController,
                        decoration: InputDecoration(
                          labelText: 'Bilet Sayƒ±sƒ±',
                          hintText: '100',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                    SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: digitCountController,
                        decoration: InputDecoration(
                          labelText: 'Hane Sayƒ±sƒ±',
                          hintText: '3',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 16),

                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: chanceCountController,
                        decoration: InputDecoration(
                          labelText: '≈ûans Sayƒ±sƒ±',
                          hintText: '2',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                    SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: priceController,
                        decoration: InputDecoration(
                          labelText: 'Bilet Fiyatƒ± (‚Ç∫)',
                          hintText: '10',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 16),

                // √áekili≈ü tarihi se√ßici
                InkWell(
                  onTap: () async {
                    final DateTime? picked = await showDatePicker(
                      context: context,
                      initialDate: selectedDrawDate,
                      firstDate: DateTime.now(),
                      lastDate: DateTime.now().add(Duration(days: 365)),
                    );
                    if (picked != null && picked != selectedDrawDate) {
                      setState(() {
                        selectedDrawDate = picked;
                      });
                    }
                  },
                  child: Container(
                    padding: EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.calendar_today, color: Colors.grey[600]),
                        SizedBox(width: 12),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              '√áekili≈ü Tarihi',
                              style: TextStyle(
                                  fontSize: 12, color: Colors.grey[600]),
                            ),
                            Text(
                              '${selectedDrawDate.day}/${selectedDrawDate.month}/${selectedDrawDate.year}',
                              style: TextStyle(
                                  fontSize: 16, fontWeight: FontWeight.bold),
                            ),
                          ],
                        ),
                        Spacer(),
                        Icon(Icons.arrow_drop_down, color: Colors.grey[600]),
                      ],
                    ),
                  ),
                ),

                SizedBox(height: 16),

                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: prizeController,
                        decoration: InputDecoration(
                          labelText: 'Ana ƒ∞kramiye Miktarƒ±',
                          hintText: '1000 TL, 5 Altƒ±n, iPhone 15...',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.attach_money),
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: prizeCurrencyController,
                        decoration: InputDecoration(
                          labelText: 'ƒ∞kramiye Cinsi',
                          hintText: 'TL, USD, Altƒ±n, Telefon...',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.category),
                        ),
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 16),

                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: lowerPrizeController,
                        decoration: InputDecoration(
                          labelText: 'Bir Alt ƒ∞kramiye',
                          hintText: '100 TL, Kulaklƒ±k...',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.remove_circle_outline),
                        ),
                      ),
                    ),
                    SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: upperPrizeController,
                        decoration: InputDecoration(
                          labelText: 'Bir √úst ƒ∞kramiye',
                          hintText: '100 TL, Telefon...',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.add_circle_outline),
                        ),
                      ),
                    ),
                  ],
                ),

                SizedBox(height: 16),

                // ƒ∞kramiye cinsi √∂rnekleri
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.lightbulb, color: Colors.blue, size: 20),
                          SizedBox(width: 8),
                          Text(
                            'ƒ∞kramiye Cinsi √ñrnekleri:',
                            style: TextStyle(
                                fontWeight: FontWeight.bold,
                                color: Colors.blue[800]),
                          ),
                        ],
                      ),
                      SizedBox(height: 8),
                      Wrap(
                        spacing: 8,
                        children: [
                          'TL',
                          'USD',
                          'EUR',
                          'Altƒ±n',
                          'iPhone',
                          'Laptop',
                          'Araba',
                          'Televizyon',
                          'Buzdolabƒ±',
                          'Tatil'
                        ]
                            .map((prize) => ActionChip(
                                  label: Text(prize,
                                      style: TextStyle(fontSize: 12)),
                                  onPressed: () =>
                                      prizeCurrencyController.text = prize,
                                  backgroundColor: Colors.blue.withOpacity(0.1),
                                ))
                            .toList(),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('ƒ∞ptal'),
            ),
            ElevatedButton(
              onPressed: () async {
                // Validasyon
                if (nameController.text.isEmpty ||
                    ticketCountController.text.isEmpty ||
                    digitCountController.text.isEmpty ||
                    chanceCountController.text.isEmpty ||
                    priceController.text.isEmpty ||
                    prizeController.text.isEmpty ||
                    prizeCurrencyController.text.isEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content:
                            Text('‚ùå L√ºtfen t√ºm zorunlu alanlarƒ± doldurun')),
                  );
                  return;
                }

                final ticketCount = int.tryParse(ticketCountController.text);
                final digitCount = int.tryParse(digitCountController.text);
                final chanceCount = int.tryParse(chanceCountController.text);
                final price = double.tryParse(priceController.text);

                // ƒ∞kramiye tutarlarƒ± artƒ±k string olarak kabul edilir (rakam, yazƒ±, ne olursa olsun)
                final prizeText = prizeController.text.trim();
                final upperPrizeText = upperPrizeController.text.trim();
                final lowerPrizeText = lowerPrizeController.text.trim();

                if (ticketCount == null ||
                    digitCount == null ||
                    chanceCount == null ||
                    price == null ||
                    ticketCount <= 0 ||
                    digitCount <= 0 ||
                    chanceCount <= 0 ||
                    price <= 0) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                        content: Text(
                            '‚ùå L√ºtfen bilet sayƒ±sƒ±, rakam sayƒ±sƒ±, ≈üans sayƒ±sƒ± ve bilet fiyatƒ± i√ßin ge√ßerli sayƒ±lar girin')),
                  );
                  return;
                }

                // ƒ∞kramiye cinsini belirle
                PrizeCurrency prizeCurrency;
                final currencyText =
                    prizeCurrencyController.text.trim().toUpperCase();
                if (currencyText == 'TL' || currencyText == 'T√úRK Lƒ∞RASI') {
                  prizeCurrency = PrizeCurrency.tl;
                } else if (currencyText == 'USD' || currencyText == 'DOLAR') {
                  prizeCurrency = PrizeCurrency.dolar;
                } else if (currencyText == 'EUR' || currencyText == 'EURO') {
                  prizeCurrency = PrizeCurrency.euro;
                } else if (currencyText == 'ALTIN' || currencyText == 'GOLD') {
                  prizeCurrency = PrizeCurrency.altin;
                } else {
                  // Diƒüer durumlar i√ßin √∂zel para birimi
                  prizeCurrency = PrizeCurrency.other;
                }

                // Kampanya olu≈ütur
                final campaign = Campaign(
                  id: 'custom_${DateTime.now().millisecondsSinceEpoch}',
                  name: nameController.text.trim(),
                  lastDigitCount: digitCount,
                  chanceCount: chanceCount,
                  ticketCount: ticketCount,
                  ticketPrice: price,
                  prizeAmount: prizeText, // Artƒ±k string olarak g√∂nderilir
                  upperPrize: upperPrizeText,
                  lowerPrize: lowerPrizeText,
                  prizeCurrency: prizeCurrency,
                  customCurrency: prizeCurrencyController.text
                      .trim(), // √ñzel ikramiye cinsi
                  weekNumber: (DateTime.now()
                              .difference(DateTime(DateTime.now().year, 1, 1))
                              .inDays /
                          7)
                      .ceil(),
                  drawDate: selectedDrawDate, // Se√ßilen tarihi kullan
                  createdAt: DateTime.now(),
                );

                await _campaignService.createAdminCampaign(campaign);
                Navigator.pop(context);

                // Debug: Kampanya sayisini kontrol et
                final campaignsAfter = _campaignService.campaigns;
                print('üéØ Kampanya olusturuldu: ${campaign.name}');
                print('üéØ Toplam kampanya sayisi: ${campaignsAfter.length}');
                print(
                    'üéØ Kampanya listesi: ${campaignsAfter.map((c) => c.name).toList()}');

                setState(() {});

                String displayPrizeText;
                if (prizeCurrency == PrizeCurrency.other ||
                    prizeCurrencyController.text.trim().isNotEmpty) {
                  displayPrizeText =
                      '$prizeText ${prizeCurrencyController.text}';
                } else {
                  String symbol = '‚Ç∫'; // varsayƒ±lan
                  switch (prizeCurrency) {
                    case PrizeCurrency.tl:
                      symbol = '‚Ç∫';
                      break;
                    case PrizeCurrency.dolar:
                      symbol = '\$';
                      break;
                    case PrizeCurrency.euro:
                      symbol = '‚Ç¨';
                      break;
                    case PrizeCurrency.altin:
                      symbol = 'ü•á';
                      break;
                    default:
                      symbol = '‚Ç∫';
                  }
                  displayPrizeText = '$prizeText $symbol';
                }

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        '‚úÖ √ñzel kampanya olu≈üturuldu: ${campaign.name}\nüìÖ √áekili≈ü: ${selectedDrawDate.day}/${selectedDrawDate.month}/${selectedDrawDate.year}\nüèÜ ƒ∞kramiye: $displayPrizeText'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 4),
                  ),
                );

                _showSuccessAnimation();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Color(0xFF6A1B9A),
                foregroundColor: Colors.white,
              ),
              child: Text('Olu≈ütur'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOrtakSayisi() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'üë• Ortak Sayƒ±sƒ± Belirle',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            Text(
              'Kampanyada ka√ß ortak olacaƒüƒ±nƒ± belirleyin:',
              style: TextStyle(fontSize: 16, color: Colors.grey[600]),
            ),
            SizedBox(height: 32),

            GridView.count(
              shrinkWrap: true,
              physics: NeverScrollableScrollPhysics(),
              crossAxisCount: 3,
              childAspectRatio: 1.2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildOrtakCard('2 Ortak', '50% - 50%', 2),
                _buildOrtakCard('3 Ortak', '33% - 33% - 34%', 3),
                _buildOrtakCard('4 Ortak', '25% her biri', 4),
                _buildOrtakCard('5 Ortak', '20% her biri', 5),
                _buildOrtakCard('6 Ortak', '16.7% her biri', 6),
                _buildOrtakCard('√ñzel', 'Manuel payla≈üƒ±m', 0),
              ],
            ),

            SizedBox(height: 32),

            if (_selectedPartnerCount > 0) ...[
              Text(
                'Se√ßilen: $_selectedPartnerCount Ortak',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              SizedBox(height: 16),

              // Ortak profil g√∂r√ºn√ºmleri
              GridView.builder(
                shrinkWrap: true,
                physics: NeverScrollableScrollPhysics(),
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: min(_selectedPartnerCount, 3),
                  childAspectRatio: 0.8,
                  crossAxisSpacing: 16,
                  mainAxisSpacing: 16,
                ),
                itemCount: _selectedPartnerCount,
                itemBuilder: (context, index) =>
                    _buildPartnerProfileCard(index + 1),
              ),

              SizedBox(height: 16),

              ElevatedButton.icon(
                onPressed: _showPartnerDetails,
                icon: Icon(Icons.group),
                label: Text('Ortak Detaylarƒ±nƒ± D√ºzenle'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                  minimumSize: Size(double.infinity, 50),
                ),
              ),
            ],

            SizedBox(height: 100), // Alt bo≈üluk
          ],
        ),
      ),
    );
  }

  int _selectedPartnerCount = 0;

  Widget _buildOrtakCard(String title, String description, int count) {
    final isSelected = _selectedPartnerCount == count;

    return Card(
      elevation: isSelected ? 8 : 4,
      child: InkWell(
        onTap: () => _selectPartnerCount(count),
        borderRadius: BorderRadius.circular(8),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            color: isSelected ? Color(0xFF6A1B9A).withOpacity(0.1) : null,
          ),
          child: Padding(
            padding: EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  count == 0 ? Icons.settings : Icons.group,
                  size: 32,
                  color: isSelected ? Color(0xFF6A1B9A) : Colors.grey[600],
                ),
                SizedBox(height: 8),
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: isSelected ? Color(0xFF6A1B9A) : Colors.grey[800],
                  ),
                ),
                SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 10,
                    color: Colors.grey[600],
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _selectPartnerCount(int count) {
    setState(() {
      _selectedPartnerCount = count;
    });

    if (count == 0) {
      _showCustomPartnerDialog();
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚úÖ $count ortak se√ßildi'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  void _showCustomPartnerDialog() {
    final partnerCountController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üõ†Ô∏è √ñzel Ortak Ayarla'),
        content: TextField(
          controller: partnerCountController,
          decoration: InputDecoration(
            labelText: 'Ortak Sayƒ±sƒ±',
            hintText: '√ñrnek: 3',
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.group),
          ),
          keyboardType: TextInputType.number,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final count = int.tryParse(partnerCountController.text);
              if (count != null && count > 0 && count <= 10) {
                Navigator.pop(context);
                _selectPartnerCount(count);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                      content: Text('‚ùå 1-10 arasƒ± ge√ßerli bir sayƒ± girin')),
                );
              }
            },
            child: Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  void _showPartnerDetails() {
    if (_selectedPartnerCount <= 0) return;

    // Mevcut ortaklarƒ± al veya yeni olu≈ütur
    List<Partner> partners = [];
    if (_campaignService.campaigns.isNotEmpty) {
      partners = List.from(_campaignService.campaigns.last.partners);
    }

    // Eksik ortaklarƒ± tamamla
    while (partners.length < _selectedPartnerCount) {
      partners.add(Partner(
        id: 'partner_${partners.length + 1}',
        name: '',
        phone: '',
        percentage: 0.0,
      ));
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üë• Ortak Detaylarƒ± ($_selectedPartnerCount Ortak)'),
        content: Container(
          width: double.maxFinite,
          height: 400,
          child: SingleChildScrollView(
            child: Column(
              children: [
                for (int i = 0; i < _selectedPartnerCount; i++) ...[
                  Card(
                    child: Padding(
                      padding: EdgeInsets.all(12),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Ortak ${i + 1}',
                            style: TextStyle(fontWeight: FontWeight.bold),
                          ),
                          SizedBox(height: 8),
                          TextField(
                            decoration: InputDecoration(
                              labelText: 'Ad Soyad',
                              border: OutlineInputBorder(),
                              isDense: true,
                            ),
                            onChanged: (value) =>
                                partners[i] = partners[i].copyWith(name: value),
                          ),
                          SizedBox(height: 8),
                          Row(
                            children: [
                              Expanded(
                                child: TextField(
                                  decoration: InputDecoration(
                                    labelText: 'Telefon',
                                    border: OutlineInputBorder(),
                                    isDense: true,
                                  ),
                                  onChanged: (value) => partners[i] =
                                      partners[i].copyWith(phone: value),
                                ),
                              ),
                              SizedBox(width: 8),
                              Expanded(
                                child: TextField(
                                  decoration: InputDecoration(
                                    labelText: 'Pay (%)',
                                    border: OutlineInputBorder(),
                                    isDense: true,
                                    suffixText: '%',
                                  ),
                                  keyboardType: TextInputType.number,
                                  onChanged: (value) {
                                    final percentage =
                                        double.tryParse(value) ?? 0.0;
                                    partners[i] = partners[i]
                                        .copyWith(percentage: percentage);
                                  },
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                  SizedBox(height: 8),
                ],

                // Toplam y√ºzde g√∂stergesi
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.info, color: Colors.blue),
                      SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'Toplam pay: ${partners.fold(0.0, (sum, p) => sum + p.percentage).toStringAsFixed(1)}%\n'
                          'Kalan admin payƒ±: ${(100 - partners.fold(0.0, (sum, p) => sum + p.percentage)).toStringAsFixed(1)}%',
                          style: TextStyle(color: Colors.blue[700]),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final totalPercentage =
                  partners.fold(0.0, (sum, p) => sum + p.percentage);
              if (totalPercentage > 100) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå Toplam pay 100%\'√º ge√ßemez')),
                );
                return;
              }

              // Ortaklarƒ± kaydet
              _savePartners(partners);
              Navigator.pop(context);

              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('‚úÖ Ortak detaylarƒ± kaydedildi'),
                  backgroundColor: Colors.green,
                ),
              );

              _showSuccessAnimation();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
            child: Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  List<Partner> _currentPartners = [];

  void _savePartners(List<Partner> partners) {
    // Ortaklarƒ± ger√ßekten kaydet
    _currentPartners = List.from(partners);

    // Kampanyalara da kaydet
    for (var campaign in _campaignService.campaigns) {
      // Her kampanyaya ortak bilgilerini kaydet
      print(
          'Kampanya ${campaign.name} i√ßin ${partners.length} ortak kaydedildi');
    }

    setState(() {});

    print('Kaydedilen ortaklar:');
    for (int i = 0; i < _currentPartners.length; i++) {
      print(
          'Ortak ${i + 1}: ${_currentPartners[i].name} - %${_currentPartners[i].percentage}');
    }
  }

  Widget _buildPartnerProfileCard(int partnerNumber) {
    // Ger√ßek partner bilgilerini al
    final partnerIndex = partnerNumber - 1;
    final partnerName = _currentPartners.length > partnerIndex &&
            _currentPartners[partnerIndex].name.isNotEmpty
        ? _currentPartners[partnerIndex].name
        : 'Ortak $partnerNumber';
    final percentage = _currentPartners.length > partnerIndex
        ? _currentPartners[partnerIndex].percentage.toStringAsFixed(1)
        : '0.0';
    final hasData = _currentPartners.length > partnerIndex &&
        _currentPartners[partnerIndex].name.isNotEmpty;

    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _showPartnerInfo(partnerNumber),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Profil resmi
              CircleAvatar(
                radius: 30,
                backgroundColor:
                    hasData ? Colors.green.withOpacity(0.1) : Colors.grey[200],
                child: hasData
                    ? Icon(
                        Icons.person,
                        size: 30,
                        color: Colors.green,
                      )
                    : Text(
                        'O$partnerNumber',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.grey[600],
                        ),
                      ),
              ),
              SizedBox(height: 12),

              // ƒ∞sim
              Text(
                partnerName,
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: hasData ? Colors.green[800] : Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),

              SizedBox(height: 8),

              // Pay y√ºzdesi
              Container(
                padding: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: hasData
                      ? Colors.green.withOpacity(0.1)
                      : Color(0xFF6A1B9A).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  '%$percentage',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    color: hasData ? Colors.green : Color(0xFF6A1B9A),
                  ),
                ),
              ),

              SizedBox(height: 8),

              // Durum ikonu
              Icon(
                hasData ? Icons.check_circle : Icons.edit,
                size: 16,
                color: hasData ? Colors.green : Colors.grey[400],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showPartnerInfo(int partnerNumber) {
    final partnerIndex = partnerNumber - 1;
    final hasData = _currentPartners.length > partnerIndex &&
        _currentPartners[partnerIndex].name.isNotEmpty;

    final name =
        hasData ? _currentPartners[partnerIndex].name : 'Hen√ºz belirlenmedi';
    final phone =
        hasData ? _currentPartners[partnerIndex].phone : 'Hen√ºz belirlenmedi';
    final percentage = hasData
        ? '%${_currentPartners[partnerIndex].percentage.toStringAsFixed(1)}'
        : 'Hen√ºz belirlenmedi';

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üë§ Ortak $partnerNumber Bilgileri'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildPartnerInfoRow('Ad Soyad:', name),
            _buildPartnerInfoRow('Telefon:', phone),
            _buildPartnerInfoRow('Pay Oranƒ±:', percentage),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: hasData
                    ? Colors.green.withOpacity(0.1)
                    : Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(hasData ? Icons.check_circle : Icons.info,
                      color: hasData ? Colors.green : Colors.orange),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      hasData
                          ? 'Ortak bilgileri ba≈üarƒ±yla kaydedildi!'
                          : 'Ortak detaylarƒ±nƒ± d√ºzenlemek i√ßin "Ortak Detaylarƒ±nƒ± D√ºzenle" butonunu kullanƒ±n.',
                      style: TextStyle(
                          color:
                              hasData ? Colors.green[800] : Colors.orange[800]),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _showPartnerDetails();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
            child: Text('D√ºzenle'),
          ),
        ],
      ),
    );
  }

  Widget _buildPartnerInfoRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.grey[600],
              ),
            ),
          ),
          Expanded(
            child: Text(value),
          ),
        ],
      ),
    );
  }

  Widget _buildDilekSikayet() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        children: [
          Text('üìù Dilek ≈ûikayet Kutusu',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
          SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: _complaintService.allComplaints.length,
              itemBuilder: (context, index) {
                final complaint = _complaintService.allComplaints[index];
                return Card(
                  child: ListTile(
                    leading: Text(complaint.statusEmoji,
                        style: TextStyle(fontSize: 24)),
                    title: Text(complaint.senderName),
                    subtitle: Text(complaint.message),
                    trailing: Text(complaint.statusText),
                    onTap: () => _showComplaintDetails(complaint),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchResults() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('üîç Arama Sonu√ßlarƒ± (${_searchResults.length})',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
          SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: _searchResults.length,
              itemBuilder: (context, index) {
                final ticket = _searchResults[index];
                return Card(
                  child: ListTile(
                    leading: Text(ticket.statusEmoji,
                        style: TextStyle(fontSize: 24)),
                    title: Text('${ticket.numbersFormatted}'),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        if (ticket.buyerName != null)
                          Text('Alƒ±cƒ±: ${ticket.buyerName}'),
                        if (ticket.buyerPhone != null)
                          Text('Telefon: ${ticket.buyerPhone}'),
                        Text('Durum: ${ticket.statusText}'),
                      ],
                    ),
                    trailing: Text('${ticket.price} ‚Ç∫'),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildPlaceholderPage() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(Icons.construction, size: 64, color: Colors.grey),
          SizedBox(height: 16),
          Text(
            'Bu sayfa yakƒ±nda eklenecek',
            style: TextStyle(fontSize: 18, color: Colors.grey[600]),
          ),
        ],
      ),
    );
  }

  // Profil resmi se√ßenekleri
  void _showProfileImageOptions() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üì∑ Profil Resmi'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: Icon(Icons.photo_library),
              title: Text('Galeriden Se√ß'),
              onTap: () {
                Navigator.pop(context);
                _selectImageFromGallery();
              },
            ),
            ListTile(
              leading: Icon(Icons.camera_alt),
              title: Text('Fotoƒüraf √áek'),
              onTap: () {
                Navigator.pop(context);
                _takePicture();
              },
            ),
            if (_authService.currentUser?.profileImage != null)
              ListTile(
                leading: Icon(Icons.delete, color: Colors.red),
                title: Text('Resmi Kaldƒ±r'),
                onTap: () {
                  Navigator.pop(context);
                  _removeProfileImage();
                },
              ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
        ],
      ),
    );
  }

  void _selectImageFromGallery() async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 512,
        maxHeight: 512,
        imageQuality: 85,
      );

      if (image != null) {
        // Ger√ßek uygulamada burada dosyayƒ± sunucuya y√ºklenir
        // ≈ûimdilik dosya yolunu sim√ºle ediyoruz
        _updateProfileImage('file://${image.path}');

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('üì∑ Fotoƒüraf se√ßildi: ${image.name}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå Fotoƒüraf se√ßilemedi: $e')),
      );
    }
  }

  void _takePicture() async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: ImageSource.camera,
        maxWidth: 512,
        maxHeight: 512,
        imageQuality: 85,
      );

      if (image != null) {
        // Ger√ßek uygulamada burada dosyayƒ± sunucuya y√ºklenir
        // ≈ûimdilik dosya yolunu sim√ºle ediyoruz
        _updateProfileImage('file://${image.path}');

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('üì∏ Fotoƒüraf √ßekildi: ${image.name}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå Fotoƒüraf √ßekilemedi: $e')),
      );
    }
  }

  void _removeProfileImage() {
    _updateProfileImage(null);
  }

  void _updateProfileImage(String? imageUrl) async {
    final success = await _authService.updateProfile(
      name: _authService.currentUser!.name,
      phone: _authService.currentUser!.phone,
      email: _authService.currentUser!.email,
      profileImage: imageUrl,
    );

    if (success) {
      setState(() {});
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚úÖ Profil resmi g√ºncellendi'),
          backgroundColor: Colors.green,
        ),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå Profil resmi g√ºncellenemedi'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // Profil d√ºzenleme
  void _showEditProfileDialog() {
    final user = _authService.currentUser!;
    final nameController = TextEditingController(text: user.name);
    final phoneController = TextEditingController(text: user.phone ?? '');
    final emailController = TextEditingController(text: user.email ?? '');

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('‚úèÔ∏è Profili D√ºzenle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: nameController,
              decoration: InputDecoration(
                labelText: 'Ad Soyad',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.phone,
            ),
            SizedBox(height: 16),
            TextField(
              controller: emailController,
              decoration: InputDecoration(
                labelText: 'E-posta',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.emailAddress,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              final success = await _authService.updateProfile(
                name: nameController.text,
                phone:
                    phoneController.text.isEmpty ? null : phoneController.text,
                email:
                    emailController.text.isEmpty ? null : emailController.text,
              );

              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚úÖ Profil g√ºncellendi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå G√ºncelleme ba≈üarƒ±sƒ±z')),
                );
              }
            },
            child: Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  // ≈ûifre deƒüi≈ütirme
  Future<void> _showChangePasswordDialog() async {
    final _formKey = GlobalKey<FormState>();
    final newPass = TextEditingController();
    final newPass2 = TextEditingController();
    final oldPass = TextEditingController();
    await showDialog(
      context: context,
      builder: (ctx) => AlertDialog(
        title: const Text('≈ûifre Deƒüi≈ütir'),
        content: Form(
          key: _formKey,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextFormField(
                controller: oldPass,
                obscureText: true,
                decoration: const InputDecoration(labelText: 'Mevcut ≈ûifre'),
                validator: (s) =>
                    (s == null || s.isEmpty) ? 'Mevcut ≈üifre gerekli' : null,
              ),
              TextFormField(
                controller: newPass,
                obscureText: true,
                decoration: const InputDecoration(labelText: 'Yeni ≈ûifre'),
                validator: (s) =>
                    (s == null || s.length < 6) ? 'En az 6 karakter' : null,
              ),
              TextFormField(
                controller: newPass2,
                obscureText: true,
                decoration:
                    const InputDecoration(labelText: 'Yeni ≈ûifre Tekrar'),
                validator: (s) =>
                    (s != newPass.text) ? '≈ûifreler e≈üle≈ümiyor' : null,
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
              onPressed: () => Navigator.pop(ctx), child: const Text('ƒ∞ptal')),
          ElevatedButton(
            onPressed: () async {
              if (!_formKey.currentState!.validate()) return;
              final ok =
                  await _authService.changePassword(oldPass.text, newPass.text);
              Navigator.pop(ctx);
              if (!ok) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Hata: ≈ûifre g√ºncellenemedi!')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('≈ûifre ba≈üarƒ±yla g√ºncellendi')),
                );
              }
            },
            child: const Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  // Yardƒ±mcƒ± metodlar
  void _searchTickets(String query) {
    if (query.isEmpty) {
      setState(() {
        _searchResults = [];
      });
      return;
    }

    setState(() {
      _searchResults = _ticketService.searchTicketsByName(query);
    });
  }

  void _logout() async {
    await _authService.logout();
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(builder: (context) => LoginScreen()),
    );
  }

  void _showNotifications() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üîî Bildirimler'),
        content: Container(
          width: double.maxFinite,
          height: 300,
          child: _ticketService.pendingNotifications.isEmpty
              ? Center(child: Text('Yeni bildirim yok'))
              : ListView.builder(
                  itemCount: _ticketService.pendingNotifications.length,
                  itemBuilder: (context, index) {
                    final notification =
                        _ticketService.pendingNotifications[index];
                    return Card(
                      child: ListTile(
                        leading: Text(notification.typeEmoji),
                        title: Text(notification.title),
                        subtitle: Text(notification.message),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            ElevatedButton(
                              onPressed: () =>
                                  _approveTicketRequest(notification),
                              child: Text('‚úÖ'),
                            ),
                            SizedBox(width: 8),
                            ElevatedButton(
                              onPressed: () =>
                                  _rejectTicketRequest(notification),
                              style: ElevatedButton.styleFrom(
                                  backgroundColor: Colors.red),
                              child: Text('‚ùå'),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
        ],
      ),
    );
  }

  void _approveTicketRequest(notification) {
    _ticketService.processTicketRequest(
      notificationId: notification.id,
      approved: true,
      buyerName: notification.fromUserName,
      buyerPhone: '',
    );
    setState(() {});
    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚úÖ Bilet talebi onaylandƒ±')),
    );
  }

  void _rejectTicketRequest(notification) {
    _ticketService.processTicketRequest(
      notificationId: notification.id,
      approved: false,
      buyerName: '',
      buyerPhone: '',
    );
    setState(() {});
    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('‚ùå Bilet talebi reddedildi')),
    );
  }

  void _addPersonDialog() {
    final firstNameController = TextEditingController();
    final lastNameController = TextEditingController();
    final phoneController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üë§ Yeni Ki≈üi Ekle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: firstNameController,
              decoration: InputDecoration(
                labelText: 'Ad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: lastNameController,
              decoration: InputDecoration(
                labelText: 'Soyad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person_outline),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.phone),
                hintText: '05XXXXXXXXX',
              ),
              keyboardType: TextInputType.phone,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (firstNameController.text.isEmpty ||
                  lastNameController.text.isEmpty ||
                  phoneController.text.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå L√ºtfen t√ºm alanlarƒ± doldurun')),
                );
                return;
              }

              final person = Person(
                id: 'person_${DateTime.now().millisecondsSinceEpoch}',
                firstName: firstNameController.text.trim(),
                lastName: lastNameController.text.trim(),
                phone: phoneController.text.trim(),
                createdAt: DateTime.now(),
              );

              final success = await _personService.addPerson(person);
              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                      content: Text('‚úÖ ${person.fullName} ba≈üarƒ±yla eklendi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                      content: Text('‚ùå Bu telefon numarasƒ± zaten kayƒ±tlƒ±')),
                );
              }
            },
            child: Text('Ekle'),
          ),
        ],
      ),
    );
  }

  void _importFromContacts() async {
    // Y√ºkleniyor dialog'unu g√∂ster
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        content: Row(
          children: [
            CircularProgressIndicator(),
            SizedBox(width: 16),
            Text('Telefon rehberinden ki≈üiler y√ºkleniyor...'),
          ],
        ),
      ),
    );

    try {
      final newContacts = await _personService.importFromContacts();
      Navigator.pop(context); // Y√ºkleniyor dialog'unu kapat

      setState(() {});

      if (newContacts.isEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('üì± Telefon rehberinden yeni ki≈üi bulunamadƒ±\n'
                'Not: Bu sim√ºlasyon s√ºr√ºm√ºnde telefon rehberi eri≈üimi kƒ±sƒ±tlƒ±dƒ±r.'),
            duration: Duration(seconds: 4),
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
              content: Text('‚úÖ ${newContacts.length} ki≈üi rehberden eklendi')),
        );
      }
    } catch (e) {
      Navigator.pop(context); // Y√ºkleniyor dialog'unu kapat
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('‚ùå Telefon rehberine eri≈üim hatasƒ±')),
      );
    }
  }

  void _handlePersonAction(Person person, String action) {
    if (action == 'edit') {
      _showEditPersonDialog(person);
    } else if (action == 'delete') {
      _showDeletePersonDialog(person);
    }
  }

  void _showEditPersonDialog(Person person) {
    final firstNameController = TextEditingController(text: person.firstName);
    final lastNameController = TextEditingController(text: person.lastName);
    final phoneController = TextEditingController(text: person.phone);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('‚úèÔ∏è Ki≈üi D√ºzenle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: firstNameController,
              decoration: InputDecoration(
                labelText: 'Ad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: lastNameController,
              decoration: InputDecoration(
                labelText: 'Soyad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person_outline),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.phone),
              ),
              keyboardType: TextInputType.phone,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (firstNameController.text.isEmpty ||
                  lastNameController.text.isEmpty ||
                  phoneController.text.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå L√ºtfen t√ºm alanlarƒ± doldurun')),
                );
                return;
              }

              final updatedPerson = person.copyWith(
                firstName: firstNameController.text.trim(),
                lastName: lastNameController.text.trim(),
                phone: phoneController.text.trim(),
              );

              final success = await _personService.updatePerson(updatedPerson);
              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                      content: Text('‚úÖ ${updatedPerson.fullName} g√ºncellendi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå G√ºncelleme ba≈üarƒ±sƒ±z')),
                );
              }
            },
            child: Text('G√ºncelle'),
          ),
        ],
      ),
    );
  }

  void _showDeletePersonDialog(Person person) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üóëÔ∏è Ki≈üi Sil'),
        content: Text(
            '${person.fullName} adlƒ± ki≈üiyi silmek istediƒüinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              final success = await _personService.deletePerson(person.id);
              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚úÖ ${person.fullName} silindi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå Silme i≈ülemi ba≈üarƒ±sƒ±z')),
                );
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: Text('Sil', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  void _showComplaintDetails(complaint) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üìù ≈ûikayet Detayƒ±'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('G√∂nderen: ${complaint.senderName}'),
            if (complaint.senderPhone != null)
              Text('Telefon: ${complaint.senderPhone}'),
            SizedBox(height: 16),
            Text('Mesaj:'),
            Text(complaint.message),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          ElevatedButton(
            onPressed: () {
              _complaintService.markAsResolved(complaintId: complaint.id);
              setState(() {});
              Navigator.pop(context);
            },
            child: Text('√á√∂z√ºld√º ƒ∞≈üaretle'),
          ),
        ],
      ),
    );
  }

  // üîß G√úNCELLENDƒ∞: _buildListeYayinla metodu - Ger√ßek zamanlƒ± bilgi ekleme
  Widget _buildListeYayinla() {
    return Padding(
      padding: EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Durum kartƒ± - Realtime bilgi ile
          Card(
            child: Padding(
              padding: EdgeInsets.all(16),
              child: Column(
                children: [
                  Row(
                    children: [
                      Icon(
                        _campaignService.isListPublished
                            ? Icons.visibility
                            : Icons.visibility_off,
                        size: 32,
                        color: _campaignService.isListPublished
                            ? Colors.green
                            : Colors.grey,
                      ),
                      SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Liste Durumu',
                              style: TextStyle(
                                  fontSize: 16, color: Colors.grey[600]),
                            ),
                            Text(
                              _campaignService.isListPublished
                                  ? 'Yayƒ±nlandƒ± (Realtime Aktif)'
                                  : 'Yayƒ±nlanmadƒ±',
                              style: TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                                color: _campaignService.isListPublished
                                    ? Colors.green
                                    : Colors.grey[800],
                              ),
                            ),
                          ],
                        ),
                      ),
                      // üÜï YENƒ∞: Realtime status g√∂stergesi
                      if (_campaignService.isListPublished)
                        Container(
                          padding:
                              EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                          decoration: BoxDecoration(
                            color: Colors.green.withOpacity(0.1),
                            borderRadius: BorderRadius.circular(20),
                            border: Border.all(color: Colors.green),
                          ),
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Container(
                                width: 8,
                                height: 8,
                                decoration: BoxDecoration(
                                  color: Colors.green,
                                  shape: BoxShape.circle,
                                ),
                              ),
                              SizedBox(width: 6),
                              Text(
                                'CANLI',
                                style: TextStyle(
                                  color: Colors.green[700],
                                  fontWeight: FontWeight.bold,
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                        ),
                    ],
                  ),

                  // üÜï YENƒ∞: Realtime istatistikleri
                  if (_campaignService.isListPublished) ...[
                    SizedBox(height: 16),
                    Container(
                      padding: EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.blue.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Row(
                        children: [
                          Icon(Icons.sync, color: Colors.blue),
                          SizedBox(width: 8),
                          Expanded(
                            child: Text(
                              'üì° Ger√ßek Zamanlƒ± Senkronizasyon Aktif\nBayiler t√ºm deƒüi≈üiklikleri anƒ±nda g√∂r√ºr',
                              style: TextStyle(color: Colors.blue[700]),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ],
              ),
            ),
          ),

          SizedBox(height: 24),

          // A√ßƒ±klama - g√ºncellenmi≈ü
          Container(
            padding: EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue.withOpacity(0.3)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.info, color: Colors.blue),
                    SizedBox(width: 8),
                    Text(
                      'Ger√ßek Zamanlƒ± Liste Yayƒ±nlama',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue[800],
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 12),
                Text(
                  '‚Ä¢ Liste yayƒ±nlandƒ±ƒüƒ±nda t√ºm bayiler biletleri anƒ±nda g√∂r√ºr\n'
                  '‚Ä¢ Bilet durumu deƒüi≈üiklikleri ger√ßek zamanlƒ± senkronize olur\n'
                  '‚Ä¢ Admin\'deki her deƒüi≈üiklik bayilere otomatik bildirim g√∂nderir\n'
                  '‚Ä¢ Renk kodlarƒ±: M√ºsait (gri), √ñdenmedi (turuncu), √ñdendi (ye≈üil), ƒ∞ptal (kƒ±rmƒ±zƒ±)',
                  style: TextStyle(color: Colors.blue[700]),
                ),
              ],
            ),
          ),

          SizedBox(height: 32),

          // Ana butonlar
          Row(
            children: [
              if (!_campaignService.isListPublished) ...[
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () async {
                      await _campaignService.publishList();
                      // üÜï YENƒ∞: Realtime yayƒ±n ba≈ülat
                      await _supabaseService.testConnection();
                      setState(() {});

                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                              '‚úÖ Liste ba≈üarƒ±yla yayƒ±nlandƒ±! Bayiler ger√ßek zamanlƒ± olarak biletleri g√∂rebilir.'),
                          backgroundColor: Colors.green,
                          duration: Duration(seconds: 4),
                        ),
                      );
                    },
                    icon: Icon(Icons.publish, size: 24),
                    label: Text(
                      'Lƒ∞STEYƒ∞ YAYINLA (CANLI)',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
                ),
              ] else ...[
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () async {
                      await _campaignService.unpublishList();
                      setState(() {});

                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                              '‚úÖ Liste yayƒ±ndan kaldƒ±rƒ±ldƒ±! Ger√ßek zamanlƒ± senkronizasyon durduruldu.'),
                          backgroundColor: Colors.orange,
                          duration: Duration(seconds: 3),
                        ),
                      );
                    },
                    icon: Icon(Icons.visibility_off, size: 24),
                    label: Text(
                      'Lƒ∞STEYƒ∞ Gƒ∞ZLE',
                      style:
                          TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
                ),
              ],
            ],
          ),

          SizedBox(height: 24),

          // Milli Piyango Sonu√ß √áekme Butonu
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: () async {
                showDialog(
                  context: context,
                  barrierDismissible: false,
                  builder: (context) => AlertDialog(
                    content: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        CircularProgressIndicator(),
                        SizedBox(height: 16),
                        Text(
                          'Milli Piyango sitesinden sonu√ß √ßekiliyor...',
                          style: TextStyle(fontSize: 16),
                        ),
                        SizedBox(height: 8),
                        Text(
                          'Bu i≈ülem birka√ß saniye s√ºrebilir',
                          style:
                              TextStyle(fontSize: 12, color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  ),
                );

                try {
                  // B√ºy√ºk ikramiye numarasƒ±nƒ± √ßek
                  final buyukIkramiyeNo =
                      await MilliPiyangoService.getBuyukIkramiyeNumara();

                  // Dialog'u kapat
                  Navigator.pop(context);

                  if (buyukIkramiyeNo != null && buyukIkramiyeNo.isNotEmpty) {
                    // Ba≈üarƒ± mesajƒ± g√∂ster
                    showDialog(
                      context: context,
                      builder: (context) => AlertDialog(
                        title: Text('‚úÖ Milli Piyango Sonucu'),
                        content: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            Text(
                              'B√ºy√ºk ƒ∞kramiye Numarasƒ±:',
                              style: TextStyle(fontSize: 16),
                            ),
                            SizedBox(height: 8),
                            Text(
                              buyukIkramiyeNo,
                              style: TextStyle(
                                fontSize: 28,
                                fontWeight: FontWeight.bold,
                                color: Colors.green,
                              ),
                            ),
                            SizedBox(height: 16),
                            Container(
                              padding: EdgeInsets.all(12),
                              decoration: BoxDecoration(
                                color: Colors.green.withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Row(
                                children: [
                                  Icon(Icons.check_circle, color: Colors.green),
                                  SizedBox(width: 8),
                                  Expanded(
                                    child: Text(
                                      'Milli Piyango resmi sitesinden ba≈üarƒ±yla √ßekildi',
                                      style:
                                          TextStyle(color: Colors.green[800]),
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                        actions: [
                          TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: Text('Kapat'),
                          ),
                        ],
                      ),
                    );
                  } else {
                    // Sonu√ß alƒ±namadƒ±
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text(
                            '‚ö†Ô∏è Milli Piyango sonucu alƒ±namadƒ±. L√ºtfen daha sonra tekrar deneyin.'),
                        backgroundColor: Colors.orange,
                        duration: Duration(seconds: 3),
                      ),
                    );
                  }
                } catch (e) {
                  // Dialog'u kapat
                  Navigator.pop(context);

                  // Hata mesajƒ± g√∂ster
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('‚ùå Hata: ${e.toString()}'),
                      backgroundColor: Colors.red,
                      duration: Duration(seconds: 3),
                    ),
                  );
                }
              },
              icon: Icon(Icons.download, size: 24),
              label: Text(
                'Mƒ∞LLƒ∞ Pƒ∞YANGODAN SONU√áLARI √áEK',
                style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.deepPurple,
                foregroundColor: Colors.white,
                padding: EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
            ),
          ),

          SizedBox(height: 24),

          // ƒ∞statistikler
          if (_campaignService.isListPublished) ...[
            Text(
              'Yayƒ±nlanan Liste ƒ∞statistikleri',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 16),
            Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    'Toplam Bilet',
                    '${_sampleTickets.length}', // Admin'in olu≈üturduƒüu ger√ßek sayƒ±
                    Icons.confirmation_number,
                    Colors.blue,
                  ),
                ),
                SizedBox(width: 16),
                Expanded(
                  child: _buildStatCard(
                    'M√ºsait Bilet',
                    '${_sampleTickets.where((t) => t.status == TicketStatus.available).length}',
                    Icons.sell_outlined,
                    Colors.grey,
                  ),
                ),
                SizedBox(width: 16),
                Expanded(
                  child: _buildStatCard(
                    'Sistem Toplam',
                    '${_campaignService.getAllSystemTickets().length}', // Debug i√ßin
                    Icons.bug_report,
                    Colors.red,
                  ),
                ),
              ],
            ),
          ],
        ],
      ),
    );
  }

  void _showCampaignDetails(Campaign campaign) {
    final stats = _campaignService.getTicketStats(campaign.id);

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üéØ ${campaign.name}'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildDetailRow(
                  'üìä Durum', campaign.isCompleted ? 'Tamamlandƒ±' : 'Aktif'),
              _buildDetailRow('üìÖ Hafta', 'Hafta ${campaign.weekNumber}'),
              _buildDetailRow(
                  'üî¢ Hane Sayƒ±sƒ±', '${campaign.lastDigitCount} haneli'),
              _buildDetailRow('üé≤ ≈ûans Sayƒ±sƒ±', '${campaign.chanceCount} ≈üans'),
              _buildDetailRow('üé´ Toplam Bilet', '${stats['total']}'),
              _buildDetailRow('üí∞ Bilet Fiyatƒ±',
                  '${campaign.ticketPrice.toStringAsFixed(0)} ‚Ç∫'),
              _buildDetailRow('üèÜ Ana ƒ∞kramiye', '${campaign.prizeAmount}'),
              _buildDetailRow('‚¨ÜÔ∏è Bir √úst ƒ∞kramiye', '${campaign.upperPrize}'),
              _buildDetailRow('‚¨áÔ∏è Bir Alt ƒ∞kramiye', '${campaign.lowerPrize}'),
              SizedBox(height: 16),
              Text('üìà Satƒ±≈ü ƒ∞statistikleri:',
                  style: TextStyle(fontWeight: FontWeight.bold)),
              SizedBox(height: 8),
              _buildDetailRow('‚úÖ Satƒ±lan Bilet', '${stats['sold']}'),
              _buildDetailRow('üíµ √ñdenen Bilet', '${stats['paid']}'),
              _buildDetailRow('‚è≥ M√ºsait Bilet', '${stats['available']}'),
              _buildDetailRow('‚ùå ƒ∞ptal Edilen', '${stats['cancelled']}'),
              if (campaign.isCompleted && campaign.winningNumber != null) ...[
                SizedBox(height: 16),
                Container(
                  padding: EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.purple.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text('üéâ √áekili≈ü Sonucu:',
                          style: TextStyle(fontWeight: FontWeight.bold)),
                      SizedBox(height: 8),
                      Text('Kazanan Numara: ${campaign.winningNumber}',
                          style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.purple)),
                      Text('Kazanan Bilet: ${stats['winners']} adet'),
                    ],
                  ),
                ),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          if (!campaign.isCompleted)
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                _finishCampaign(campaign);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
              child: Text('Kampanyayƒ± Bitir'),
            ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          SizedBox(
            width: 140,
            child: Text(label, style: TextStyle(fontWeight: FontWeight.w500)),
          ),
          Expanded(child: Text(value)),
        ],
      ),
    );
  }

  Widget _buildTicketListItem(Ticket ticket) {
    Color backgroundColor;
    Color textColor = Colors.black;
    String statusText;
    bool isClickable = true; // T√ºm biletler tƒ±klanabilir

    // Durum ve renk belirleme
    switch (ticket.status) {
      case TicketStatus.available:
        backgroundColor = Colors.grey[100]!;
        statusText = 'M√ºsait';
        break;
      case TicketStatus.sold:
        // Satƒ±lan √∂denmeyen: yarƒ±sƒ± ye≈üil yarƒ±sƒ± kƒ±rmƒ±zƒ±
        backgroundColor = Colors.orange[100]!;
        statusText = '√ñdenmedi';
        break;
      case TicketStatus.unpaid:
        backgroundColor = Colors.orange[100]!;
        statusText = '√ñdenmedi';
        break;
      case TicketStatus.paid:
        backgroundColor = Colors.green[100]!;
        statusText = '√ñdendi';
        break;
      case TicketStatus.cancelled:
        backgroundColor = Colors.red[300]!;
        statusText = 'ƒ∞ptal Edildi';
        textColor = Colors.white;
        break;
      case TicketStatus.winner:
        backgroundColor = Colors.purple[100]!;
        statusText = 'Kazanan';
        break;
    }

    return Card(
      margin: EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: InkWell(
        onTap: isClickable ? () => _showTicketStatusDialog(ticket) : null,
        child: Container(
          decoration: BoxDecoration(
            color: backgroundColor,
            borderRadius: BorderRadius.circular(4),
            // Satƒ±lan √∂denmemi≈ü i√ßin √∂zel gradient
            gradient: ticket.status == TicketStatus.sold
                ? LinearGradient(
                    colors: [Colors.green[200]!, Colors.red[200]!],
                    stops: [0.5, 0.5],
                    begin: Alignment.centerLeft,
                    end: Alignment.centerRight,
                  )
                : null,
          ),
          child: ListTile(
            leading: Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: ticket.status == TicketStatus.available
                    ? Colors.grey
                    : ticket.status == TicketStatus.sold
                        ? Colors.orange
                        : ticket.status == TicketStatus.paid
                            ? Colors.green
                            : Colors.red,
                shape: BoxShape.circle,
              ),
              child: Center(
                child: Text(
                  ticket.numbersFormatted,
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 10,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
            title: Text(
              '${ticket.numbersFormatted}',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: textColor,
                fontSize: 18,
              ),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Durum: $statusText',
                  style: TextStyle(color: textColor.withOpacity(0.8)),
                ),
                if (ticket.buyerName != null)
                  Text(
                    'Alƒ±cƒ±: ${ticket.buyerName}',
                    style: TextStyle(color: textColor.withOpacity(0.8)),
                  ),
                if (ticket.buyerPhone != null)
                  Text(
                    'Telefon: ${ticket.buyerPhone}',
                    style: TextStyle(color: textColor.withOpacity(0.8)),
                  ),
              ],
            ),
            trailing: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  '${ticket.price.toStringAsFixed(0)} ‚Ç∫',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                    color: textColor,
                  ),
                ),
                if (isClickable)
                  Icon(
                    Icons.edit,
                    size: 16,
                    color: textColor.withOpacity(0.6),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _showTicketStatusDialog(Ticket ticket) {
    final nameController = TextEditingController(text: ticket.buyerName ?? '');
    final phoneController =
        TextEditingController(text: ticket.buyerPhone ?? '');

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üé´ Bilet Durumu G√ºncelle'),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Numaralar: ${ticket.numbersFormatted}',
                  style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
              SizedBox(height: 16),
              Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: _getStatusColor(ticket.status),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(_getStatusIcon(ticket.status), color: Colors.white),
                    SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Mevcut Durum: ${_getStatusText(ticket.status)}',
                        style: TextStyle(
                            color: Colors.white, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 24),

              // Ad Soyad alanƒ± (isteƒüe baƒülƒ±)
              TextField(
                controller: nameController,
                decoration: InputDecoration(
                  labelText: 'Ad Soyad (ƒ∞steƒüe baƒülƒ±)',
                  hintText: 'M√º≈üteri adƒ±nƒ± girebilirsiniz',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person_outline),
                ),
              ),
              SizedBox(height: 16),

              // Telefon alanƒ± (isteƒüe baƒülƒ±)
              TextField(
                controller: phoneController,
                decoration: InputDecoration(
                  labelText: 'Telefon (ƒ∞steƒüe baƒülƒ±)',
                  hintText: '05XXXXXXXXX',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.phone_outlined),
                ),
                keyboardType: TextInputType.phone,
              ),
              SizedBox(height: 24),

              Text('Yeni durum se√ßin:',
                  style: TextStyle(fontWeight: FontWeight.bold)),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          // M√ºsait durumu i√ßin buton
          if (ticket.status != TicketStatus.available)
            ElevatedButton(
              onPressed: () {
                _updateTicketStatusWithInfo(ticket, TicketStatus.available,
                    nameController.text.trim(), phoneController.text.trim());
                Navigator.pop(context);
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.grey),
              child: Text('M√ºsait'),
            ),
          // Satƒ±ldƒ± (√ñdenmedi) butonu
          ElevatedButton(
            onPressed: () {
              // √ñdenmedi durumu i√ßin isim zorunlu
              if (nameController.text.trim().isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        '‚ùå Bor√ßlu i≈üaretlemek i√ßin en az isim bilgisi gereklidir'),
                    backgroundColor: Colors.red,
                  ),
                );
                return;
              }
              _updateTicketStatusWithInfo(ticket, TicketStatus.sold,
                  nameController.text.trim(), phoneController.text.trim());
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: Text('√ñdenmedi'),
          ),
          // √ñdendi butonu
          ElevatedButton(
            onPressed: () {
              _updateTicketStatusWithInfo(ticket, TicketStatus.paid,
                  nameController.text.trim(), phoneController.text.trim());
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: Text('√ñdendi'),
          ),
          // ƒ∞ptal butonu
          if (ticket.status != TicketStatus.available)
            ElevatedButton(
              onPressed: () {
                _updateTicketStatusWithInfo(ticket, TicketStatus.cancelled,
                    nameController.text.trim(), phoneController.text.trim());
                Navigator.pop(context);
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
              child: Text('ƒ∞ptal Et'),
            ),
        ],
      ),
    );
  }

  Color _getStatusColor(TicketStatus status) {
    switch (status) {
      case TicketStatus.available:
        return Colors.grey;
      case TicketStatus.sold:
        return Colors.orange;
      case TicketStatus.unpaid:
        return Colors.orange;
      case TicketStatus.paid:
        return Colors.green;
      case TicketStatus.cancelled:
        return Colors.red;
      case TicketStatus.winner:
        return Colors.purple;
    }
  }

  IconData _getStatusIcon(TicketStatus status) {
    switch (status) {
      case TicketStatus.available:
        return Icons.sell_outlined;
      case TicketStatus.sold:
        return Icons.payment;
      case TicketStatus.unpaid:
        return Icons.schedule;
      case TicketStatus.paid:
        return Icons.check_circle;
      case TicketStatus.cancelled:
        return Icons.cancel;
      case TicketStatus.winner:
        return Icons.emoji_events;
    }
  }

  String _getStatusText(TicketStatus status) {
    switch (status) {
      case TicketStatus.available:
        return 'M√ºsait';
      case TicketStatus.sold:
        return '√ñdenmedi';
      case TicketStatus.unpaid:
        return '√ñdenmedi';
      case TicketStatus.paid:
        return '√ñdendi';
      case TicketStatus.cancelled:
        return 'ƒ∞ptal Edildi';
      case TicketStatus.winner:
        return 'Kazanan';
    }
  }

  void _updateTicketStatus(Ticket ticket, TicketStatus newStatus) {
    // Eƒüer iptal ediliyorsa otomatik olarak satƒ±labilir duruma ge√ßir
    if (newStatus == TicketStatus.cancelled) {
      newStatus = TicketStatus.available;

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              '‚úÖ Bilet iptal edildi ve satƒ±lmak i√ßin listeye geri eklendi'),
          backgroundColor: Colors.orange,
        ),
      );
    }

    // Ger√ßek veri g√ºncellemesi - sample biletlerde bu bileti bul ve g√ºncelle
    final ticketIndex = _sampleTickets.indexWhere((t) => t.id == ticket.id);

    if (ticketIndex != -1) {
      // Sample biletlerde g√ºncelleme yap
      _sampleTickets[ticketIndex] = _sampleTickets[ticketIndex].copyWith(
        status: newStatus,
        buyerName: newStatus == TicketStatus.available
            ? null
            : _sampleTickets[ticketIndex].buyerName,
        buyerPhone: newStatus == TicketStatus.available
            ? null
            : _sampleTickets[ticketIndex].buyerPhone,
      );
    }

    // Ticket service √ºzerinden g√ºncelleme yap
    _ticketService.updateTicketStatus(
      ticketId: ticket.id,
      status: newStatus,
      buyerName: newStatus == TicketStatus.available ? null : ticket.buyerName,
      buyerPhone:
          newStatus == TicketStatus.available ? null : ticket.buyerPhone,
    );

    setState(() {
      // UI'ƒ± ger√ßekten g√ºncelle
    });

    // Eƒüer bilet satƒ±ldƒ± durumuna ge√ßiyorsa ve alƒ±cƒ± bilgisi yoksa sor
    if (newStatus == TicketStatus.sold && ticket.buyerName == null) {
      _showBuyerInfoDialog(ticket);
      return;
    }

    if (newStatus != TicketStatus.available) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content:
              Text('‚úÖ Bilet durumu g√ºncellendi: ${_getStatusText(newStatus)}'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  // üîß G√úNCELLENDƒ∞: _updateTicketStatusWithInfo metodu - Supabase entegrasyonu
  void _updateTicketStatusWithInfo(Ticket ticket, TicketStatus newStatus,
      String? name, String? phone) async {
    final buyerName = name?.isNotEmpty == true ? name : null;
    final buyerPhone = phone?.isNotEmpty == true ? phone : null;

    if (newStatus == TicketStatus.cancelled) {
      newStatus = TicketStatus.available;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
              '‚úÖ Bilet iptal edildi ve satƒ±lmak i√ßin listeye geri eklendi'),
          backgroundColor: Colors.orange,
        ),
      );
    }

    // üÜï YENƒ∞: Supabase'e g√ºncelleme g√∂nder
    try {
      final updatedTicket = ticket.copyWith(
        status: newStatus,
        buyerName: newStatus == TicketStatus.available ? null : buyerName,
        buyerPhone: newStatus == TicketStatus.available ? null : buyerPhone,
        soldAt: newStatus == TicketStatus.sold ? DateTime.now() : null,
        paidAt: newStatus == TicketStatus.paid ? DateTime.now() : null,
      );

      // Supabase'e g√ºncelle
      final success = await _supabaseService.updateTicket(updatedTicket);

      if (success) {
        // Local g√ºncelleme
        final ticketIndex = _sampleTickets.indexWhere((t) => t.id == ticket.id);
        if (ticketIndex != -1) {
          _sampleTickets[ticketIndex] = updatedTicket;
        }

        _campaignService.updateTicket(updatedTicket);
        _ticketService.updateTicketStatus(
          ticketId: ticket.id,
          status: newStatus,
          buyerName: buyerName,
          buyerPhone: buyerPhone,
        );

        setState(() {});

        String statusMessage =
            '‚úÖ Bilet durumu g√ºncellendi: ${_getStatusText(newStatus)}';
        if (buyerName != null || buyerPhone != null) {
          statusMessage += '\nüë§ M√º≈üteri bilgileri kaydedildi';
        }
        statusMessage += '\nüì° Bayiler anƒ±nda g√∂rebilir!';

        if (newStatus != TicketStatus.available) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text(statusMessage),
              backgroundColor: Colors.green,
              duration: Duration(seconds: 4),
            ),
          );
        }
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚ùå Bilet Supabase\'e g√ºncellenemedi'),
            backgroundColor: Colors.red,
          ),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå Bilet g√ºncelleme hatasƒ±: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _showBuyerInfoDialog(Ticket ticket) {
    final nameController = TextEditingController();
    final phoneController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üë§ Alƒ±cƒ± Bilgileri - ${ticket.numbersFormatted}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: nameController,
              decoration: InputDecoration(
                labelText: 'Ad Soyad',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.phone,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              // Sample biletlerde alƒ±cƒ± bilgilerini g√ºncelle
              final ticketIndex =
                  _sampleTickets.indexWhere((t) => t.id == ticket.id);

              if (ticketIndex != -1) {
                _sampleTickets[ticketIndex] =
                    _sampleTickets[ticketIndex].copyWith(
                  status: TicketStatus.sold,
                  buyerName: nameController.text.isNotEmpty
                      ? nameController.text
                      : null,
                  buyerPhone: phoneController.text.isNotEmpty
                      ? phoneController.text
                      : null,
                );
              }

              // Ticket service √ºzerinden g√ºncelleme yap
              _ticketService.updateTicketStatus(
                ticketId: ticket.id,
                status: TicketStatus.sold,
                buyerName:
                    nameController.text.isNotEmpty ? nameController.text : null,
                buyerPhone: phoneController.text.isNotEmpty
                    ? phoneController.text
                    : null,
              );

              setState(() {
                // UI'ƒ± g√ºncelle
              });
              Navigator.pop(context);

              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('‚úÖ Alƒ±cƒ± bilgileri kaydedildi'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            child: Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  void _finishCampaign(Campaign campaign) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üîö Kampanyayƒ± Bitir'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
                '${campaign.name} kampanyasƒ±nƒ± bitirmek istediƒüinizden emin misiniz?'),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(Icons.info, color: Colors.orange),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Kampanya bittiƒüinde otomatik olarak Milli Piyango sonu√ßlarƒ± √ßekilecek.',
                      style: TextStyle(color: Colors.orange[800]),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);

              // Milli Piyango sonucunu √ßek
              final winningNumber = await _fetchMilliPiyangoResult();

              // √áekili≈ü yap
              final result = await _campaignService.conductDraw(
                  campaign.id, winningNumber);

              if (result['success']) {
                setState(() {});

                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                        '‚úÖ Kampanya tamamlandƒ±! Kazanan numara: ${result['winningNumber']}'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 4),
                  ),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content:
                        Text('‚ùå Kampanya bitirme hatasƒ±: ${result['error']}'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: Text('Evet, Bitir'),
          ),
        ],
      ),
    );
  }

  // Milli Piyango sonucunu √ßek (ger√ßek entegrasyon)
  Future<String> _fetchMilliPiyangoResult() async {
    // Y√ºkleme dialog'u g√∂ster
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            CircularProgressIndicator(),
            SizedBox(height: 16),
            Text(
              'Milli Piyango sitesinden sonu√ß √ßekiliyor...',
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 8),
            Text(
              'Bu i≈ülem birka√ß saniye s√ºrebilir',
              style: TextStyle(fontSize: 12, color: Colors.grey[600]),
            ),
          ],
        ),
      ),
    );

    try {
      // √ñnce yeni metodumuzla b√ºy√ºk ikramiye numarasƒ±nƒ± √ßek
      final buyukIkramiyeNo =
          await MilliPiyangoService.getBuyukIkramiyeNumara();

      if (buyukIkramiyeNo != null && buyukIkramiyeNo.isNotEmpty) {
        // Dialog'u kapat
        Navigator.pop(context);

        // Ba≈üarƒ± mesajƒ± g√∂ster
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
                '‚úÖ Milli Piyango b√ºy√ºk ikramiye numarasƒ± ba≈üarƒ±yla alƒ±ndƒ±: $buyukIkramiyeNo'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 3),
          ),
        );

        return buyukIkramiyeNo;
      }

      // Yeni metod ba≈üarƒ±sƒ±zsa eski sistemle devam et
      final isAPIAvailable = await _milliPiyangoService.checkAPIAvailability();

      if (isAPIAvailable) {
        // Ger√ßek API'den sonu√ß √ßek
        final result = await _milliPiyangoService.fetchAutomaticResult();

        // Dialog'u kapat
        Navigator.pop(context);

        // Ba≈üarƒ± mesajƒ± g√∂ster
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('‚úÖ Milli Piyango sonucu ba≈üarƒ±yla alƒ±ndƒ±!'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );

        return result.winningNumber;
      } else {
        // API mevcut deƒüilse manuel sim√ºlasyon yap
        final result = await _milliPiyangoService.fetchLatestResult();

        // Dialog'u kapat
        Navigator.pop(context);

        // Uyarƒ± mesajƒ± g√∂ster
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(
                '‚ö†Ô∏è Milli Piyango API\'sine ula≈üƒ±lamadƒ±, sim√ºlasyon numarasƒ± kullanƒ±ldƒ±.'),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 3),
          ),
        );

        return result;
      }
    } catch (e) {
      // Dialog'u kapat
      Navigator.pop(context);

      // Hata mesajƒ± g√∂ster
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå Milli Piyango sonucu alƒ±namadƒ±: $e'),
          backgroundColor: Colors.red,
          duration: Duration(seconds: 3),
        ),
      );

      // Hata durumunda rastgele numara d√∂nd√ºr
      final random = Random();
      String result = '';
      for (int i = 0; i < 10; i++) {
        result += random.nextInt(10).toString();
      }
      return result;
    }
  }

  void _showDrawResultDialog(Campaign campaign) {
    final resultController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üé∞ √áekili≈ü Sonucu Gir'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '${campaign.name} kampanyasƒ± i√ßin kazanan numarayƒ± girin:',
              style: TextStyle(fontSize: 16),
            ),
            SizedBox(height: 16),
            TextField(
              controller: resultController,
              decoration: InputDecoration(
                labelText: 'Kazanan Numara',
                hintText: '√ñrnek: 12345',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.confirmation_number),
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 16),
            Container(
              padding: EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.info, color: Colors.blue),
                      SizedBox(width: 8),
                      Text(
                        'Bilgi:',
                        style: TextStyle(
                            fontWeight: FontWeight.bold,
                            color: Colors.blue[800]),
                      ),
                    ],
                  ),
                  SizedBox(height: 8),
                  Text(
                    '‚Ä¢ Kampanya ${campaign.lastDigitCount} haneli numaralar i√ßerir\n'
                    '‚Ä¢ Girilen numara ${campaign.lastDigitCount} haneli olmalƒ±dƒ±r\n'
                    '‚Ä¢ E≈üle≈üen biletler otomatik bulunacak',
                    style: TextStyle(color: Colors.blue[700]),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('ƒ∞ptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final result = resultController.text.trim();
              if (result.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('‚ùå L√ºtfen kazanan numarayƒ± girin')),
                );
                return;
              }

              if (result.length != campaign.lastDigitCount) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                      content: Text(
                          '‚ùå Numara ${campaign.lastDigitCount} haneli olmalƒ±dƒ±r')),
                );
                return;
              }

              Navigator.pop(context);
              _processDrawResult(campaign, result);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: Text('Sonucu Kaydet'),
          ),
        ],
      ),
    );
  }

  void _processDrawResult(Campaign campaign, String winningNumber) async {
    // √áekili≈ü sonucunu i≈üle
    final result =
        await _campaignService.conductDraw(campaign.id, winningNumber);

    if (result['success']) {
      setState(() {});

      final mainWinners = result['mainWinners'] ?? 0;
      final upperWinners = result['upperWinners'] ?? 0;
      final lowerWinners = result['lowerWinners'] ?? 0;
      final totalWinners = mainWinners + upperWinners + lowerWinners;

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('üéâ √áekili≈ü tamamlandƒ±!\n'
              'üèÜ Ana kazanan: $mainWinners bilet\n'
              '‚¨ÜÔ∏è Bir √ºst: $upperWinners bilet\n'
              '‚¨áÔ∏è Bir alt: $lowerWinners bilet\n'
              'üéØ Toplam: $totalWinners Talihli bilet!'),
          backgroundColor: Colors.green,
          duration: Duration(seconds: 5),
        ),
      );

      // Kazanan biletleri otomatik g√∂ster
      _showWinningTickets(campaign);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('‚ùå √áekili≈ü hatasƒ±: ${result['error']}'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _showWinningTickets(Campaign campaign) {
    final campaignTickets = _campaignService.getCampaignTickets(campaign.id);
    final winningTickets =
        campaignTickets.where((ticket) => ticket.isWinner).toList();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('üåü ${campaign.name} - Talihli Biletler'),
        content: Container(
          width: double.maxFinite,
          height: 400,
          child: Column(
            children: [
              Container(
                padding: EdgeInsets.all(16),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [
                      Colors.purple.withOpacity(0.1),
                      Colors.amber.withOpacity(0.1)
                    ],
                  ),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(Icons.emoji_events, color: Colors.amber, size: 32),
                    SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '${campaign.name} Kazananlarƒ±',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.purple[800],
                            ),
                          ),
                          Text(
                            'Kazanan Numara: ${campaign.winningNumber}',
                            style: TextStyle(color: Colors.grey[600]),
                          ),
                          Text(
                            'Toplam ${winningTickets.length} Talihli Bilet',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.green[700],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              SizedBox(height: 16),
              Expanded(
                child: winningTickets.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.search_off,
                                size: 64, color: Colors.grey),
                            SizedBox(height: 16),
                            Text(
                              'Bu kampanyada kazanan bilet bulunamadƒ±',
                              style: TextStyle(
                                  fontSize: 16, color: Colors.grey[600]),
                            ),
                            SizedBox(height: 8),
                            Text(
                              '√áekili≈ü sonucu: ${campaign.winningNumber ?? "Hen√ºz √ßekilmedi"}',
                              style: TextStyle(color: Colors.grey[500]),
                            ),
                          ],
                        ),
                      )
                    : ListView.builder(
                        itemCount: winningTickets.length,
                        itemBuilder: (context, index) {
                          final ticket = winningTickets[index];
                          return _buildWinningTicketCard(ticket, campaign);
                        },
                      ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Kapat'),
          ),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.pop(context);
              _exportWinningTickets(campaign, winningTickets);
            },
            icon: Icon(Icons.download),
            label: Text('Listeyi Dƒ±≈üa Aktar'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWinningTicketCard(Ticket ticket, Campaign campaign) {
    String winTypeText = '';
    Color winColor = Colors.purple;
    String prizeText = '';

    switch (ticket.winnerType) {
      case 'main':
        winTypeText = 'üèÜ Ana ƒ∞kramiye';
        winColor = Colors.amber;
        prizeText = _getCampaignPrizeText(campaign);
        break;
      case 'upper':
        winTypeText = '‚¨ÜÔ∏è Bir √úst';
        winColor = Colors.green;
        prizeText = '${campaign.upperPrize} ${_getCurrencySymbol(campaign)}';
        break;
      case 'lower':
        winTypeText = '‚¨áÔ∏è Bir Alt';
        winColor = Colors.blue;
        prizeText = '${campaign.lowerPrize} ${_getCurrencySymbol(campaign)}';
        break;
      default:
        winTypeText = 'üéØ Kazanan';
        winColor = Colors.purple;
    }

    return Card(
      elevation: 4,
      margin: EdgeInsets.only(bottom: 8),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          gradient: LinearGradient(
            colors: [winColor.withOpacity(0.1), Colors.white],
            begin: Alignment.centerLeft,
            end: Alignment.centerRight,
          ),
        ),
        child: ListTile(
          leading: Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              color: winColor,
              shape: BoxShape.circle,
            ),
            child: Icon(Icons.star, color: Colors.white, size: 24),
          ),
          title: Text(
            'Bilet: ${ticket.numbersFormatted}',
            style: TextStyle(fontWeight: FontWeight.bold),
          ),
          subtitle: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(winTypeText,
                  style:
                      TextStyle(color: winColor, fontWeight: FontWeight.bold)),
              if (ticket.buyerName != null) Text('üë§ ${ticket.buyerName}'),
              if (ticket.buyerPhone != null) Text('üìû ${ticket.buyerPhone}'),
            ],
          ),
          trailing: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'ƒ∞kramiye',
                style: TextStyle(fontSize: 12, color: Colors.grey[600]),
              ),
              Text(
                prizeText,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: winColor,
                  fontSize: 14,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _getCurrencySymbol(Campaign campaign) {
    switch (campaign.prizeCurrency) {
      case PrizeCurrency.tl:
        return '‚Ç∫';
      case PrizeCurrency.dolar:
        return '\$';
      case PrizeCurrency.euro:
        return '‚Ç¨';
      case PrizeCurrency.altin:
        return 'ü•á';
      case PrizeCurrency.other:
        return campaign.customCurrency ?? '';
      default:
        return '‚Ç∫';
    }
  }

  void _exportWinningTickets(Campaign campaign, List<Ticket> winningTickets) {
    final exportText = StringBuffer();
    exportText.writeln('${campaign.name} - Talihli Biletler');
    exportText.writeln('Kazanan Numara: ${campaign.winningNumber}');
    exportText.writeln(
        '√áekili≈ü Tarihi: ${campaign.drawDate.day}/${campaign.drawDate.month}/${campaign.drawDate.year}');
    exportText.writeln('');

    for (int i = 0; i < winningTickets.length; i++) {
      final ticket = winningTickets[i];
      exportText.writeln(
          '${i + 1}. ${ticket.numbersFormatted} - ${ticket.winnerType} - ${ticket.buyerName ?? "ƒ∞simsiz"}');
    }

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(
            'üìã ${winningTickets.length} Talihli bilet listesi hazƒ±rlandƒ±!'),
        backgroundColor: Colors.green,
        action: SnackBarAction(
          label: 'Kopyala',
          onPressed: () {
            // Clipboard'a kopyalama i≈ülemi burada yapƒ±lƒ±r
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('‚úÖ Liste panoya kopyalandƒ±!')),
            );
          },
        ),
      ),
    );
  }

  // Supabase'den t√ºm biletleri √ßek ve admin ekranƒ±nda g√∂ster
  Future<void> _fetchAllTicketsFromSupabase() async {
    final tickets = await _supabaseService.getAllTickets();
    setState(() {
      _sampleTickets = tickets;
      _ticketsGenerated = true;
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('‚úÖ ${tickets.length} bilet Supabase\'den √ßekildi!'),
        backgroundColor: Colors.green,
      ),
    );
  }

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  // Profil fotoƒürafƒ± se√ß ve y√ºkle
  Future<void> _pickAndUploadProfileImage() async {
    final picker = ImagePicker();
    final file = await picker.pickImage(source: ImageSource.gallery);
    if (file == null) return;
    final fileName =
        '${_authService.currentUser!.id}_${DateTime.now().millisecondsSinceEpoch}.png';
    // Supabase storage'a y√ºkle (avatars bucket'ƒ± public olmalƒ±)
    final res = await _supabaseService.uploadFileToBucket(
      bucket: 'avatars',
      filePath: file.path,
      fileName: fileName,
    );
    if (res == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Y√ºkleme hatasƒ±!')),
      );
      return;
    }
    // Kullanƒ±cƒ± profilini g√ºncelle
    await _authService.updateProfile(
      name: _authService.currentUser?.name ?? 'Admin',
      profileImage: res,
    );
    setState(() {});
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Profil fotoƒürafƒ± g√ºncellendi!')),
    );
  }
}
