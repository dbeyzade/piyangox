import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:math';
import '../models/user.dart';
import '../models/person.dart';
import '../models/campaign.dart';
import '../models/ticket.dart';
import '../services/auth_service.dart';
import '../services/person_service.dart';
import '../services/campaign_service.dart';
import '../services/ticket_service.dart';
import '../services/financial_service.dart';
import '../services/complaint_service.dart';
import '../services/milli_piyango_service.dart';
import 'login_screen.dart';
import 'package:percent_indicator/circular_percent_indicator.dart';
import 'dart:async';
import 'package:supabase_flutter/supabase_flutter.dart';
import '../services/local_storage_service.dart';
import '../widgets/dove_background.dart';

class AdminDashboard extends StatefulWidget {
  const AdminDashboard({super.key});

  @override
  _AdminDashboardState createState() => _AdminDashboardState();
}

class _AdminDashboardState extends State<AdminDashboard> with WidgetsBindingObserver {
  final AuthService _authService = AuthService();
  final PersonService _personService = PersonService();
  final CampaignService _campaignService = CampaignService();
  final TicketService _ticketService = TicketService();
  final FinancialService _financialService = FinancialService();
  final ComplaintService _complaintService = ComplaintService();
  final MilliPiyangoService _milliPiyangoService = MilliPiyangoService();
  final SupabaseClient _supabase = Supabase.instance.client;
  final LocalStorageService _localStorage = LocalStorageService();
  
  final TextEditingController _searchController = TextEditingController();
  
  String _selectedMenuItem = 'genel_bilgi';
  List<Ticket> _searchResults = [];
  
  // Admin tarafından belirlenen bilet fiyatı
  double _currentTicketPrice = 10.0;
  
  // Admin tarafından belirlenen bilet sayısı
  int _currentTicketCount = 100;
  
  // Admin tarafından belirlenen şans sayısı
  int _currentChanceCount = 2;
  
  // Admin tarafından belirlenen son hane sayısı
  int _currentLastDigitCount = 3;
  
  // Sample biletler listesi
  List<Ticket> _sampleTickets = [];
  
  // Biletler oluşturuldu mu kontrol
  bool _ticketsGenerated = false;

  // Ana ikramiye miktarı ve cinsi (string olarak)
  String _prizeAmount = '';
  
  // Bilet fiyatı ve sayısı
  double _ticketPrice = 750.0;
  int _ticketCount = 12;

  // Şikayet toplu seçim ve silme için
  bool _isSelectionMode = false;
  Set<String> _selectedComplaintIds = {};

  DateTime? _selectedDrawDate;

  // Çekiliş tarihi animasyonu ve geri sayım için gerekli değişkenler
  late final ValueNotifier<DateTime?> _drawDateNotifier = ValueNotifier(_selectedDrawDate);
  late final ValueNotifier<Duration> _countdownNotifier = ValueNotifier(Duration.zero);
  Timer? _countdownTimer;
  double _dateOpacity = 1.0;

  // Kampanya adı için yeni bir değişken ekle (en üste, _currentTicketPrice gibi):
  String _currentCampaignName = '';

  // Burç seçimi için değişken
  String? _selectedZodiac;
  final List<String> _zodiacSigns = [
    'Koç', 'Boğa', 'İkizler', 'Yengeç', 'Aslan', 'Başak',
    'Terazi', 'Akrep', 'Yay', 'Oğlak', 'Kova', 'Balık'
  ];

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addObserver(this);
    _loadSampleData();
    _loadLocalData(); // Yerel verileri yükle
    _startCountdown();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    switch (state) {
      case AppLifecycleState.paused:
      case AppLifecycleState.detached:
        // Uygulama kapanıyor/minimize oluyor - otomatik kaydet
        _autoSave();
        print('📱 Uygulama durumu değişti - veriler kaydedildi');
        break;
      case AppLifecycleState.resumed:
        // Uygulama geri açıldı - verileri yükle
        _loadLocalData();
        print('📱 Uygulama geri açıldı - veriler yüklendi');
        break;
      default:
        break;
    }
  }

  void _startCountdown() {
    _countdownTimer?.cancel();
    if (_selectedDrawDate != null) {
      _countdownNotifier.value = _selectedDrawDate!.difference(DateTime.now());
      _countdownTimer = Timer.periodic(const Duration(seconds: 1), (timer) {
        if (_selectedDrawDate != null) {
          final diff = _selectedDrawDate!.difference(DateTime.now());
          _countdownNotifier.value = diff;
          if (diff.isNegative) timer.cancel();
        }
      });
    }
  }

  void _loadSampleData() async {
    await _complaintService.addSampleComplaints();
  }

  // Yerel verileri yükle
  void _loadLocalData() async {
    final drawDate = await _localStorage.getDrawDate();
    final campaignName = await _localStorage.getCampaignName();
    final prizeAmount = await _localStorage.getPrizeAmount();
    final ticketPrice = await _localStorage.getTicketPrice();
    final ticketCount = await _localStorage.getTicketCount();
    final tickets = await _localStorage.getTickets();
    
    setState(() {
      // Tüm ayarları yükle
      _selectedDrawDate = drawDate;
      _currentCampaignName = campaignName ?? '';
      _prizeAmount = prizeAmount ?? '';
      _currentTicketPrice = double.tryParse(ticketPrice ?? '750') ?? 750.0;
      _currentTicketCount = ticketCount;
      _currentLastDigitCount = 3; // Varsayılan değer
      _currentChanceCount = 6; // Varsayılan değer
      _ticketsGenerated = tickets.isNotEmpty;
      
      // Biletleri yükle
      _sampleTickets = tickets;
    });
    
    // Çekiliş tarihi varsa countdown'u başlat
    if (_selectedDrawDate != null) {
      _drawDateNotifier.value = _selectedDrawDate!;
      _startCountdown();
    }
    
    print('🔄 Yerel veriler yüklendi:');
    print('  📅 Çekiliş tarihi: $_selectedDrawDate');
    print('  📋 Kampanya: $_currentCampaignName');
    print('  💰 İkramiye: $_prizeAmount');
    print('  🎫 Bilet sayısı: ${_sampleTickets.length}');
  }

  // Kaydedilmiş verileri Supabase'den yükle
  void _loadSavedData() async {
    try {
      // Son kampanya ayarlarını yükle
      final response = await _supabase
          .from('admin_settings')
          .select()
          .order('created_at', ascending: false)
          .limit(1);
      
      if (response.isNotEmpty) {
        final settings = response.first;
        setState(() {
          _selectedDrawDate = settings['draw_date'] != null 
              ? DateTime.parse(settings['draw_date']) 
              : null;
          _currentCampaignName = settings['campaign_name'] ?? '';
          _prizeAmount = settings['prize_amount']?.toString() ?? '';
          _ticketPrice = settings['ticket_price']?.toDouble() ?? 750.0;
          _ticketCount = settings['ticket_count'] ?? 12;
        });
        print('✅ Kaydedilmiş ayarlar yüklendi');
      }

      // Son biletleri yükle
      final ticketsResponse = await _supabase
          .from('tickets')
          .select()
          .order('created_at', ascending: false);
      
      if (ticketsResponse.isNotEmpty) {
        setState(() {
          _sampleTickets = ticketsResponse.map((ticket) => Ticket(
            id: ticket['id'],
            numbers: List<String>.from(ticket['numbers']),
            price: ticket['price']?.toDouble() ?? 750.0,
            status: TicketStatus.values.firstWhere(
              (e) => e.toString() == ticket['status'],
              orElse: () => TicketStatus.available,
            ),
            buyerName: ticket['buyer_name'],
            buyerPhone: ticket['buyer_phone'],
            drawDate: ticket['draw_date'] != null 
                ? DateTime.parse(ticket['draw_date']) 
                : null,
            campaignId: ticket['campaign_id'] ?? '',
            createdAt: ticket['created_at'] != null 
                ? DateTime.parse(ticket['created_at']) 
                : DateTime.now(),
          )).toList();
        });
        print('✅ ${ticketsResponse.length} bilet yüklendi');
      }
    } catch (e) {
      print('❌ Veri yükleme hatası: $e');
    }
  }

  // Ayarları Supabase'e kaydet
  void _saveSettings() async {
    try {
      await _supabase.from('admin_settings').insert({
        'draw_date': _selectedDrawDate?.toIso8601String(),
        'campaign_name': _currentCampaignName,
        'prize_amount': _prizeAmount,
        'ticket_price': _ticketPrice,
        'ticket_count': _ticketCount,
        'created_at': DateTime.now().toIso8601String(),
      });
      print('✅ Ayarlar Supabase\'e kaydedildi');
    } catch (e) {
      print('❌ Ayar kaydetme hatası: $e');
    }
  }

  // Otomatik kaydetme - her değişiklikte çağrılır
  void _autoSave() async {
    // Yerel kaydetme (anında)
    await _localStorage.saveDrawDate(_selectedDrawDate);
    await _localStorage.saveCampaignName(_currentCampaignName);
    await _localStorage.savePrizeAmount(_prizeAmount);
    await _localStorage.saveTicketPrice(_currentTicketPrice.toString());
    await _localStorage.saveTicketCount(_currentTicketCount);
    
    if (_sampleTickets.isNotEmpty) {
      await _localStorage.saveTickets(_sampleTickets);
    }
    
    // Supabase kaydetme (arka planda)
    _saveSettings();
    if (_sampleTickets.isNotEmpty) {
      _saveTickets();
    }
    
    print('💾 Otomatik kaydetme tamamlandı - veriler artık kalıcı!');
  }

  // Seçili şikayetleri sil
  void _deleteSelectedComplaints() {
    if (_selectedComplaintIds.isEmpty) return;
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.warning, color: Colors.red),
            SizedBox(width: 8),
            Text('⚠️ Şikayetleri Sil'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('${_selectedComplaintIds.length} şikayeti silmek istediğinizden emin misiniz?'),
            const SizedBox(height: 12),
            const Text('Bu işlem geri alınamaz!', 
              style: TextStyle(fontWeight: FontWeight.bold, color: Colors.red)),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _performBulkDelete();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('Sil'),
          ),
        ],
      ),
    );
  }

  // Toplu silme işlemini gerçekleştir
  void _performBulkDelete() {
    final deletedCount = _selectedComplaintIds.length;
    
    // Şikayetleri sil
    for (final complaintId in _selectedComplaintIds) {
      _complaintService.deleteComplaint(complaintId);
    }
    
    setState(() {
      _selectedComplaintIds.clear();
      _isSelectionMode = false;
    });
    
    _autoSave(); // Otomatik kaydet
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.check_circle, color: Colors.white),
            const SizedBox(width: 8),
            Expanded(
              child: Text('✅ $deletedCount şikayet başarıyla silindi!'),
            ),
          ],
        ),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
      ),
    );
  }



  // Biletleri Supabase'e kaydet
  void _saveTickets() async {
    try {
      // Önce eski biletleri temizle
      await _supabase.from('tickets').delete().neq('id', '');
      
      // Yeni biletleri kaydet
      for (final ticket in _sampleTickets) {
        await _supabase.from('tickets').insert({
          'id': ticket.id,
          'numbers': ticket.numbers,
          'price': ticket.price,
          'status': ticket.status.toString(),
          'buyer_name': ticket.buyerName,
          'buyer_phone': ticket.buyerPhone,
          'draw_date': ticket.drawDate?.toIso8601String(),
          'created_at': DateTime.now().toIso8601String(),
        });
      }
      print('✅ ${_sampleTickets.length} bilet Supabase\'e kaydedildi');
    } catch (e) {
      print('❌ Bilet kaydetme hatası: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[100],
      body: DoveBackground(
        child: Row(
          children: [
            Container(
              width: 280,
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                  colors: [
                    Color(0xCC7F7FD5), // Soft mor-mavi (transparan)
                    Color(0xCC86A8E7), // Açık mavi (transparan)
                    Color(0xCC91EAE4), // Turkuaz (transparan)
                  ],
                  stops: [0.0, 0.5, 1.0],
                ),
              ),
              child: _buildSideMenu(),
            ),
            Expanded(
              child: Column(
                children: [
                  _buildTopBar(),
                  Expanded(child: _buildMainContent()),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildSideMenu() {
    final menuItems = [
      {'id': 'genel_bilgi', 'title': 'Genel Bilgi', 'icon': Icons.dashboard, 'color': Colors.blue},
      {'id': 'bilgilerim', 'title': 'Bilgilerim', 'icon': Icons.person, 'color': Colors.indigo},
      {'id': 'kisi_listesi', 'title': 'Kişi Listesi', 'icon': Icons.people, 'color': Colors.green},
      {'id': 'son_hane_sayisi', 'title': 'Son Hane Sayısı', 'icon': Icons.filter_9_plus, 'color': Colors.orange},
      {'id': 'sans_adeti', 'title': 'Şans Adeti', 'icon': Icons.casino, 'color': Colors.purple},
      {'id': 'bilet_adeti', 'title': 'Bilet Adeti', 'icon': Icons.confirmation_number, 'color': Colors.teal},
      {'id': 'kampanya_ismi', 'title': 'Kampanya İsmi', 'icon': Icons.campaign, 'color': Colors.red},

      {'id': 'ikramiye_tutari', 'title': 'İkramiye Tutarı', 'icon': Icons.attach_money, 'color': Colors.green},
      {'id': 'bir_alt_ust', 'title': 'Bir Alt-Bir Üst', 'icon': Icons.tune, 'color': Colors.cyan},
      {'id': 'bilet_fiyati', 'title': 'Bilet Fiyatı', 'icon': Icons.local_offer, 'color': Colors.deepOrange},
      {'id': 'cekilis_tarihi', 'title': 'Çekiliş Tarihi', 'icon': Icons.event, 'color': Colors.blueAccent},
      {'id': 'liste', 'title': 'Liste', 'icon': Icons.list, 'color': Colors.indigo},
      {'id': 'giderler', 'title': 'Giderler', 'icon': Icons.money_off, 'color': Colors.red},
      {'id': 'borclu_olanlar', 'title': 'Borçlu Olanlar', 'icon': Icons.account_balance_wallet, 'color': Colors.deepPurple},
      {'id': 'liste_yayinla', 'title': 'Liste Yayınla', 'icon': Icons.publish, 'color': Colors.brown},

      {'id': 'kampanya_yonetimi', 'title': 'Kampanya Yönetimi', 'icon': Icons.manage_accounts, 'color': Colors.deepPurple},
      {'id': 'ortak_sayisi', 'title': 'Ortak Sayısı', 'icon': Icons.group, 'color': Colors.lime},
      {'id': 'dilek_sikayet', 'title': 'Dilek Şikayet', 'icon': Icons.feedback, 'color': Colors.deepOrange},
    ];

    return Column(
      children: [
        // Profil alanı
        Container(
          padding: const EdgeInsets.all(20),
          child: Column(
            children: [
              Stack(
                children: [
                  CircleAvatar(
                    radius: 30,
                    backgroundColor: Colors.white,
                    child: _authService.currentUser?.profileImage != null
                        ? const ClipOval(
                            child: Icon(
                              Icons.person,
                              size: 30,
                              color: Colors.green, // Profil resmi var göstergesi
                            ),
                          )
                        : const Icon(
                            Icons.admin_panel_settings,
                            size: 30,
                            color: Color(0xFF1A237E),
                          ),
                  ),
                  Positioned(
                    bottom: 0,
                    right: 0,
                    child: Container(
                      padding: const EdgeInsets.all(4),
                      decoration: const BoxDecoration(
                        color: Colors.green,
                        shape: BoxShape.circle,
                      ),
                      child: const Icon(
                        Icons.check,
                        size: 12,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 10),
              Text(
                _authService.currentUser?.name ?? 'Admin',
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const Text(
                'Yönetici',
                style: TextStyle(
                  color: Colors.white70,
                  fontSize: 12,
                ),
              ),
            ],
          ),
        ),
        
        const Divider(color: Colors.white30),
        
        // Menü öğeleri
        Expanded(
          child: ListView.builder(
            itemCount: menuItems.length,
            itemBuilder: (context, index) {
              final item = menuItems[index];
              final isSelected = _selectedMenuItem == item['id'];
              
              return Container(
                margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                decoration: BoxDecoration(
                  color: isSelected ? Colors.white : Colors.transparent,
                  borderRadius: BorderRadius.circular(12),
                  boxShadow: isSelected
                      ? [
                          BoxShadow(
                            color: (item['color'] as Color).withOpacity(0.3),
                            blurRadius: 8,
                            offset: const Offset(0, 2),
                          ),
                        ]
                      : [],
                  border: isSelected
                      ? Border.all(color: item['color'] as Color, width: 2)
                      : null,
                ),
                child: ListTile(
                  leading: CircleAvatar(
                    backgroundColor: item['color'] as Color,
                    child: Icon(
                      item['icon'] as IconData,
                      color: Colors.white,
                    ),
                  ),
                  title: Text(
                    item['title'] as String,
                    style: TextStyle(
                      color: isSelected ? (item['color'] as Color) : Colors.white,
                      fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                    ),
                  ),
                  onTap: () {
                    setState(() {
                      _selectedMenuItem = item['id'] as String;
                    });
                  },
                ),
              );
            },
          ),
        ),
        
        // Çıkış butonu
        Container(
          padding: const EdgeInsets.all(16),
          child: SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _logout,
              icon: const Icon(Icons.logout),
              label: const Text('Çıkış Yap'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildTopBar() {
    return Container(
      height: 80,
      padding: const EdgeInsets.symmetric(horizontal: 24),
      decoration: BoxDecoration(
        color: Colors.white,
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Row(
        children: [
          Text(
            _getPageTitle(),
            style: TextStyle(
              fontSize: 24,
              fontWeight: FontWeight.bold,
              color: Colors.grey[800],
            ),
          ),
          
          const Spacer(),
          
          // Arama kutusu (sadece genel bilgi değilse göster)
          if (_selectedMenuItem != 'bilgilerim')
            SizedBox(
              width: 300,
              child: TextField(
                controller: _searchController,
                decoration: InputDecoration(
                  hintText: 'İsim, telefon veya bilet numarası ara...',
                  prefixIcon: const Icon(Icons.search),
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(25),
                    borderSide: BorderSide.none,
                  ),
                  filled: true,
                  fillColor: Colors.grey[100],
                  contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                ),
                onChanged: _searchTickets,
              ),
            ),
          
          const SizedBox(width: 16),
          
          // Bildirimler
          Stack(
            children: [
              IconButton(
                icon: const Icon(Icons.notifications, size: 28),
                onPressed: _showNotifications,
              ),
              if (_ticketService.pendingNotifications.isNotEmpty)
                Positioned(
                  right: 8,
                  top: 8,
                  child: Container(
                    padding: const EdgeInsets.all(2),
                    decoration: BoxDecoration(
                      color: Colors.red,
                      borderRadius: BorderRadius.circular(10),
                    ),
                    constraints: const BoxConstraints(
                      minWidth: 16,
                      minHeight: 16,
                    ),
                    child: Text(
                      '${_ticketService.pendingNotifications.length}',
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildMainContent() {
    if (_searchController.text.isNotEmpty && _searchResults.isNotEmpty) {
      return _buildSearchResults();
    }

    switch (_selectedMenuItem) {
      case 'genel_bilgi':
        return _buildGenelBilgi();
      case 'sanslı_hissediyorum':
        return _buildLuckySection();
      case 'bilgilerim':
        return _buildBilgilerim();
      case 'kisi_listesi':
        return _buildKisiListesi();
      case 'son_hane_sayisi':
        return _buildSonHaneSayisi();
      case 'sans_adeti':
        return _buildSansAdeti();
      case 'bilet_adeti':
        return _buildBiletAdeti();
      case 'liste':
        return _buildListe(_campaignService.campaigns.isNotEmpty ? _campaignService.campaigns.first : null);
      case 'kampanya_ismi':
        return _buildKampanyaIsmi();

      case 'ikramiye_tutari':
        return _buildIkramiyeTutari();
      case 'bir_alt_ust':
        return _buildBirAltUst();
      case 'bilet_fiyati':
        return _buildBiletFiyati();
      case 'giderler':
        return _buildGiderler();
      case 'borclu_olanlar':
        return _buildBorcluOlanlar();
      case 'liste_yayinla':
        return _buildListeYayinla();

      case 'kampanya_yonetimi':
        return _buildKampanyaYonetimi();
      case 'ortak_sayisi':
        return _buildOrtakSayisi();
      case 'dilek_sikayet':
        return _buildDilekSikayet();
      case 'cekilis_tarihi':
        return _buildCekilisTarihi();
      default:
        return _buildPlaceholderPage();
    }
  }

  String _getPageTitle() {
    switch (_selectedMenuItem) {
      case 'genel_bilgi': return '📊 Genel Bilgi';
      case 'bilgilerim': return '👤 Bilgilerim';
      case 'kisi_listesi': return '👥 Kişi Listesi';
      case 'son_hane_sayisi': return '🔢 Son Hane Sayısı Belirle';
      case 'sans_adeti': return '🎲 Şans Adeti Gir';
      case 'bilet_adeti': return '🎫 Bilet Adeti Gir';
      case 'liste': return '📋 Liste';
      case 'kampanya_ismi': return '🏷️ Kampanya İsmi Gir';

      case 'ikramiye_tutari': return '💰 İkramiye Tutarı Gir';
      case 'bir_alt_ust': return '⚖️ Bir Alt-Bir Üst Tanımla';
      case 'bilet_fiyati': return '💵 Bilet Fiyatı';
      case 'giderler': return '📉 Giderler';
      case 'borclu_olanlar': return '💳 Borçlu Olanlar';
      case 'liste_yayinla': return '📢 Liste Yayınla';

      case 'kampanya_yonetimi': return '🎯 Kampanya Yönetimi';
      case 'ortak_sayisi': return '👥 Ortak Sayısı';
      case 'dilek_sikayet': return '📝 Dilek Şikayet Kutusu';
      case 'cekilis_tarihi': return '📅 Çekiliş Tarihi Seç';
      default: return '📊 Admin Paneli';
    }
  }

  // Bilgilerim sayfası
  Widget _buildBilgilerim() {
    final user = _authService.currentUser!;
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: SingleChildScrollView(
        child: Column(
          children: [
            // Profil kartı
            Card(
              child: Padding(
                padding: const EdgeInsets.all(24),
                child: Column(
                  children: [
                    // Profil resmi
                    Stack(
                      children: [
                        CircleAvatar(
                          radius: 60,
                          backgroundColor: Colors.grey[200],
                          child: user.profileImage != null
                              ? Stack(
                                  children: [
                                    const Icon(
                                      Icons.person,
                                      size: 60,
                                      color: Colors.green,
                                    ),
                                    Positioned(
                                      bottom: 0,
                                      right: 0,
                                      child: Container(
                                        padding: const EdgeInsets.all(4),
                                        decoration: const BoxDecoration(
                                          color: Colors.green,
                                          shape: BoxShape.circle,
                                        ),
                                        child: const Icon(
                                          Icons.check,
                                          size: 12,
                                          color: Colors.white,
                                        ),
                                      ),
                                    ),
                                  ],
                                )
                              : Icon(
                                  Icons.person,
                                  size: 60,
                                  color: Colors.grey[400],
                                ),
                        ),
                        Positioned(
                          bottom: 0,
                          right: 0,
                          child: Container(
                            decoration: const BoxDecoration(
                              color: Colors.blue,
                              shape: BoxShape.circle,
                            ),
                            child: IconButton(
                              icon: const Icon(Icons.camera_alt, color: Colors.white),
                              onPressed: _showProfileImageOptions,
                            ),
                          ),
                        ),
                      ],
                    ),
                    
                    const SizedBox(height: 24),
                    
                    // Kullanıcı bilgileri
                    _buildInfoRow('👤 Ad Soyad', user.name),
                    _buildInfoRow('🆔 Kullanıcı Adı', user.username),
                    _buildInfoRow('📧 E-posta', user.email ?? 'Belirtilmemiş'),
                    _buildInfoRow('📞 Telefon', user.phone ?? 'Belirtilmemiş'),
                    _buildInfoRow('👑 Rol', user.role == UserRole.admin ? 'Yönetici' : 'Üye'),
                    _buildInfoRow('📅 Kayıt Tarihi', '${user.createdAt.day}/${user.createdAt.month}/${user.createdAt.year}'),
                    
                    const SizedBox(height: 32),
                    
                    // Aksiyonlar
                    Row(
                      children: [
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _showEditProfileDialog,
                            icon: const Icon(Icons.edit),
                            label: const Text('Bilgileri Düzenle'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.blue,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(vertical: 12),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: _showChangePasswordDialog,
                            icon: const Icon(Icons.lock),
                            label: const Text('Şifre Değiştir'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(vertical: 12),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 150,
            child: Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.grey[600],
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(fontSize: 16),
            ),
          ),
        ],
      ),
    );
  }

  // Diğer sayfa metodları (basitleştirilmiş)
  Widget _buildGenelBilgi() {
    final summary = _financialService.calculateSummary();
    final complaintStats = _complaintService.getStats();
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Expanded(child: _buildStatCard('Satılan Bilet', '${summary.soldTickets}', Icons.confirmation_number, Colors.green)),
                const SizedBox(width: 16),
                Expanded(child: _buildStatCard('Satılmayan Bilet', '${summary.availableTickets}', Icons.pending, Colors.orange)),
                const SizedBox(width: 16),
                Expanded(child: _buildStatCard('Havuz Birikimi', '${summary.poolAmount.toStringAsFixed(0)} ₺', Icons.savings, Colors.blue)),
                const SizedBox(width: 16),
                Expanded(child: _buildStatCard('${summary.balanceEmoji} ${summary.isProfit ? 'Kar' : 'Zarar'}', 
                    '${summary.balance.abs().toStringAsFixed(0)} ₺', Icons.account_balance, summary.isProfit ? Colors.green : Colors.red)),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatCard(String title, String value, IconData icon, Color color) {
    return Card(
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          gradient: LinearGradient(
            colors: [color.withOpacity(0.1), color.withOpacity(0.05)],
          ),
        ),
        child: Column(
          children: [
            Icon(icon, size: 32, color: color),
            const SizedBox(height: 8),
            Text(value, style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold, color: color)),
            Text(title, style: TextStyle(color: Colors.grey[600])),
          ],
        ),
      ),
    );
  }

  Widget _buildKisiListesi() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: _addPersonDialog,
                icon: const Icon(Icons.person_add),
                label: const Text('Kişi Ekle'),
              ),
              const SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: _importFromContacts,
                icon: const Icon(Icons.contacts),
                label: const Text('Telefon Rehberinden Ekle'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              ),
            ],
          ),
          const SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: _personService.allPersons.length,
              itemBuilder: (context, index) {
                final person = _personService.allPersons[index];
                return Card(
                  child: ListTile(
                    leading: CircleAvatar(
                      child: Text(person.firstName[0].toUpperCase()),
                    ),
                    title: Text(person.fullName),
                    subtitle: Text('📞 ${person.phone}'),
                    trailing: PopupMenuButton(
                      itemBuilder: (context) => [
                        const PopupMenuItem(value: 'edit', child: Text('Düzenle')),
                        const PopupMenuItem(value: 'delete', child: Text('Sil')),
                      ],
                      onSelected: (value) => _handlePersonAction(person, value.toString()),
                    ),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSonHaneSayisi() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '🔢 Son Hane Sayısı Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            'Bilet numaralarının kaç haneli olacağını seçin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          const SizedBox(height: 32),
          
          Expanded(
            child: GridView.count(
              crossAxisCount: 2,
              childAspectRatio: 2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildHaneCard('2 Haneli', '2 haneli numara (10-99)', 2, Icons.looks_two),
                _buildHaneCard('3 Haneli', '3 haneli numara (100-999)', 3, Icons.looks_3),
                _buildHaneCard('4 Haneli', '4 haneli numara (1000-9999)', 4, Icons.looks_4),
                _buildHaneCard('5 Haneli', '5 haneli numara (10000-99999)', 5, Icons.looks_5),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildHaneCard(String title, String description, int haneCount, IconData icon) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _selectHaneCount(haneCount),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: const Color(0xFF6A1B9A)),
              const SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[800],
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _selectHaneCount(int haneCount) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🔢 Hane Sayısı Seçimi'),
        content: Text('$haneCount haneli numara sistemini seçmek istediğinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _saveHaneCount(haneCount);
            },
            child: const Text('Seç'),
          ),
        ],
      ),
    );
  }

  void _saveHaneCount(int haneCount) {
    // Hane sayısını kaydet
    setState(() {
      _currentLastDigitCount = haneCount;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ $haneCount haneli numara sistemi seçildi'),
        backgroundColor: Colors.green,
      ),
    );
    
    // Başarı efekti
    _showSuccessAnimation();
  }

  void _showSuccessAnimation() {
    // Basit bir flash efekti - overlay ile
    showDialog(
      context: context,
      barrierDismissible: false,
      barrierColor: Colors.transparent,
      builder: (context) => Container(
        decoration: BoxDecoration(
          gradient: RadialGradient(
            colors: [
              Colors.green.withOpacity(0.3),
              Colors.transparent,
            ],
          ),
        ),
        child: Center(
          child: Container(
            padding: const EdgeInsets.all(20),
            decoration: const BoxDecoration(
              color: Colors.green,
              shape: BoxShape.circle,
            ),
            child: const Icon(
              Icons.check,
              color: Colors.white,
              size: 60,
            ),
          ),
        ),
      ),
    );
    
    // 1 saniye sonra kapat
    Future.delayed(const Duration(milliseconds: 800), () {
      if (Navigator.canPop(context)) {
        Navigator.pop(context);
      }
    });
  }

  Widget _buildSansAdeti() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '🎲 Şans Adeti Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            'Her bilet için kaç şans verilecek seçin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          const SizedBox(height: 32),
          
          Expanded(
            child: GridView.count(
              crossAxisCount: 3,
              childAspectRatio: 1.2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildSansCard('1 Şans', 'Tek numara\nKlasik sistem', 1, Icons.looks_one, Colors.red),
                _buildSansCard('2 Şans', 'İki numara\nÇift şans', 2, Icons.looks_two, Colors.orange),
                _buildSansCard('3 Şans', 'Üç numara\nÜçlü şans', 3, Icons.looks_3, Colors.amber),
                _buildSansCard('4 Şans', 'Dört numara\nDörtlü şans', 4, Icons.looks_4, Colors.green),
                _buildSansCard('5 Şans', 'Beş numara\nBeşli şans', 5, Icons.looks_5, Colors.blue),
                _buildSansCard('6 Şans', 'Altı numara\nMaximum şans', 6, Icons.looks_6, Colors.purple),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildSansCard(String title, String description, int sansCount, IconData icon, Color color) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _selectSansCount(sansCount),
        borderRadius: BorderRadius.circular(8),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                color.withOpacity(0.1),
                color.withOpacity(0.05),
              ],
            ),
          ),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(icon, size: 48, color: color),
                const SizedBox(height: 8),
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.grey[800],
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 11,
                    color: Colors.grey[600],
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _selectSansCount(int sansCount) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.casino, color: Color(0xFF6A1B9A)),
            SizedBox(width: 8),
            Text('🎲 Şans Adeti Seçimi'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('$sansCount şans sistemini seçmek istediğinizden emin misiniz?'),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  const Icon(Icons.info, color: Colors.blue, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Her bilet için $sansCount adet numara üretilecek',
                      style: TextStyle(fontSize: 12, color: Colors.blue[800]),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _saveSansCount(sansCount);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
            child: const Text('Seç'),
          ),
        ],
      ),
    );
  }

  void _saveSansCount(int sansCount) {
    // Şans sayısını kaydet
    setState(() {
      _currentChanceCount = sansCount;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.casino, color: Colors.white),
            const SizedBox(width: 8),
            Text('✅ $sansCount şans sistemi seçildi'),
          ],
        ),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 3),
      ),
    );
    
    // Başarı efekti
    _showSuccessAnimation();
  }

  Widget _buildBiletAdeti() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '🎫 Bilet Adeti Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            'Kampanya için kaç bilet basılacağını belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          const SizedBox(height: 32),
          
          Expanded(
            child: GridView.count(
              crossAxisCount: 2,
              childAspectRatio: 1.5,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildBiletAdetiCard('100 Bilet', 'Küçük kampanya', 100, Icons.confirmation_number),
                _buildBiletAdetiCard('500 Bilet', 'Orta ölçekli', 500, Icons.local_activity),
                _buildBiletAdetiCard('1000 Bilet', 'Büyük kampanya', 1000, Icons.theaters),
                _buildBiletAdetiCard('Özel Sayı', 'Manuel giriş', 0, Icons.edit),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildBiletAdetiCard(String title, String description, int count, IconData icon) {
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => count == 0 ? _showManualBiletCountDialog() : _selectBiletCount(count),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, size: 48, color: const Color(0xFF6A1B9A)),
              const SizedBox(height: 8),
              Text(
                title,
                style: TextStyle(
                  fontSize: 18,
                  fontWeight: FontWeight.bold,
                  color: Colors.grey[800],
                ),
              ),
              const SizedBox(height: 4),
              Text(
                description,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _selectBiletCount(int count) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🎫 Bilet Adeti Seçimi'),
        content: Text('$count adet bilet basmak istediğinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _saveBiletCount(count);
            },
            child: const Text('Onayla'),
          ),
        ],
      ),
    );
  }

  void _showManualBiletCountDialog() {
    final controller = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('✏️ Özel Bilet Sayısı'),
        content: TextField(
          controller: controller,
          decoration: const InputDecoration(
            labelText: 'Bilet Sayısı',
            hintText: 'Örnek: 250',
            border: OutlineInputBorder(),
          ),
          keyboardType: TextInputType.number,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final count = int.tryParse(controller.text);
              if (count != null && count > 0) {
                Navigator.pop(context);
                _saveBiletCount(count);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Geçerli bir sayı girin')),
                );
              }
            },
            child: const Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  void _saveBiletCount(int count) {
    setState(() {
      _currentTicketCount = count;
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ $count bilet adeti belirlendi'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _showTicketEditDialog(Ticket ticket) {
    final nameController = TextEditingController(text: ticket.buyerName ?? '');
    final phoneController = TextEditingController(text: ticket.buyerPhone ?? '');
    
    showDialog(
      context: context,
      builder: (context) {
        TicketStatus selectedStatus = ticket.status;
        
        return StatefulBuilder(
          builder: (context, setDialogState) => AlertDialog(
            title: Text('🎫 Bilet Düzenle: ${ticket.numbersFormatted}'),
            content: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: const InputDecoration(
                    labelText: 'Ad Soyad',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.person),
                  ),
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: phoneController,
                  decoration: const InputDecoration(
                    labelText: 'Telefon',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.phone),
                    hintText: '05XXXXXXXXX',
                  ),
                  keyboardType: TextInputType.phone,
                ),
                const SizedBox(height: 16),
                
                // Durum seçimi
                Container(
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.grey),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(12),
                        child: const Row(
                          children: [
                            Icon(Icons.info, color: Colors.blue),
                            SizedBox(width: 8),
                            Text('Bilet Durumu:', style: TextStyle(fontWeight: FontWeight.bold)),
                          ],
                        ),
                      ),
                      const Divider(height: 1),
                      
                      _buildStatusOptionInternal('Satılmadı', TicketStatus.available, Colors.grey, selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                      _buildStatusOptionInternal('Satıldı (Ödenmedi)', TicketStatus.sold, Colors.orange, selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                      _buildStatusOptionInternal('Ödendi', TicketStatus.paid, Colors.green, selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                      _buildStatusOptionInternal('İptal', TicketStatus.cancelled, Colors.red, selectedStatus, (status) {
                        setDialogState(() {
                          selectedStatus = status;
                        });
                      }),
                    ],
                  ),
                ),
              ],
            ),
            actions: [
              TextButton(
                onPressed: () => Navigator.pop(context),
                child: const Text('İptal'),
              ),
              ElevatedButton(
                onPressed: () {
                  // Bilet güncelle
                  _updateTicket(ticket, nameController.text.trim(), phoneController.text.trim(), selectedStatus);
                  Navigator.pop(context);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                ),
                child: const Text('Kaydet'),
              ),
            ],
          ),
        );
      },
    );
  }

  Widget _buildStatusOptionInternal(String title, TicketStatus status, Color color, TicketStatus selectedStatus, Function(TicketStatus) onTap) {
    final isSelected = selectedStatus == status;
    
    return InkWell(
      onTap: () => onTap(status),
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
        decoration: BoxDecoration(
          color: isSelected ? color.withOpacity(0.1) : null,
          border: Border(
            bottom: BorderSide(color: Colors.grey.shade200),
          ),
        ),
        child: Row(
          children: [
            Container(
              width: 20,
              height: 20,
              decoration: BoxDecoration(
                shape: BoxShape.circle,
                border: Border.all(color: color, width: 2),
                color: isSelected ? color : Colors.transparent,
              ),
              child: isSelected 
                  ? const Icon(Icons.check, size: 14, color: Colors.white)
                  : null,
            ),
            const SizedBox(width: 12),
            Text(
              title,
              style: TextStyle(
                fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                color: isSelected ? color : Colors.grey[700],
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _updateTicket(Ticket ticket, String name, String phone, TicketStatus status) {
    // Bilet güncelleme simülasyonu
    setState(() {
      // Gerçek uygulamada burada ticket service kullanılır
    });
    
    String statusText = '';
    Color statusColor = Colors.blue;
    
    switch (status) {
      case TicketStatus.available:
        statusText = 'Satılmadı olarak işaretlendi';
        statusColor = Colors.grey;
        break;
      case TicketStatus.sold:
        statusText = 'Satıldı (Ödenmedi) olarak işaretlendi';
        statusColor = Colors.orange;
        break;
      case TicketStatus.unpaid:
        statusText = 'Ödenmedi olarak işaretlendi';
        statusColor = Colors.orange;
        break;
      case TicketStatus.paid:
        statusText = 'Ödendi olarak işaretlendi';
        statusColor = Colors.green;
        break;
      case TicketStatus.cancelled:
        statusText = 'İptal edildi';
        statusColor = Colors.red;
        break;
      case TicketStatus.winner:
        statusText = 'Kazanan olarak işaretlendi';
        statusColor = Colors.purple;
        break;
    }
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ Bilet ${ticket.numbersFormatted} $statusText'),
        backgroundColor: statusColor,
      ),
    );
    
    _showSuccessAnimation();
  }

  void _showTicketDialog(Ticket ticket) {
    final nameController = TextEditingController(text: ticket.buyerName ?? '');
    final phoneController = TextEditingController(text: ticket.buyerPhone ?? '');
    TicketStatus selectedStatus = ticket.status;

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: Text('🎫 Bilet: ${ticket.numbersFormatted}'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(
                controller: nameController,
                decoration: const InputDecoration(
                  labelText: 'Ad Soyad',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person),
                ),
              ),
              const SizedBox(height: 16),
              TextField(
                controller: phoneController,
                decoration: const InputDecoration(
                  labelText: 'Telefon',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.phone),
                ),
                keyboardType: TextInputType.phone,
              ),
              const SizedBox(height: 16),
              DropdownButtonFormField<TicketStatus>(
                value: selectedStatus,
                decoration: const InputDecoration(
                  labelText: 'Durum',
                  border: OutlineInputBorder(),
                ),
                items: const [
                  DropdownMenuItem(value: TicketStatus.available, child: Text('Satılmadı')),
                  DropdownMenuItem(value: TicketStatus.sold, child: Text('Satıldı (Ödenmedi)')),
                  DropdownMenuItem(value: TicketStatus.paid, child: Text('Ödendi')),
                  DropdownMenuItem(value: TicketStatus.cancelled, child: Text('İptal')),
                ],
                onChanged: (value) {
                  if (value != null) {
                    setDialogState(() {
                      selectedStatus = value;
                    });
                  }
                },
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('İptal'),
            ),
            ElevatedButton(
              onPressed: () async {
                // Bilet güncelle
                await _ticketService.updateTicketStatus(
                  ticketId: ticket.id,
                  status: selectedStatus,
                  buyerName: nameController.text.trim().isEmpty ? null : nameController.text.trim(),
                  buyerPhone: phoneController.text.trim().isEmpty ? null : phoneController.text.trim(),
                );
                
                Navigator.pop(context);
                setState(() {});
                
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('✅ Bilet güncellendi')),
                );
              },
              child: const Text('Kaydet'),
            ),
          ],
        ),
      ),
    );
  }



  void _clearAllTickets() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('⚠️ Dikkat'),
        content: const Text('Tüm biletleri silmek istediğinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              // Tüm kampanyaları sil
              setState(() {});
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('✅ Tüm biletler temizlendi')),
              );
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Sil'),
          ),
        ],
      ),
    );
  }

  Widget _buildKampanyaIsmi() {
    final controller = TextEditingController();
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '🏷️ Kampanya İsmi Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            'Yeni kampanyanız için bir isim belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          const SizedBox(height: 32),
          
          TextField(
            controller: controller,
            decoration: const InputDecoration(
              labelText: 'Kampanya İsmi',
              hintText: 'Örnek: Ocak 2024 Şans Oyunu',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.campaign),
            ),
          ),
          
          const SizedBox(height: 32),
          
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: () => _saveCampaignName(controller.text),
                icon: const Icon(Icons.save),
                label: const Text('Kaydet'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                ),
              ),
              const SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: () => controller.clear(),
                icon: const Icon(Icons.clear),
                label: const Text('Temizle'),
              ),
            ],
          ),
          
          const SizedBox(height: 32),
          
          const Text(
            'Örnek İsimler:',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              'Yılbaşı Özel Çekilişi',
              'Bahar Şans Oyunu',
              'Yaz Tatili Büyük İkramiye',
              'Okul Dönemi Çekilişi',
              'Ramazan Özel',
              'Kurban Bayramı Şansı',
            ].map((name) => ActionChip(
              label: Text(name),
              onPressed: () => controller.text = name,
            )).toList(),
          ),
        ],
      ),
    );
  }

  void _saveCampaignName(String name) {
    if (name.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('❌ Kampanya ismi boş olamaz')),
      );
      return;
    }
    setState(() {
      _currentCampaignName = name.trim();
    });
    _autoSave(); // Otomatik kaydet
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ Kampanya ismi belirlendi ve kaydedildi: $name'),
        backgroundColor: Colors.green,
      ),
    );
  }



  Widget _buildIkramiyeTutari() {
    final controller = TextEditingController();
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '💰 Ana İkramiye Miktarı',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          const Text(
            'Ana ikramiye miktarını ve cinsini girin:',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
          const SizedBox(height: 32),
          TextField(
            controller: controller,
            decoration: const InputDecoration(
              labelText: 'Ana İkramiye Miktarı ve Cinsi',
              hintText: 'Örnek: 50 çeyrek altın, 10000 TL, iPhone 15, Tatil',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.card_giftcard),
              helperText: 'Sayı, para birimi veya ürün adı girebilirsiniz',
            ),
            keyboardType: TextInputType.text,
            maxLines: 2,
          ),
          const SizedBox(height: 32),
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: () => _saveIkramiyeTutari(controller.text),
                icon: const Icon(Icons.save),
                label: const Text('Kaydet'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                ),
              ),
              const SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: () => controller.clear(),
                icon: const Icon(Icons.clear),
                label: const Text('Temizle'),
              ),
            ],
          ),
          const SizedBox(height: 32),
          const Text(
            'Hazır Örnekler:',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              '10.000 TL',
              '25.000 TL',
              '50 çeyrek altın',
              'iPhone 15 Pro',
              'Antalya tatili',
              'Araba',
              'Ev',
              'Samsung 55" TV',
              '5 gram altın',
            ].map((prize) => ActionChip(
              label: Text(prize),
              onPressed: () => controller.text = prize,
            )).toList(),
          ),
        ],
      ),
    );
  }

  void _saveIkramiyeTutari(String prizeText) {
    if (prizeText.trim().isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('❌ İkramiye bilgisi boş olamaz')),
      );
      return;
    }
    setState(() {
      // Sadece metni kaydet
      _prizeAmount = prizeText.trim();
    });
    _autoSave(); // Otomatik kaydet
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ İkramiye belirlendi ve kaydedildi: $prizeText'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildBirAltUst() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '⚖️ Bir Alt-Bir Üst Tanımla',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            'Ana ikramiyenin bir altı ve bir üstü için ikramiye belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          const SizedBox(height: 32),
          
          const Row(
            children: [
              Expanded(
                child: TextField(
                  decoration: InputDecoration(
                    labelText: 'Bir Alt İkramiyesi (₺)',
                    hintText: '500',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.remove_circle_outline),
                  ),
                  keyboardType: TextInputType.number,
                ),
              ),
              SizedBox(width: 16),
              Expanded(
                child: TextField(
                  decoration: InputDecoration(
                    labelText: 'Bir Üst İkramiyesi (₺)',
                    hintText: '500',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.add_circle_outline),
                  ),
                  keyboardType: TextInputType.number,
                ),
              ),
            ],
          ),
          
          const SizedBox(height: 32),
          
          ElevatedButton.icon(
            onPressed: _saveBirAltUst,
            icon: const Icon(Icons.save),
            label: const Text('Kaydet'),
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
          ),
          
          const SizedBox(height: 32),
          
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0x667F7FD5), // Soft mor-mavi (daha transparan)
                  Color(0x6686A8E7), // Açık mavi (daha transparan)
                  Color(0x6691EAE4), // Turkuaz (daha transparan)
                ],
                stops: [0.0, 0.5, 1.0],
              ),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(Icons.info, color: Colors.blue),
                    const SizedBox(width: 8),
                    Text(
                      'Nasıl Çalışır?',
                      style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue[800]),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Text(
                  '• Ana kazanan numara: 123\n'
                  '• Bir alt: 122 (123-1)\n'
                  '• Bir üst: 124 (123+1)\n\n'
                  'Bu numaralara sahip biletler de ikramiye kazanır.',
                  style: TextStyle(color: Colors.blue[700]),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _saveBirAltUst() {
    setState(() {});
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('✅ Bir alt-bir üst ikramiyeleri ayarlandı'),
        backgroundColor: Colors.green,
      ),
    );
    
    
  }

  Widget _buildBiletFiyati() {
    final controller = TextEditingController();
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '💵 Bilet Fiyatı Belirle',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            'Her bilet için satış fiyatını belirleyin:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          const SizedBox(height: 16),
          
          // Mevcut fiyatı göster
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: const LinearGradient(
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
                colors: [
                  Color(0x667F7FD5), // Soft mor-mavi (daha transparan)
                  Color(0x6686A8E7), // Açık mavi (daha transparan)
                  Color(0x6691EAE4), // Turkuaz (daha transparan)
                ],
                stops: [0.0, 0.5, 1.0],
              ),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.green.withOpacity(0.3)),
            ),
            child: Row(
              children: [
                const Icon(Icons.check_circle, color: Colors.green),
                const SizedBox(width: 12),
                const Text(
                  'Mevcut Bilet Fiyatı: ',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                Text(
                  '${_currentTicketPrice.toStringAsFixed(0)} ₺',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.green[700],
                    fontSize: 18,
                  ),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 32),
          
          TextField(
            controller: controller,
            decoration: const InputDecoration(
              labelText: 'Bilet Fiyatı (₺)',
              hintText: 'Örnek: 1.000 veya 1.550',
              helperText: 'Bilet fiyatını 1.000 veya 1.550 gibi noktalı/ondalıklı formatta giriniz',
              border: OutlineInputBorder(),
              prefixIcon: Icon(Icons.local_offer),
              suffixText: '₺',
            ),
            keyboardType: TextInputType.number,
            onChanged: (value) {
              // Noktalı ve ondalıklı format kontrolü
              final regex = RegExp(r'^(\d{1,3}(\.\d{3})*)(,\d{1,2})?$|^(\d+)(,\d{1,2})?$|^(\d{1,3}(\.\d{3})*)(\.\d{1,2})?$|^(\d+)(\.\d{1,2})?$');
              if (value.isNotEmpty && !regex.hasMatch(value)) {
                Future.microtask(() {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('❌ Bilet fiyatını 1.000, 1.550 veya 1.55 gibi noktalı/ondalıklı formatta giriniz.')),
                  );
                });
              }
            },
          ),
          
          const SizedBox(height: 32),
          
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: () => _saveBiletFiyati(controller.text),
                icon: const Icon(Icons.save),
                label: const Text('Kaydet'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                ),
              ),
              const SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: () => controller.clear(),
                icon: const Icon(Icons.clear),
                label: const Text('Temizle'),
              ),
            ],
          ),
          
          const SizedBox(height: 32),
          
          const Text(
            'Önerilen Fiyatlar:',
            style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          
          Wrap(
            spacing: 8,
            runSpacing: 8,
            children: [
              '5',
              '10',
              '20',
              '50',
              '100',
              '500',
              '1000',
            ].map((price) => ActionChip(
              label: Text('$price ₺'),
              onPressed: () => controller.text = price,
            )).toList(),
          ),
        ],
      ),
    );
  }

  void _saveBiletFiyati(String price) {
    // Noktalı ve ondalıklı fiyatı normalize et
    String clean = price.replaceAll('.', '').replaceAll(',', '.');
    final parsedPrice = double.tryParse(clean);
    if (parsedPrice == null || parsedPrice <= 0) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('❌ Geçerli bir fiyat girin')),
      );
      return;
    }
    setState(() {
      _currentTicketPrice = parsedPrice; // Admin fiyatını kaydet
    });
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ Bilet fiyatı belirlendi: ${parsedPrice.toStringAsFixed(2)} ₺'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildListe([Campaign? campaign]) {
    // Ayarları kontrol et
    bool ayarlarTam = _currentTicketCount > 0 && _currentTicketPrice > 0 && _currentChanceCount > 0 && _currentLastDigitCount > 0 && _selectedDrawDate != null && _currentCampaignName.isNotEmpty && _prizeAmount.isNotEmpty;
    
    List<String> eksikAyarlar = [];
    if (_selectedDrawDate == null) eksikAyarlar.add('Çekiliş Tarihi');
    if (_currentTicketCount <= 0) eksikAyarlar.add('Bilet Adeti');
    if (_currentCampaignName.isEmpty) eksikAyarlar.add('Kampanya İsmi');
    if (_prizeAmount.isEmpty) eksikAyarlar.add('İkramiye Tutarı');
    if (_currentTicketPrice <= 0) eksikAyarlar.add('Bilet Fiyatı');

    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Row(
            children: [
              Text('📋 Bilet Listesi', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
              Spacer(),
            ],
          ),
          const SizedBox(height: 20),
          
          // Gerekli ayarların kontrolü ve uyarı mesajları - sadece bilet yokken göster
          if (!ayarlarTam && _sampleTickets.isEmpty) ...[
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.orange),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Row(
                    children: [
                      Icon(Icons.warning, color: Colors.orange),
                      SizedBox(width: 8),
                      Text('⚠️ Eksik Ayarlar', style: TextStyle(fontWeight: FontWeight.bold, color: Colors.orange)),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Biletleri listelemek için aşağıdaki ayarları tamamlamanız gerekiyor:',
                    style: TextStyle(color: Colors.orange[800]),
                  ),
                  const SizedBox(height: 8),
                  ...eksikAyarlar.map((ayar) => Padding(
                    padding: const EdgeInsets.only(left: 16, bottom: 4),
                    child: Text('• $ayar', style: TextStyle(color: Colors.orange[700])),
                  )),
                ],
              ),
            ),
            const SizedBox(height: 20),
          ],
          
          // Biletleri Listele butonu - sadece bilet yokken görünür
          if (_sampleTickets.isEmpty) 
            Center(
              child: ElevatedButton.icon(
                onPressed: () => _generateTickets(ayarlarTam, eksikAyarlar),
                icon: const Icon(Icons.list_alt, size: 24),
                label: const Text('Biletleri Listele', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                style: ElevatedButton.styleFrom(
                  backgroundColor: ayarlarTam ? const Color(0xFF6A1B9A) : Colors.grey,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 16),
                  shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
                  elevation: ayarlarTam ? 8 : 2,
                ),
              ),
            )
          else
            // Biletler varken kontrol butonları
            Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                ElevatedButton.icon(
                  onPressed: () => _clearAllTickets(),
                  icon: const Icon(Icons.clear_all),
                  label: const Text('Tüm Biletleri Temizle'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  ),
                ),
                const SizedBox(width: 16),
                ElevatedButton.icon(
                  onPressed: () => _generateTickets(ayarlarTam, eksikAyarlar),
                  icon: const Icon(Icons.refresh),
                  label: const Text('Yeniden Oluştur'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: const Color(0xFF6A1B9A),
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  ),
                ),
              ],
            ),
          
          const SizedBox(height: 20),
          
          // Tüm biletleri yazdır butonu
          if (campaign != null && _sampleTickets.isNotEmpty)
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              child: ElevatedButton.icon(
                onPressed: _printAllTickets,
                icon: const Icon(Icons.print, size: 24),
                label: Text('Tüm Biletleri Yazdır (${_sampleTickets.length} adet)'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.blue,
                  foregroundColor: Colors.white,
                  padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 12),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
              ),
            ),
          
          const SizedBox(height: 16),
          if (campaign == null)
            const Center(child: Text('Kampanya bulunamadı'))
          else
            // ... mevcut bilet listeleme kodu ...
            Expanded(child: _buildTicketList(campaign)),
        ],
      ),
    );
  }

  // Otomatik iptal kontrolü için değişken
  final bool _autoCancel = true;

  void _generateTickets(bool ayarlarTam, List<String> eksikAyarlar) {
    if (!ayarlarTam) {
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.warning, color: Colors.orange),
              SizedBox(width: 8),
              Text('⚠️ Eksik Ayarlar'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text('Biletleri listelemek için aşağıdaki ayarları tamamlamanız gerekiyor:'),
              const SizedBox(height: 12),
              ...eksikAyarlar.map((ayar) => Padding(
                padding: const EdgeInsets.only(left: 16, bottom: 4),
                child: Text('• $ayar', style: const TextStyle(fontWeight: FontWeight.bold)),
              )),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('Tamam'),
            ),
          ],
        ),
      );
      return;
    }

    // Tüm ayarlar tamamlanmışsa biletleri oluştur
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🎫 Biletleri Oluştur'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('$_currentTicketCount adet bilet oluşturulacak.'),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text('📋 Kampanya: $_currentCampaignName'),
                  Text('🎯 Bilet Sayısı: $_currentTicketCount'),
                  Text('💰 Bilet Fiyatı: ${_currentTicketPrice.toStringAsFixed(0)} ₺'),
                  Text('🔢 Son Hane: $_currentLastDigitCount'),
                  Text('🎲 Şans Sayısı: $_currentChanceCount'),
                  Text('🏆 İkramiye: $_prizeAmount'),
                  Text('📅 Çekiliş: ${_selectedDrawDate!.day}/${_selectedDrawDate!.month}/${_selectedDrawDate!.year}'),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _createTicketsAndCampaign();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
            child: const Text('Oluştur'),
          ),
        ],
      ),
    );
  }

  void _createTicketsAndCampaign() {
    // Kampanya oluştur
    final newCampaign = Campaign(
      id: 'auto_${DateTime.now().millisecondsSinceEpoch}',
      name: _currentCampaignName.isNotEmpty ? _currentCampaignName : 'Otomatik Kampanya',
      lastDigitCount: _currentLastDigitCount,
      chanceCount: _currentChanceCount,
      ticketCount: _currentTicketCount,
      ticketPrice: _currentTicketPrice,
      prizeAmount: _prizeAmount,
      upperPrize: '',
      lowerPrize: '',
      prizeCurrency: PrizeCurrency.tl,
      customCurrency: 'TL',
      weekNumber: (DateTime.now().difference(DateTime(DateTime.now().year, 1, 1)).inDays / 7).ceil(),
      drawDate: _selectedDrawDate!,
      createdAt: DateTime.now(),
    );
    
    _campaignService.createAdminCampaign(newCampaign);
    
    setState(() {
      _sampleTickets.clear();
      
      // Milli Piyango sistemine uygun bilet numaraları oluştur
      for (int i = 0; i < _currentTicketCount; i++) {
        final Random random = Random();
        List<String> numbers = [];
        
        for (int j = 0; j < _currentChanceCount; j++) {
          String number = '';
          for (int k = 0; k < _currentLastDigitCount; k++) {
            number += random.nextInt(10).toString();
          }
          numbers.add(number);
        }
        
        final ticket = Ticket(
          id: 'admin_ticket_${i + 1}',
          campaignId: newCampaign.id,
          numbers: numbers,
          price: _currentTicketPrice,
          status: TicketStatus.available,
          createdAt: DateTime.now(),
          drawDate: _selectedDrawDate,
          autoCancel: _autoCancel,
        );
        
        _sampleTickets.add(ticket);
        _campaignService.addTicketToSystem(ticket);
      }
      
      _ticketsGenerated = true;
    });
    
    _autoSave(); // Otomatik kaydet
    
    // Başarı mesajı
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.check_circle, color: Colors.white),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                '✅ $_currentTicketCount adet bilet başarıyla oluşturuldu!\n'
                'Kampanya: $_currentCampaignName\n'
                'Biletler hem admin hem de bayi panelinde görünür.',
                style: const TextStyle(color: Colors.white),
              ),
            ),
          ],
        ),
        backgroundColor: Colors.green,
        duration: const Duration(seconds: 5),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  // Bilet kartı widget'ı - geri sayım ile
  Widget _buildTicketCard(Ticket ticket) {
    Color backgroundColor;
    Color textColor = Colors.black;
    String statusText;
    IconData statusIcon;

    // Durum ve renk belirleme
    switch (ticket.status) {
      case TicketStatus.available:
        backgroundColor = Colors.grey[300]!;
        statusText = 'Müsait';
        statusIcon = Icons.sell;
        break;
      case TicketStatus.unpaid:
        backgroundColor = Colors.orange[200]!;
        statusText = 'Ödenmedi';
        statusIcon = Icons.schedule;
        break;
      case TicketStatus.paid:
        backgroundColor = Colors.green[300]!;
        statusText = 'Ödendi';
        statusIcon = Icons.check_circle;
        break;
      case TicketStatus.cancelled:
        backgroundColor = Colors.red[300]!;
        statusText = 'İptal';
        statusIcon = Icons.cancel;
        textColor = Colors.white;
        break;
      case TicketStatus.winner:
        backgroundColor = Colors.purple[300]!;
        statusText = 'Kazanan';
        statusIcon = Icons.star;
        break;
      default:
        backgroundColor = Colors.grey[300]!;
        statusText = 'Bilinmiyor';
        statusIcon = Icons.help;
        break;
    }

    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _showTicketStatusDialog(ticket),
        child: Container(
          decoration: BoxDecoration(
            color: backgroundColor,
            borderRadius: BorderRadius.circular(8),
            // Ödenmemiş biletler için gradient efekt
            gradient: ticket.status == TicketStatus.unpaid
                ? LinearGradient(
                    colors: [Colors.green[200]!, Colors.red[200]!],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  )
                : null,
          ),
          child: Padding(
            padding: const EdgeInsets.all(12),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // Bilet numarası
                Text(
                  ticket.numbersFormatted,
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: textColor,
                  ),
                ),
                
                const SizedBox(height: 8),
                
                // Durum ikonu ve metni
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    Icon(statusIcon, size: 16, color: textColor),
                    const SizedBox(width: 4),
                    Flexible(
                      child: Text(
                        statusText,
                        style: TextStyle(
                          fontSize: 12,
                          color: textColor,
                          fontWeight: FontWeight.w500,
                        ),
                        overflow: TextOverflow.ellipsis,
                      ),
                    ),
                  ],
                ),
                
                // Geri sayım (sadece ödenmemiş biletler için)
                if (ticket.status == TicketStatus.unpaid && ticket.drawDate != null) ...[
                  const SizedBox(height: 8),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                    decoration: BoxDecoration(
                      color: Colors.red.withOpacity(0.8),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Text(
                      ticket.timeUntilDrawFormatted,
                      style: const TextStyle(
                        fontSize: 10,
                        color: Colors.white,
                        fontWeight: FontWeight.bold,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ),
                  
                  // Otomatik iptal uyarısı
                  if (_autoCancel && ticket.shouldAutoCancel)
                    Container(
                      margin: const EdgeInsets.only(top: 4),
                      padding: const EdgeInsets.symmetric(horizontal: 4, vertical: 2),
                      decoration: BoxDecoration(
                        color: Colors.red,
                        borderRadius: BorderRadius.circular(3),
                      ),
                      child: const Text(
                        'YAKINDA İPTAL',
                        style: TextStyle(
                          fontSize: 8,
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                ],
                
                // İsim bilgisi (varsa)
                if (ticket.buyerName != null) ...[
                  const SizedBox(height: 4),
                  Text(
                    ticket.buyerName!,
                    style: TextStyle(
                      fontSize: 10,
                      color: textColor.withOpacity(0.8),
                      fontWeight: FontWeight.w400,
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ],
              ],
            ),
          ),
        ),
      ),
    );
  }



  // Sample biletleri oluştur
  void _generateSampleTickets(Campaign campaign) {
    if (_ticketsGenerated) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('✅ Biletler zaten oluşturulmuş'),
          backgroundColor: Colors.blue,
        ),
      );
      return;
    }

    setState(() {
      _sampleTickets.clear();
      
      // Benzersiz bilet numaraları için set oluştur
      Set<String> usedTicketNumbers = {};
      
      // Admin ayarlarına göre bilet oluştur
      for (int i = 0; i < _currentTicketCount; i++) {
        final Random random = Random();
        
        // Her bilet için şans sayısı kadar numara üret
        List<String> numbers = [];
        for (int j = 0; j < _currentChanceCount; j++) {
          String number = '';
          for (int k = 0; k < _currentLastDigitCount; k++) {
            number += random.nextInt(10).toString();
          }
          numbers.add(number);
        }

        // Benzersiz 8 haneli bilet numarası oluştur
        String ticketNumber;
        do {
          ticketNumber = '';
          for (int j = 0; j < 8; j++) {
            ticketNumber += random.nextInt(10).toString();
          }
        } while (usedTicketNumbers.contains(ticketNumber));
        
        usedTicketNumbers.add(ticketNumber);

        final ticket = Ticket(
          id: ticketNumber,
          campaignId: campaign.id,
          numbers: numbers,
          price: _currentTicketPrice,
          status: TicketStatus.available,
          createdAt: DateTime.now(),
          drawDate: DateTime.now().add(const Duration(days: 1)), // Örnek: yarın çekiliş
          autoCancel: _autoCancel,
        );

        _sampleTickets.add(ticket);
        _campaignService.addTicketToSystem(ticket);
      }
      
      _ticketsGenerated = true;
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ $_currentTicketCount bilet oluşturuldu!'),
        backgroundColor: Colors.green,
      ),
    );
  }

  Widget _buildGiderler() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '📉 Giderler',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          
          Row(
            children: [
              ElevatedButton.icon(
                onPressed: _showAddExpenseDialog,
                icon: const Icon(Icons.add),
                label: const Text('Gider Ekle'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
              ),
              const SizedBox(width: 16),
              ElevatedButton.icon(
                onPressed: _showExpenseReport,
                icon: const Icon(Icons.assessment),
                label: const Text('Rapor Al'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          Expanded(
            child: _financialService.expenses.isEmpty
                ? const Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.money_off, size: 64, color: Colors.grey),
                        SizedBox(height: 16),
                        Text('Henüz gider kaydı yok'),
                        SizedBox(height: 8),
                        Text('Yeni gider eklemek için butona tıklayın'),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: _financialService.expenses.length,
                    itemBuilder: (context, index) {
                      final expense = _financialService.expenses[index];
                      return Card(
                        child: ListTile(
                          leading: CircleAvatar(
                            backgroundColor: Colors.red.withOpacity(0.1),
                            child: const Icon(Icons.money_off, color: Colors.red),
                          ),
                          title: Text(expense.description),
                          subtitle: Text('${expense.date.day}/${expense.date.month}/${expense.date.year}'),
                          trailing: Text(
                            '-${expense.amount.toStringAsFixed(0)} ₺',
                            style: const TextStyle(
                              color: Colors.red,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }

  void _showAddExpenseDialog() {
    final descController = TextEditingController();
    final amountController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('💸 Yeni Gider Ekle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: descController,
              decoration: const InputDecoration(
                labelText: 'Gider Açıklaması',
                hintText: 'Örnek: Kırtasiye masrafı',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: amountController,
              decoration: const InputDecoration(
                labelText: 'Tutar (₺)',
                hintText: '100',
                border: OutlineInputBorder(),
                suffixText: '₺',
              ),
              keyboardType: TextInputType.number,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              final amount = double.tryParse(amountController.text);
              if (descController.text.isNotEmpty && amount != null && amount > 0) {
                // Gider ekle - FinancialService'e ekleyelim
                final success = await _financialService.addExpense(
                  description: descController.text.trim(),
                  amount: amount,
                  date: DateTime.now(),
                );
                
                if (success) {
                  setState(() {
                    // UI'ı güncelle
                  });
                  Navigator.pop(context);
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('✅ Gider eklendi: ${descController.text} - ${amount.toStringAsFixed(0)} ₺'),
                      backgroundColor: Colors.green,
                    ),
                  );
                } else {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('❌ Gider eklenirken hata oluştu'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('❌ Lütfen geçerli bilgiler girin'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            child: const Text('Ekle'),
          ),
        ],
      ),
    );
  }

  void _showExpenseReport() {
    final expenses = _financialService.expenses;
    final totalExpense = expenses.fold(0.0, (sum, exp) => sum + exp.amount);
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('📊 Gider Raporu'),
        content: SizedBox(
          width: double.maxFinite,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Özet kartı
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                  border: Border.all(color: Colors.red),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.trending_down, color: Colors.red, size: 32),
                    const SizedBox(width: 16),
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Toplam Gider',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey[600],
                          ),
                        ),
                        Text(
                          '${totalExpense.toStringAsFixed(0)} ₺',
                          style: const TextStyle(
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                            color: Colors.red,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 16),
              
              if (expenses.isEmpty)
                Text(
                  'Henüz gider kaydı bulunmuyor',
                  style: TextStyle(color: Colors.grey[600]),
                )
              else ...[
                Text(
                  'Son ${expenses.length} gider:',
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                SizedBox(
                  height: 200,
                  child: ListView.builder(
                    itemCount: expenses.length,
                    itemBuilder: (context, index) {
                      final expense = expenses[index];
                      return ListTile(
                        leading: const Icon(Icons.money_off, color: Colors.red, size: 20),
                        title: Text(
                          expense.description,
                          style: const TextStyle(fontSize: 14),
                        ),
                        subtitle: Text(
                          '${expense.date.day}/${expense.date.month}/${expense.date.year}',
                          style: const TextStyle(fontSize: 12),
                        ),
                        trailing: Text(
                          '-${expense.amount.toStringAsFixed(0)} ₺',
                          style: const TextStyle(
                            color: Colors.red,
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Kapat'),
          ),
        ],
      ),
    );
  }

  Widget _buildBorcluOlanlar() {
    // Ödenmemiş biletleri al (sadece isim ve telefon bilgisi olanlar)
    final unpaidTickets = _getUnpaidTicketsWithBuyerInfo();
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '💳 Borçlu Olanlar',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          
          Row(
            children: [
              Text(
                'Toplam ${unpaidTickets.length} kişi borçlu',
                style: TextStyle(fontSize: 16, color: Colors.grey[600]),
              ),
              const Spacer(),
              ElevatedButton.icon(
                onPressed: () => _sendPaymentReminders(unpaidTickets),
                icon: const Icon(Icons.send),
                label: const Text('Hatırlatma Gönder'),
                style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          Expanded(
            child: unpaidTickets.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.check_circle, size: 64, color: Colors.green),
                        const SizedBox(height: 16),
                        const Text('Harika! Borçlu kimse yok'),
                        const SizedBox(height: 8),
                        const Text('Tüm ödemeler tamamlanmış'),
                        const SizedBox(height: 16),
                        Text(
                          'Biletleri "Ödenmedi" durumuna alıp isim yazarsanız burada görünür.',
                          style: TextStyle(color: Colors.grey[500], fontSize: 12),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: unpaidTickets.length,
                    itemBuilder: (context, index) {
                      final ticket = unpaidTickets[index];
                      return Card(
                        child: ListTile(
                          leading: CircleAvatar(
                            backgroundColor: Colors.orange.withOpacity(0.1),
                            child: const Icon(Icons.confirmation_number, color: Colors.orange),
                          ),
                          title: Text(ticket.buyerName ?? 'İsimsiz Borçlu'),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              if (ticket.buyerPhone != null) Text('📞 ${ticket.buyerPhone}'),
                              Text('🎫 ${ticket.numbersFormatted}'),
                              Text('📅 ${ticket.soldAt?.day}/${ticket.soldAt?.month}/${ticket.soldAt?.year} tarihinde satıldı'),
                            ],
                          ),
                          trailing: Column(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Text(
                                '${ticket.price.toStringAsFixed(0)} ₺',
                                style: const TextStyle(
                                  color: Colors.red,
                                  fontWeight: FontWeight.bold,
                                  fontSize: 16,
                                ),
                              ),
                              const Text(
                                'Borç',
                                style: TextStyle(
                                  color: Colors.red,
                                  fontSize: 12,
                                ),
                              ),
                            ],
                          ),
                          onTap: () => _showTicketDebtActions(ticket),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }

  List<Ticket> _getUnpaidTicketsWithBuyerInfo() {
    // Önce sadece sample biletleri kullan (çünkü bunlar zaten campaign service'e ekleniyor)
    List<Ticket> allTickets = [];
    
    // Öncelik sample biletlere ver
    if (_sampleTickets.isNotEmpty) {
      allTickets.addAll(_sampleTickets);
    } else {
      // Eğer sample bilet yoksa campaign service'ten al
      allTickets.addAll(_campaignService.getAllSystemTickets());
    }
    
    // Duplikatları ID'ye göre temizle
    final Map<String, Ticket> uniqueTickets = {};
    for (var ticket in allTickets) {
      uniqueTickets[ticket.id] = ticket;
    }
    
    // TÜM ödenmemiş biletleri döndür (isim olsun olmasın)
    // İsim yoksa "İsimsiz Borçlu" olarak gösterilecek
    return uniqueTickets.values.where((ticket) => 
        ticket.status == TicketStatus.sold || ticket.status == TicketStatus.unpaid
    ).toList();
  }

  void _showTicketDebtActions(Ticket ticket) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('💳 ${ticket.buyerName}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Bilet: ${ticket.numbersFormatted}'),
            const SizedBox(height: 8),
            Text('Borç: ${ticket.price.toStringAsFixed(0)} ₺'),
            if (ticket.buyerPhone != null) ...[
              const SizedBox(height: 8),
              Text('Telefon: ${ticket.buyerPhone}'),
            ],
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _markTicketAsPaid(ticket);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: const Text('Ödendi İşaretle'),
          ),
        ],
      ),
    );
  }

  void _markTicketAsPaid(Ticket ticket) {
    // Bilet durumunu "ödendi" yap
    _updateTicketStatusWithInfo(ticket, TicketStatus.paid, ticket.buyerName, ticket.buyerPhone);
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ ${ticket.buyerName} - ${ticket.numbersFormatted} ödendi olarak işaretlendi'),
        backgroundColor: Colors.green,
      ),
    );
  }

  void _sendPaymentReminders(List<Ticket> unpaidTickets) {
    if (unpaidTickets.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('📭 Borçlu kimse yok, hatırlatma gönderilecek kimse bulunamadı'),
          backgroundColor: Colors.blue,
        ),
      );
      return;
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('📲 Ödeme Hatırlatması'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('${unpaidTickets.length} kişiye ödeme hatırlatması gönderilsin mi?'),
            const SizedBox(height: 16),
            SizedBox(
              height: 150,
              child: ListView.builder(
                itemCount: unpaidTickets.length,
                itemBuilder: (context, index) {
                  final ticket = unpaidTickets[index];
                  return ListTile(
                    leading: const Icon(Icons.person, size: 20),
                    title: Text(ticket.buyerName ?? 'İsimsiz', style: const TextStyle(fontSize: 14)),
                    subtitle: Text(
                      '${ticket.numbersFormatted} - ${ticket.price.toStringAsFixed(0)} ₺',
                      style: const TextStyle(fontSize: 12),
                    ),
                    trailing: ticket.buyerPhone != null 
                        ? const Icon(Icons.phone, color: Colors.green, size: 16)
                        : const Icon(Icons.phone_disabled, color: Colors.red, size: 16),
                  );
                },
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _sendReminders(unpaidTickets);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: const Text('Gönder'),
          ),
        ],
      ),
    );
  }

  void _sendReminders(List<Ticket> tickets) {
    final phonelessCount = tickets.where((t) => t.buyerPhone == null || t.buyerPhone!.isEmpty).length;
    final phoneCount = tickets.length - phonelessCount;
    
    String message = '';
    if (phoneCount > 0) {
      message += '📱 $phoneCount kişiye SMS gönderildi';
    }
    if (phonelessCount > 0) {
      if (message.isNotEmpty) message += '\n';
      message += '⚠️ $phonelessCount kişinin telefonu yok';
    }
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.orange,
        duration: const Duration(seconds: 4),
      ),
    );
  }

  void _showDebtActions(Person person) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('💳 ${person.fullName}'),
        content: Text('Borç: ${person.debt.toStringAsFixed(0)} ₺'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _markAsPaid(person);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: const Text('Ödendi İşaretle'),
          ),
        ],
      ),
    );
  }

  void _markAsPaid(Person person) async {
    await _personService.markAsPaid(person.id);
    setState(() {});
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ ${person.fullName} ödendi olarak işaretlendi'),
        backgroundColor: Colors.green,
      ),
    );
  }



  Widget _buildYeniKampanya() {
    final campaigns = _campaignService.campaigns;
    
    // Debug: Kampanyaları kontrol et
    print('📋 UI da gosterilecek kampanya sayisi: ${campaigns.length}');
    if (campaigns.isNotEmpty) {
      print('📋 Kampanya listesi: ${campaigns.map((c) => c.name).toList()}');
    }
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text(
            '🆕 Yeni Kampanya Oluştur',
            style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 16),
          Text(
            'Kendi ayarlarınızla özel kampanya oluşturun ve yayınlayın:',
            style: TextStyle(fontSize: 16, color: Colors.grey[600]),
          ),
          const SizedBox(height: 24),
          
          // Özel kampanya oluştur butonu
          SizedBox(
            width: double.infinity,
            child: ElevatedButton.icon(
              onPressed: _showCustomCampaignDialog,
              icon: const Icon(Icons.add_circle, size: 24),
              label: const Text(
                'Yeni Özel Kampanya Oluştur',
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF6A1B9A),
                foregroundColor: Colors.white,
                minimumSize: const Size(double.infinity, 60),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(15),
                ),
                elevation: 8,
              ),
            ),
          ),
          
          const SizedBox(height: 32),
          
          // Oluşturulan kampanyalar
          Row(
            children: [
              const Text(
                '📋 Oluşturulan Kampanyalar',
                style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
              ),
              const Spacer(),
              Text(
                'Toplam: ${campaigns.length} kampanya',
                style: TextStyle(fontSize: 14, color: Colors.grey[600]),
              ),
            ],
          ),
          
          const SizedBox(height: 16),
          
          Expanded(
            child: campaigns.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.campaign_outlined, size: 80, color: Colors.grey),
                        const SizedBox(height: 16),
                        Text(
                          'Henüz kampanya oluşturmadınız',
                          style: TextStyle(fontSize: 18, color: Colors.grey[600]),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Yukarıdaki butonu kullanarak yeni kampanya oluşturun',
                          style: TextStyle(fontSize: 14, color: Colors.grey[500]),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: campaigns.length,
                    itemBuilder: (context, index) {
                      final campaign = campaigns[index];
                      return _buildCampaignPublishCard(campaign);
                    },
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildCampaignPublishCard(Campaign campaign) {
    final stats = _campaignService.getTicketStats(campaign.id);
    final isPublished = _campaignService.isListPublished; // Her kampanya için ayrı yayınlama durumu olmalı
    
    return Card(
      elevation: 4,
      margin: const EdgeInsets.only(bottom: 16),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Başlık ve durum
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        campaign.name,
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.grey[800],
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        '${campaign.ticketCount} bilet • ${campaign.lastDigitCount} haneli • ${campaign.chanceCount} şans',
                        style: TextStyle(color: Colors.grey[600], fontSize: 14),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: isPublished ? Colors.green.withOpacity(0.1) : Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Text(
                    isPublished ? '🟢 Yayında' : '🟡 Hazır',
                    style: TextStyle(
                      color: isPublished ? Colors.green[700] : Colors.orange[700],
                      fontWeight: FontWeight.bold,
                      fontSize: 12,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // Kampanya bilgileri
            Row(
              children: [
                Expanded(
                  child: _buildCampaignInfo('💰 Bilet Fiyatı', '${campaign.ticketPrice.toStringAsFixed(0)} ₺'),
                ),
                Expanded(
                  child: _buildCampaignInfo('🏆 Ana İkramiye', _getCampaignPrizeText(campaign)),
                ),
                Expanded(
                  child: _buildCampaignInfo('📅 Çekiliş', '${campaign.drawDate.day}/${campaign.drawDate.month}/${campaign.drawDate.year}'),
                ),
              ],
            ),
            
            const SizedBox(height: 20),
            
            // Aksiyonlar
            Row(
              children: [
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () => _viewCampaignDetails(campaign),
                    icon: const Icon(Icons.visibility, size: 18),
                    label: const Text('Detayları Görüntüle'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: isPublished 
                        ? () => _unpublishCampaign(campaign)
                        : () => _publishCampaign(campaign),
                    icon: Icon(
                      isPublished ? Icons.visibility_off : Icons.publish,
                      size: 18,
                    ),
                    label: Text(isPublished ? 'Yayından Kaldır' : 'Kampanyayı Yayınla'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: isPublished ? Colors.orange : Colors.green,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 12),
                    ),
                  ),
                ),
                if (isPublished) ...[
                  const SizedBox(width: 8),
                  ElevatedButton.icon(
                    onPressed: () async {
                      final confirm = await showDialog<bool>(
                        context: context,
                        builder: (context) => AlertDialog(
                          title: const Text('Kampanyayı Sil'),
                          content: Text('"${campaign.name}" kampanyasını silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!'),
                          actions: [
                            TextButton(
                              onPressed: () => Navigator.pop(context, false),
                              child: const Text('İptal'),
                            ),
                            ElevatedButton(
                              onPressed: () => Navigator.pop(context, true),
                              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                              child: const Text('Sil'),
                            ),
                          ],
                        ),
                      );
                      if (confirm == true) {
                        await _campaignService.deleteCampaign(campaign.id);
                        setState(() {});
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(content: Text('✅ Kampanya silindi: ${campaign.name}'), backgroundColor: Colors.red),
                        );
                      }
                    },
                    icon: const Icon(Icons.delete_forever, size: 16),
                    label: const Text('Kampanyayı Sil'),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.red[600],
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    ),
                  ),
                ],
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildCampaignInfo(String label, String value) {
    return Column(
      children: [
        Text(
          label,
          style: TextStyle(fontSize: 12, color: Colors.grey[600]),
          textAlign: TextAlign.center,
        ),
        const SizedBox(height: 4),
        Text(
          value,
          style: const TextStyle(fontSize: 14, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
      ],
    );
  }

  void _viewCampaignDetails(Campaign campaign) {
    _showCampaignDetails(campaign);
  }

  void _publishCampaign(Campaign campaign) async {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('📢 Kampanya Yayınla'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('${campaign.name} kampanyasını yayınlamak istediğinizden emin misiniz?'),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.green.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  const Icon(Icons.info, color: Colors.green),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Kampanya yayınlandığında tüm bayiler bu kampanyayı görebilir ve bilet satabilir.',
                      style: TextStyle(color: Colors.green[800]),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              
              // Kampanyayı yayınla
              await _campaignService.publishList();
              setState(() {});
              
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('✅ ${campaign.name} kampanyası yayınlandı! Bayiler artık görebilir.'),
                  backgroundColor: Colors.green,
                  duration: const Duration(seconds: 3),
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('Evet, Yayınla'),
          ),
        ],
      ),
    );
  }

  void _unpublishCampaign(Campaign campaign) async {
    await _campaignService.unpublishList();
    setState(() {});
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('✅ ${campaign.name} kampanyası yayından kaldırıldı!'),
        backgroundColor: Colors.orange,
        duration: const Duration(seconds: 2),
      ),
    );
  }

  String _getCampaignPrizeText(Campaign campaign) {
    if (campaign.prizeCurrency == PrizeCurrency.other && campaign.customCurrency != null) {
      return '${campaign.prizeAmount} ${campaign.customCurrency}';
    } else {
      String symbol;
      switch (campaign.prizeCurrency) {
        case PrizeCurrency.tl:
          symbol = '₺';
          break;
        case PrizeCurrency.dolar:
          symbol = '\$';
          break;
        case PrizeCurrency.euro:
          symbol = '€';
          break;
        case PrizeCurrency.altin:
          symbol = '🥇';
          break;
        default:
          symbol = '₺';
      }
      return '${campaign.prizeAmount} $symbol';
    }
  }

  // Kampanya Yönetimi sayfası
  Widget _buildKampanyaYonetimi() {
    final campaigns = _campaignService.campaigns;
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              const Text(
                '🎯 Kampanya Yönetimi',
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
              ),
              const Spacer(),
              Text(
                'Toplam: ${campaigns.length} kampanya',
                style: TextStyle(fontSize: 16, color: Colors.grey[600]),
              ),
            ],
          ),
          const SizedBox(height: 24),
          
          // Kampanya kartları
          Expanded(
            child: campaigns.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        const Icon(Icons.campaign, size: 80, color: Colors.grey),
                        const SizedBox(height: 16),
                        Text(
                          'Henüz kampanya yok',
                          style: TextStyle(fontSize: 20, color: Colors.grey[600]),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Yeni Kampanya sekmesinden kampanya oluşturun',
                          style: TextStyle(color: Colors.grey[500]),
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    itemCount: campaigns.length,
                    itemBuilder: (context, index) {
                      final campaign = campaigns[index];
                      return _buildCampaignCard(campaign);
                    },
                  ),
          ),
        ],
      ),
    );
  }

  Widget _buildCampaignCard(Campaign campaign) {
    final stats = _campaignService.getTicketStats(campaign.id);
    final isCompleted = campaign.isCompleted;
    
    return Card(
      elevation: 4,
      margin: const EdgeInsets.only(bottom: 16),
      child: InkWell(
        onTap: () => _showCampaignDetails(campaign),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Başlık ve durum
              Row(
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          campaign.name,
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.grey[800],
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          'Hafta ${campaign.weekNumber} • ${campaign.lastDigitCount} haneli',
                          style: TextStyle(color: Colors.grey[600]),
                        ),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: BoxDecoration(
                      color: isCompleted ? Colors.red.withOpacity(0.1) : Colors.green.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    child: Text(
                      isCompleted ? '🔴 Tamamlandı' : '🟢 Aktif',
                      style: TextStyle(
                        color: isCompleted ? Colors.red[700] : Colors.green[700],
                        fontWeight: FontWeight.bold,
                        fontSize: 12,
                      ),
                    ),
                  ),
                  if (isCompleted) ...[
                    const SizedBox(width: 12),
                    ElevatedButton.icon(
                      onPressed: () async {
                        final confirm = await showDialog<bool>(
                          context: context,
                          builder: (context) => AlertDialog(
                            title: const Text('Kampanyayı Sil'),
                            content: Text('"${campaign.name}" kampanyasını silmek istediğinizden emin misiniz? Bu işlem geri alınamaz!'),
                            actions: [
                              TextButton(
                                onPressed: () => Navigator.pop(context, false),
                                child: const Text('İptal'),
                              ),
                              ElevatedButton(
                                onPressed: () => Navigator.pop(context, true),
                                style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                                child: const Text('Sil'),
                              ),
                            ],
                          ),
                        );
                        if (confirm == true) {
                          await _campaignService.deleteCampaign(campaign.id);
                          setState(() {});
                          ScaffoldMessenger.of(context).showSnackBar(
                            SnackBar(content: Text('✅ Kampanya silindi: ${campaign.name}'), backgroundColor: Colors.red),
                          );
                        }
                      },
                      icon: const Icon(Icons.delete_forever, size: 16),
                      label: const Text('Kampanyayı Sil'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red[600],
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      ),
                    ),
                  ],
                ],
              ),
              
              const SizedBox(height: 16),
              
              // İstatistikler
              Row(
                children: [
                  _buildStatChip('Toplam Bilet', '${stats['total']}', Icons.confirmation_number, Colors.blue),
                  const SizedBox(width: 12),
                  _buildStatChip('Satılan', '${stats['sold']}', Icons.sell, Colors.green),
                  const SizedBox(width: 12),
                  _buildStatChip('Müsait', '${stats['available']}', Icons.pending, Colors.orange),
                ],
              ),
              
              const SizedBox(height: 16),
              
              // İkramiye bilgisi ve aksiyonlar
              Row(
                children: [
                  const Icon(Icons.monetization_on, color: Colors.amber, size: 20),
                  const SizedBox(width: 8),
                  Text(
                    'Ana İkramiye: ${_getCampaignPrizeText(campaign)}',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.amber[800],
                    ),
                  ),
                  const Spacer(),
                  if (!isCompleted) ...[
                    ElevatedButton.icon(
                      onPressed: () => _showDrawResultDialog(campaign),
                      icon: const Icon(Icons.casino, size: 16),
                      label: const Text('Çekiliş Sonucu Gir'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.purple,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      ),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton.icon(
                      onPressed: () => _finishCampaign(campaign),
                      icon: const Icon(Icons.stop_circle, size: 16),
                      label: const Text('Kampanyayı Bitir'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      ),
                    ),
                  ],
                ],
              ),
              
              if (isCompleted && campaign.winningNumber != null) ...[
                const SizedBox(height: 12),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.purple.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.emoji_events, color: Colors.purple),
                          const SizedBox(width: 8),
                          Text(
                            'Kazanan Numara: ${campaign.winningNumber}',
                            style: TextStyle(
                              color: Colors.purple[800],
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          const Spacer(),
                          ElevatedButton.icon(
                            onPressed: () => _showWinningTickets(campaign),
                            icon: const Icon(Icons.star, size: 16),
                            label: const Text('Talihli Biletleri Göster'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.purple,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatChip(String label, String value, IconData icon, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(12),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 14, color: color),
          const SizedBox(width: 4),
          Text(
            value,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    );
  }



  void _showCustomCampaignDialog() {
    final nameController = TextEditingController();
    final ticketCountController = TextEditingController();
    final digitCountController = TextEditingController();
    final chanceCountController = TextEditingController();
    final priceController = TextEditingController();
    final prizeController = TextEditingController();
    final prizeCurrencyController = TextEditingController(text: 'TL'); // Varsayılan değer
    final upperPrizeController = TextEditingController();
    final lowerPrizeController = TextEditingController();
    
    DateTime selectedDrawDate = DateTime.now().add(const Duration(days: 7)); // Varsayılan 1 hafta sonra
    
    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Text('🛠️ Özel Kampanya Oluştur'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                TextField(
                  controller: nameController,
                  decoration: const InputDecoration(
                    labelText: 'Kampanya Adı',
                    hintText: 'Örnek: Özel Çekiliş 2024',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.campaign),
                  ),
                ),
                const SizedBox(height: 16),
                
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: ticketCountController,
                        decoration: const InputDecoration(
                          labelText: 'Bilet Sayısı',
                          hintText: '100',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: digitCountController,
                        decoration: const InputDecoration(
                          labelText: 'Hane Sayısı',
                          hintText: '3',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 16),
                
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: chanceCountController,
                        decoration: const InputDecoration(
                          labelText: 'Şans Sayısı',
                          hintText: '2',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: priceController,
                        decoration: const InputDecoration(
                          labelText: 'Bilet Fiyatı (₺)',
                          hintText: '10',
                          border: OutlineInputBorder(),
                        ),
                        keyboardType: TextInputType.number,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 16),
                
                // Çekiliş tarihi seçici
                InkWell(
                  onTap: () async {
                    final DateTime? picked = await showDatePicker(
                      context: context,
                      initialDate: selectedDrawDate,
                      firstDate: DateTime.now(),
                      lastDate: DateTime.now().add(const Duration(days: 365)),
                    );
                    if (picked != null && picked != selectedDrawDate) {
                      setState(() {
                        selectedDrawDate = picked;
                      });
                    }
                  },
                  child: Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      border: Border.all(color: Colors.grey),
                      borderRadius: BorderRadius.circular(4),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.calendar_today, color: Colors.grey[600]),
                        const SizedBox(width: 12),
                        Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(
                              'Çekiliş Tarihi',
                              style: TextStyle(fontSize: 12, color: Colors.grey[600]),
                            ),
                            Text(
                              '${selectedDrawDate.day}/${selectedDrawDate.month}/${selectedDrawDate.year}',
                              style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
                            ),
                          ],
                        ),
                        const Spacer(),
                        Icon(Icons.arrow_drop_down, color: Colors.grey[600]),
                      ],
                    ),
                  ),
                ),
                
                const SizedBox(height: 16),
                
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: prizeController,
                        decoration: const InputDecoration(
                          labelText: 'Ana İkramiye Miktarı ve Cinsi',
                          hintText: 'Örnek: 50 çeyrek altın, 10000 TL, iPhone 15, Tatil',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.card_giftcard),
                          helperText: 'Sayı, para birimi veya ürün adı girebilirsiniz',
                        ),
                        keyboardType: TextInputType.text,
                        maxLines: 2,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: prizeCurrencyController,
                        decoration: const InputDecoration(
                          labelText: 'İkramiye Cinsi (isteğe bağlı)',
                          hintText: 'TL, Altın, Tatil, Telefon...',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.category),
                        ),
                        keyboardType: TextInputType.text,
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 16),
                
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: lowerPrizeController,
                        decoration: const InputDecoration(
                          labelText: 'Bir Alt İkramiye',
                          hintText: '100 TL, Kulaklık...',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.remove_circle_outline),
                        ),
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: TextField(
                        controller: upperPrizeController,
                        decoration: const InputDecoration(
                          labelText: 'Bir Üst İkramiye',
                          hintText: '100 TL, Telefon...',
                          border: OutlineInputBorder(),
                          prefixIcon: Icon(Icons.add_circle_outline),
                        ),
                      ),
                    ),
                  ],
                ),
                
                const SizedBox(height: 16),
                
                // İkramiye cinsi örnekleri
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          const Icon(Icons.lightbulb, color: Colors.blue, size: 20),
                          const SizedBox(width: 8),
                          Text(
                            'İkramiye Cinsi Örnekleri:',
                            style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue[800]),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Wrap(
                        spacing: 8,
                        children: [
                          'TL', 'USD', 'EUR', 'Altın', 'iPhone', 'Laptop', 
                          'Araba', 'Televizyon', 'Buzdolabı', 'Tatil'
                        ].map((prize) => ActionChip(
                          label: Text(prize, style: const TextStyle(fontSize: 12)),
                          onPressed: () => prizeCurrencyController.text = prize,
                          backgroundColor: Colors.blue.withOpacity(0.1),
                        )).toList(),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('İptal'),
            ),
            ElevatedButton(
              onPressed: () async {
                // Validasyon
                if (nameController.text.isEmpty ||
                    ticketCountController.text.isEmpty ||
                    digitCountController.text.isEmpty ||
                    chanceCountController.text.isEmpty ||
                    priceController.text.isEmpty ||
                    prizeController.text.isEmpty ||
                    prizeCurrencyController.text.isEmpty) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('❌ Lütfen tüm zorunlu alanları doldurun')),
                  );
                  return;
                }

                // Bilet fiyatı noktalı format kontrolü
                final priceText = priceController.text.trim();
                final priceRegex = RegExp(r'^(\d{1,3}(\.\d{3})*)$');
                if (!priceRegex.hasMatch(priceText)) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('❌ Bilet fiyatını 1.000 gibi noktalı formatta giriniz.')),
                  );
                  return;
                }

                final ticketCount = int.tryParse(ticketCountController.text);
                final digitCount = int.tryParse(digitCountController.text);
                final chanceCount = int.tryParse(chanceCountController.text);
                // Noktalı fiyatı düz rakama çevir
                final price = double.tryParse(priceText.replaceAll('.', ''));
                
                // İkramiye tutarları artık string olarak kabul edilir (rakam, yazı, ne olursa olsun)
                final prizeText = prizeController.text.trim();
                final upperPrizeText = upperPrizeController.text.trim();
                final lowerPrizeText = lowerPrizeController.text.trim();

                if (ticketCount == null || digitCount == null || chanceCount == null || 
                    price == null ||
                    ticketCount <= 0 || digitCount <= 0 || chanceCount <= 0 ||
                    price <= 0) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('❌ Lütfen bilet sayısı, rakam sayısı, şans sayısı ve bilet fiyatı için geçerli sayılar girin')),
                  );
                  return;
                }

                // İkramiye cinsini belirle
                PrizeCurrency prizeCurrency;
                final currencyText = prizeCurrencyController.text.trim().toUpperCase();
                if (currencyText == 'TL' || currencyText == 'TÜRK LİRASI') {
                  prizeCurrency = PrizeCurrency.tl;
                } else if (currencyText == 'USD' || currencyText == 'DOLAR') {
                  prizeCurrency = PrizeCurrency.dolar;
                } else if (currencyText == 'EUR' || currencyText == 'EURO') {
                  prizeCurrency = PrizeCurrency.euro;
                } else if (currencyText == 'ALTIN' || currencyText == 'GOLD') {
                  prizeCurrency = PrizeCurrency.altin;
                } else {
                  // Diğer durumlar için özel para birimi
                  prizeCurrency = PrizeCurrency.other;
                }

                // Kampanya oluştur
                final campaign = Campaign(
                  id: 'custom_${DateTime.now().millisecondsSinceEpoch}',
                  name: nameController.text.trim(),
                  lastDigitCount: digitCount,
                  chanceCount: chanceCount,
                  ticketCount: ticketCount,
                  ticketPrice: price,
                  prizeAmount: prizeText, // Artık string olarak gönderilir
                  upperPrize: upperPrizeText,
                  lowerPrize: lowerPrizeText,
                  prizeCurrency: prizeCurrency,
                  customCurrency: prizeCurrencyController.text.trim(), // Özel ikramiye cinsi
                  weekNumber: (DateTime.now().difference(DateTime(DateTime.now().year, 1, 1)).inDays / 7).ceil(),
                  drawDate: selectedDrawDate, // Seçilen tarihi kullan
                  createdAt: DateTime.now(),
                );

                await _campaignService.createAdminCampaign(campaign);
                Navigator.pop(context);
                
                // Debug: Kampanya sayisini kontrol et
                final campaignsAfter = _campaignService.campaigns;
                print('🎯 Kampanya olusturuldu: ${campaign.name}');
                print('🎯 Toplam kampanya sayisi: ${campaignsAfter.length}');
                print('🎯 Kampanya listesi: ${campaignsAfter.map((c) => c.name).toList()}');
                
                setState(() {});

                String displayPrizeText;
                if (prizeCurrency == PrizeCurrency.other || prizeCurrencyController.text.trim().isNotEmpty) {
                  displayPrizeText = '$prizeText ${prizeCurrencyController.text}';
                } else {
                  String symbol = '₺'; // varsayılan
                  switch (prizeCurrency) {
                    case PrizeCurrency.tl:
                      symbol = '₺';
                      break;
                    case PrizeCurrency.dolar:
                      symbol = '\$';
                      break;
                    case PrizeCurrency.euro:
                      symbol = '€';
                      break;
                    case PrizeCurrency.altin:
                      symbol = '🥇';
                      break;
                    default:
                      symbol = '₺';
                  }
                  displayPrizeText = '$prizeText $symbol';
                }
                
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('✅ Özel kampanya oluşturuldu: ${campaign.name}\n📅 Çekiliş: ${selectedDrawDate.day}/${selectedDrawDate.month}/${selectedDrawDate.year}\n🏆 İkramiye: $displayPrizeText'),
                    backgroundColor: Colors.green,
                    duration: const Duration(seconds: 4),
                  ),
                );

                _showSuccessAnimation();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF6A1B9A),
                foregroundColor: Colors.white,
              ),
              child: const Text('Oluştur'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOrtakSayisi() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              '👥 Ortak Sayısı Belirle',
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            Text(
              'Kampanyada kaç ortak olacağını belirleyin:',
              style: TextStyle(fontSize: 16, color: Colors.grey[600]),
            ),
            const SizedBox(height: 32),
            
            GridView.count(
              shrinkWrap: true,
              physics: const NeverScrollableScrollPhysics(),
              crossAxisCount: 3,
              childAspectRatio: 1.2,
              crossAxisSpacing: 16,
              mainAxisSpacing: 16,
              children: [
                _buildOrtakCard('2 Ortak', '50% - 50%', 2),
                _buildOrtakCard('3 Ortak', '33% - 33% - 34%', 3),
                _buildOrtakCard('4 Ortak', '25% her biri', 4),
                _buildOrtakCard('5 Ortak', '20% her biri', 5),
                _buildOrtakCard('6 Ortak', '16.7% her biri', 6),
                _buildOrtakCard('Özel', 'Manuel paylaşım', 0),
              ],
            ),
            
            const SizedBox(height: 32),
            
            if (_selectedPartnerCount > 0) ...[
              Text(
                'Seçilen: $_selectedPartnerCount Ortak',
                style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(height: 16),
              
              // Ortak profil görünümleri
              GridView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: min(_selectedPartnerCount, 3),
                  childAspectRatio: 0.8,
                  crossAxisSpacing: 16,
                  mainAxisSpacing: 16,
                ),
                itemCount: _selectedPartnerCount,
                itemBuilder: (context, index) => _buildPartnerProfileCard(index + 1),
              ),
              
              const SizedBox(height: 16),
              
              ElevatedButton.icon(
                onPressed: _showPartnerDetails,
                icon: const Icon(Icons.group),
                label: const Text('Ortak Detaylarını Düzenle'),
                style: ElevatedButton.styleFrom(
                  backgroundColor: const Color(0xFF6A1B9A),
                  foregroundColor: Colors.white,
                  minimumSize: const Size(double.infinity, 50),
                ),
              ),
            ],
            
            const SizedBox(height: 100), // Alt boşluk
          ],
        ),
      ),
    );
  }

  int _selectedPartnerCount = 0;

  Widget _buildOrtakCard(String title, String description, int count) {
    final isSelected = _selectedPartnerCount == count;
    
    return Card(
      elevation: isSelected ? 8 : 4,
      child: InkWell(
        onTap: () => _selectPartnerCount(count),
        borderRadius: BorderRadius.circular(8),
        child: Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(8),
            color: isSelected ? const Color(0xFF6A1B9A).withOpacity(0.1) : null,
          ),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  count == 0 ? Icons.settings : Icons.group,
                  size: 32,
                  color: isSelected ? const Color(0xFF6A1B9A) : Colors.grey[600],
                ),
                const SizedBox(height: 8),
                Text(
                  title,
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: isSelected ? const Color(0xFF6A1B9A) : Colors.grey[800],
                  ),
                ),
                const SizedBox(height: 4),
                Text(
                  description,
                  style: TextStyle(
                    fontSize: 10,
                    color: Colors.grey[600],
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _selectPartnerCount(int count) {
    setState(() {
      _selectedPartnerCount = count;
    });
    
    if (count == 0) {
      _showCustomPartnerDialog();
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('✅ $count ortak seçildi'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  void _showCustomPartnerDialog() {
    final partnerCountController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🛠️ Özel Ortak Ayarla'),
        content: TextField(
          controller: partnerCountController,
          decoration: const InputDecoration(
            labelText: 'Ortak Sayısı',
            hintText: 'Örnek: 3',
            border: OutlineInputBorder(),
            prefixIcon: Icon(Icons.group),
          ),
          keyboardType: TextInputType.number,
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final count = int.tryParse(partnerCountController.text);
              if (count != null && count > 0 && count <= 10) {
                Navigator.pop(context);
                _selectPartnerCount(count);
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ 1-10 arası geçerli bir sayı girin')),
                );
              }
            },
            child: const Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  void _showPartnerDetails() {
    if (_selectedPartnerCount <= 0) return;
    
    // Mevcut ortakları al veya yeni oluştur
    List<Partner> partners = [];
    if (_campaignService.campaigns.isNotEmpty) {
      partners = List.from(_campaignService.campaigns.last.partners);
    }
    
    // Eksik ortakları tamamla
    while (partners.length < _selectedPartnerCount) {
      partners.add(Partner(
        id: 'partner_${partners.length + 1}',
        name: '',
        phone: '',
        percentage: 0.0,
      ));
    }
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('👥 Ortak Detayları ($_selectedPartnerCount Ortak)'),
        content: SizedBox(
          width: double.maxFinite,
          height: 400,
          child: SingleChildScrollView(
            child: Column(
              children: [
                for (int i = 0; i < _selectedPartnerCount; i++) ...[
                  Card(
                    child: Padding(
                      padding: const EdgeInsets.all(12),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Ortak ${i + 1}',
                            style: const TextStyle(fontWeight: FontWeight.bold),
                          ),
                          const SizedBox(height: 8),
                          
                          TextField(
                            decoration: const InputDecoration(
                              labelText: 'Ad Soyad',
                              border: OutlineInputBorder(),
                              isDense: true,
                            ),
                            onChanged: (value) => partners[i] = partners[i].copyWith(name: value),
                          ),
                          
                          const SizedBox(height: 8),
                          
                          Row(
                            children: [
                              Expanded(
                                child: TextField(
                                  decoration: const InputDecoration(
                                    labelText: 'Telefon',
                                    border: OutlineInputBorder(),
                                    isDense: true,
                                  ),
                                  onChanged: (value) => partners[i] = partners[i].copyWith(phone: value),
                                ),
                              ),
                              const SizedBox(width: 8),
                              Expanded(
                                child: TextField(
                                  decoration: const InputDecoration(
                                    labelText: 'Pay (%)',
                                    border: OutlineInputBorder(),
                                    isDense: true,
                                    suffixText: '%',
                                  ),
                                  keyboardType: TextInputType.number,
                                  onChanged: (value) {
                                    final percentage = double.tryParse(value) ?? 0.0;
                                    partners[i] = partners[i].copyWith(percentage: percentage);
                                  },
                                ),
                              ),
                            ],
                          ),
                        ],
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                ],
                
                // Toplam yüzde göstergesi
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Row(
                    children: [
                      const Icon(Icons.info, color: Colors.blue),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'Toplam pay: ${partners.fold(0.0, (sum, p) => sum + p.percentage).toStringAsFixed(1)}%\n'
                          'Kalan admin payı: ${(100 - partners.fold(0.0, (sum, p) => sum + p.percentage)).toStringAsFixed(1)}%',
                          style: TextStyle(color: Colors.blue[700]),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final totalPercentage = partners.fold(0.0, (sum, p) => sum + p.percentage);
              if (totalPercentage > 100) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Toplam pay 100%\'ü geçemez')),
                );
                return;
              }
              
              // Ortakları kaydet
              _savePartners(partners);
              Navigator.pop(context);
              
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('✅ Ortak detayları kaydedildi'),
                  backgroundColor: Colors.green,
                ),
              );
              
              _showSuccessAnimation();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
            child: const Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  List<Partner> _currentPartners = [];

  void _savePartners(List<Partner> partners) {
    // Ortakları gerçekten kaydet
    _currentPartners = List.from(partners);
    
    // Kampanyalara da kaydet
    for (var campaign in _campaignService.campaigns) {
      // Her kampanyaya ortak bilgilerini kaydet
      print('Kampanya ${campaign.name} için ${partners.length} ortak kaydedildi');
    }
    
    setState(() {});
    
    print('Kaydedilen ortaklar:');
    for (int i = 0; i < _currentPartners.length; i++) {
      print('Ortak ${i+1}: ${_currentPartners[i].name} - %${_currentPartners[i].percentage}');
    }
  }

  Widget _buildPartnerProfileCard(int partnerNumber) {
    // Gerçek partner bilgilerini al
    final partnerIndex = partnerNumber - 1;
    final partnerName = _currentPartners.length > partnerIndex && _currentPartners[partnerIndex].name.isNotEmpty 
        ? _currentPartners[partnerIndex].name 
        : 'Ortak $partnerNumber';
    final percentage = _currentPartners.length > partnerIndex 
        ? _currentPartners[partnerIndex].percentage.toStringAsFixed(1)
        : '0.0';
    final hasData = _currentPartners.length > partnerIndex && _currentPartners[partnerIndex].name.isNotEmpty;
    
    return Card(
      elevation: 4,
      child: InkWell(
        onTap: () => _showPartnerInfo(partnerNumber),
        borderRadius: BorderRadius.circular(8),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Profil resmi
              CircleAvatar(
                radius: 30,
                backgroundColor: hasData ? Colors.green.withOpacity(0.1) : Colors.grey[200],
                child: hasData
                    ? const Icon(
                        Icons.person,
                        size: 30,
                        color: Colors.green,
                      )
                    : Text(
                        'O$partnerNumber',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.grey[600],
                        ),
                      ),
              ),
              const SizedBox(height: 12),
              
              // İsim
              Text(
                partnerName,
                style: TextStyle(
                  fontSize: 14,
                  fontWeight: FontWeight.bold,
                  color: hasData ? Colors.green[800] : Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              
              const SizedBox(height: 8),
              
              // Pay yüzdesi
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: hasData 
                      ? Colors.green.withOpacity(0.1)
                      : const Color(0xFF6A1B9A).withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  '%$percentage',
                  style: TextStyle(
                    fontSize: 12,
                    fontWeight: FontWeight.bold,
                    color: hasData ? Colors.green : const Color(0xFF6A1B9A),
                  ),
                ),
              ),
              
              const SizedBox(height: 8),
              
              // Durum ikonu
              Icon(
                hasData ? Icons.check_circle : Icons.edit,
                size: 16,
                color: hasData ? Colors.green : Colors.grey[400],
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _showPartnerInfo(int partnerNumber) {
    final partnerIndex = partnerNumber - 1;
    final hasData = _currentPartners.length > partnerIndex && _currentPartners[partnerIndex].name.isNotEmpty;
    
    final name = hasData ? _currentPartners[partnerIndex].name : 'Henüz belirlenmedi';
    final phone = hasData ? _currentPartners[partnerIndex].phone : 'Henüz belirlenmedi';
    final percentage = hasData ? '%${_currentPartners[partnerIndex].percentage.toStringAsFixed(1)}' : 'Henüz belirlenmedi';
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('👤 Ortak $partnerNumber Bilgileri'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            _buildPartnerInfoRow('Ad Soyad:', name),
            _buildPartnerInfoRow('Telefon:', phone),
            _buildPartnerInfoRow('Pay Oranı:', percentage),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: hasData ? Colors.green.withOpacity(0.1) : Colors.orange.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Icon(hasData ? Icons.check_circle : Icons.info, 
                       color: hasData ? Colors.green : Colors.orange),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      hasData 
                          ? 'Ortak bilgileri başarıyla kaydedildi!'
                          : 'Ortak detaylarını düzenlemek için "Ortak Detaylarını Düzenle" butonunu kullanın.',
                      style: TextStyle(color: hasData ? Colors.green[800] : Colors.orange[800]),
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Kapat'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _showPartnerDetails();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: const Color(0xFF6A1B9A),
              foregroundColor: Colors.white,
            ),
            child: const Text('Düzenle'),
          ),
        ],
      ),
    );
  }

  Widget _buildPartnerInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 80,
            child: Text(
              label,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.grey[600],
              ),
            ),
          ),
          Expanded(
            child: Text(value),
          ),
        ],
      ),
    );
  }

  Widget _buildDilekSikayet() {
    final complaints = _complaintService.allComplaints;
    final selectedCount = _selectedComplaintIds.length;
    
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          // Başlık ve kontrol butonları
          Row(
            children: [
              const Text('📝 Dilek Şikayet Kutusu', 
                style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
              const Spacer(),
              if (!_isSelectionMode) ...[
                ElevatedButton.icon(
                  onPressed: complaints.isEmpty ? null : () {
                    setState(() {
                      _isSelectionMode = true;
                      _selectedComplaintIds.clear();
                    });
                  },
                  icon: const Icon(Icons.checklist),
                  label: const Text('Seç'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                  ),
                ),
              ] else ...[
                // Seçim modunda kontrol butonları
                Row(
                  children: [
                    Text('$selectedCount/${complaints.length} seçili', 
                      style: const TextStyle(fontWeight: FontWeight.bold)),
                    const SizedBox(width: 12),
                    ElevatedButton.icon(
                      onPressed: () {
                        setState(() {
                          if (_selectedComplaintIds.length == complaints.length) {
                            _selectedComplaintIds.clear();
                          } else {
                            _selectedComplaintIds = complaints.map((c) => c.id).toSet();
                          }
                        });
                      },
                      icon: Icon(_selectedComplaintIds.length == complaints.length 
                        ? Icons.deselect : Icons.select_all),
                      label: Text(_selectedComplaintIds.length == complaints.length 
                        ? 'Hiçbirini Seçme' : 'Tümünü Seç'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange,
                        foregroundColor: Colors.white,
                      ),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton.icon(
                      onPressed: selectedCount > 0 ? _deleteSelectedComplaints : null,
                      icon: const Icon(Icons.delete),
                      label: Text('Sil ($selectedCount)'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.red,
                        foregroundColor: Colors.white,
                      ),
                    ),
                    const SizedBox(width: 8),
                    ElevatedButton.icon(
                      onPressed: () {
                        setState(() {
                          _isSelectionMode = false;
                          _selectedComplaintIds.clear();
                        });
                      },
                      icon: const Icon(Icons.close),
                      label: const Text('İptal'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.grey,
                        foregroundColor: Colors.white,
                      ),
                    ),
                  ],
                ),
              ],
            ],
          ),
          const SizedBox(height: 16),
          
          // Şikayet listesi
          Expanded(
            child: complaints.isEmpty 
              ? const Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.feedback_outlined, size: 80, color: Colors.grey),
                      SizedBox(height: 16),
                      Text('Henüz şikayet bulunmuyor', 
                        style: TextStyle(fontSize: 18, color: Colors.grey)),
                    ],
                  ),
                )
              : ListView.builder(
                  itemCount: complaints.length,
                  itemBuilder: (context, index) {
                    final complaint = complaints[index];
                    final isSelected = _selectedComplaintIds.contains(complaint.id);
                    
                    return Card(
                      elevation: isSelected ? 8 : 2,
                      color: isSelected ? Colors.blue.withOpacity(0.1) : null,
                      child: ListTile(
                        leading: _isSelectionMode 
                          ? Checkbox(
                              value: isSelected,
                              onChanged: (bool? value) {
                                setState(() {
                                  if (value == true) {
                                    _selectedComplaintIds.add(complaint.id);
                                  } else {
                                    _selectedComplaintIds.remove(complaint.id);
                                  }
                                });
                              },
                            )
                          : Text(complaint.statusEmoji, style: const TextStyle(fontSize: 24)),
                        title: Text(complaint.senderName,
                          style: TextStyle(
                            fontWeight: isSelected ? FontWeight.bold : FontWeight.normal,
                          )),
                        subtitle: Text(complaint.message,
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                          style: TextStyle(
                            color: isSelected ? Colors.blue[700] : null,
                          )),
                        trailing: _isSelectionMode 
                          ? null 
                          : Text(complaint.statusText),
                        onTap: _isSelectionMode 
                          ? () {
                              setState(() {
                                if (isSelected) {
                                  _selectedComplaintIds.remove(complaint.id);
                                } else {
                                  _selectedComplaintIds.add(complaint.id);
                                }
                              });
                            }
                          : () => _showComplaintDetails(complaint),
                        onLongPress: !_isSelectionMode 
                          ? () {
                              setState(() {
                                _isSelectionMode = true;
                                _selectedComplaintIds.add(complaint.id);
                              });
                            }
                          : null,
                      ),
                    );
                  },
                ),
          ),
        ],
      ),
    );
  }

  Widget _buildSearchResults() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text('🔍 Arama Sonuçları (${_searchResults.length})', 
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          Expanded(
            child: ListView.builder(
              itemCount: _searchResults.length,
              itemBuilder: (context, index) {
                final ticket = _searchResults[index];
                return Card(
                  child: ListTile(
                    leading: Text(ticket.statusEmoji, style: const TextStyle(fontSize: 24)),
                    title: Text(ticket.numbersFormatted),
                    subtitle: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        if (ticket.buyerName != null) Text('Alıcı: ${ticket.buyerName}'),
                        if (ticket.buyerPhone != null) Text('Telefon: ${ticket.buyerPhone}'),
                        Text('Durum: ${ticket.statusText}'),
                      ],
                    ),
                    trailing: Text('${ticket.price} ₺'),
                  ),
                );
              },
            ),
          ),
        ],
      ),
    );
  }



  Widget _buildPlaceholderPage() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          const Icon(Icons.construction, size: 64, color: Colors.grey),
          const SizedBox(height: 16),
          Text(
            'Bu sayfa yakında eklenecek',
            style: TextStyle(fontSize: 18, color: Colors.grey[600]),
          ),
        ],
      ),
    );
  }

  // Profil resmi seçenekleri
  void _showProfileImageOptions() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('📷 Profil Resmi'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            ListTile(
              leading: const Icon(Icons.photo_library),
              title: const Text('Galeriden Seç'),
              onTap: () {
                Navigator.pop(context);
                _selectImageFromGallery();
              },
            ),
            ListTile(
              leading: const Icon(Icons.camera_alt),
              title: const Text('Fotoğraf Çek'),
              onTap: () {
                Navigator.pop(context);
                _takePicture();
              },
            ),
            if (_authService.currentUser?.profileImage != null)
              ListTile(
                leading: const Icon(Icons.delete, color: Colors.red),
                title: const Text('Resmi Kaldır'),
                onTap: () {
                  Navigator.pop(context);
                  _removeProfileImage();
                },
              ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
        ],
      ),
    );
  }

  void _selectImageFromGallery() async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: ImageSource.gallery,
        maxWidth: 512,
        maxHeight: 512,
        imageQuality: 85,
      );
      
      if (image != null) {
        // Gerçek uygulamada burada dosyayı sunucuya yüklenir
        // Şimdilik dosya yolunu simüle ediyoruz
        _updateProfileImage('file://${image.path}');
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('📷 Fotoğraf seçildi: ${image.name}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('❌ Fotoğraf seçilemedi: $e')),
      );
    }
  }

  void _takePicture() async {
    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: ImageSource.camera,
        maxWidth: 512,
        maxHeight: 512,
        imageQuality: 85,
      );
      
      if (image != null) {
        // Gerçek uygulamada burada dosyayı sunucuya yüklenir
        // Şimdilik dosya yolunu simüle ediyoruz
        _updateProfileImage('file://${image.path}');
        
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('📸 Fotoğraf çekildi: ${image.name}')),
        );
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('❌ Fotoğraf çekilemedi: $e')),
      );
    }
  }

  void _removeProfileImage() {
    _updateProfileImage(null);
  }

  void _updateProfileImage(String? imageUrl) async {
    final success = await _authService.updateProfile(
      name: _authService.currentUser!.name,
      phone: _authService.currentUser!.phone,
      email: _authService.currentUser!.email,
      profileImage: imageUrl,
    );

    if (success) {
      setState(() {});
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('✅ Profil resmi güncellendi'),
          backgroundColor: Colors.green,
        ),
      );

    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('❌ Profil resmi güncellenemedi'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  // Profil düzenleme
  void _showEditProfileDialog() {
    final user = _authService.currentUser!;
    final nameController = TextEditingController(text: user.name);
    final phoneController = TextEditingController(text: user.phone ?? '');
    final emailController = TextEditingController(text: user.email ?? '');

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('✏️ Profili Düzenle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: nameController,
              decoration: const InputDecoration(
                labelText: 'Ad Soyad',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: const InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.phone,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: emailController,
              decoration: const InputDecoration(
                labelText: 'E-posta',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.emailAddress,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              final success = await _authService.updateProfile(
                name: nameController.text,
                phone: phoneController.text.isEmpty ? null : phoneController.text,
                email: emailController.text.isEmpty ? null : emailController.text,
              );

              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('✅ Profil güncellendi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Güncelleme başarısız')),
                );
              }
            },
            child: const Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  // Şifre değiştirme
  void _showChangePasswordDialog() {
    final oldPasswordController = TextEditingController();
    final newPasswordController = TextEditingController();
    final confirmPasswordController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🔒 Şifre Değiştir'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: oldPasswordController,
              decoration: const InputDecoration(
                labelText: 'Mevcut Şifre',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.lock_outline),
              ),
              obscureText: true,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: newPasswordController,
              decoration: const InputDecoration(
                labelText: 'Yeni Şifre',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.lock),
              ),
              obscureText: true,
            ),
            const SizedBox(height: 16),
            TextField(
              controller: confirmPasswordController,
              decoration: const InputDecoration(
                labelText: 'Yeni Şifre (Tekrar)',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.lock),
              ),
              obscureText: true,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (newPasswordController.text != confirmPasswordController.text) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Yeni şifreler eşleşmiyor')),
                );
                return;
              }

              if (newPasswordController.text.length < 6) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Şifre en az 6 karakter olmalı')),
                );
                return;
              }

              final success = await _authService.changePassword(
                oldPasswordController.text,
                newPasswordController.text,
              );

              Navigator.pop(context);

              if (success) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('✅ Şifre başarıyla değiştirildi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Mevcut şifre hatalı')),
                );
              }
            },
            child: const Text('Değiştir'),
          ),
        ],
      ),
    );
  }

  // Yardımcı metodlar
  void _searchTickets(String query) {
    if (query.isEmpty) {
      setState(() {
        _searchResults = [];
      });
      return;
    }

    setState(() {
      _searchResults = _ticketService.searchTicketsByName(query);
    });
  }

  void _logout() async {
    await _authService.logout();
    Navigator.of(context).pushReplacement(
      MaterialPageRoute(builder: (context) => const LoginScreen()),
    );
  }

  void _showNotifications() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🔔 Bildirimler'),
        content: SizedBox(
          width: double.maxFinite,
          height: 300,
          child: _ticketService.pendingNotifications.isEmpty
              ? const Center(child: Text('Yeni bildirim yok'))
              : ListView.builder(
                  itemCount: _ticketService.pendingNotifications.length,
                  itemBuilder: (context, index) {
                    final notification = _ticketService.pendingNotifications[index];
                    return Card(
                      child: ListTile(
                        leading: Text(notification.typeEmoji),
                        title: Text(notification.title),
                        subtitle: Text(notification.message),
                        trailing: Row(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            ElevatedButton(
                              onPressed: () => _approveTicketRequest(notification),
                              child: const Text('✅'),
                            ),
                            const SizedBox(width: 8),
                            ElevatedButton(
                              onPressed: () => _rejectTicketRequest(notification),
                              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
                              child: const Text('❌'),
                            ),
                          ],
                        ),
                      ),
                    );
                  },
                ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Kapat'),
          ),
        ],
      ),
    );
  }

  void _approveTicketRequest(notification) {
    _ticketService.processTicketRequest(
      notificationId: notification.id,
      approved: true,
      buyerName: notification.fromUserName,
      buyerPhone: '',
    );
    setState(() {});
    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('✅ Bilet talebi onaylandı')),
    );
  }

  void _rejectTicketRequest(notification) {
    _ticketService.processTicketRequest(
      notificationId: notification.id,
      approved: false,
      buyerName: '',
      buyerPhone: '',
    );
    setState(() {});
    Navigator.pop(context);
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(content: Text('❌ Bilet talebi reddedildi')),
    );
  }

  void _addPersonDialog() {
    final firstNameController = TextEditingController();
    final lastNameController = TextEditingController();
    final phoneController = TextEditingController();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('👤 Yeni Kişi Ekle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: firstNameController,
              decoration: const InputDecoration(
                labelText: 'Ad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: lastNameController,
              decoration: const InputDecoration(
                labelText: 'Soyad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person_outline),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: const InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.phone),
                hintText: '05XXXXXXXXX',
              ),
              keyboardType: TextInputType.phone,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (firstNameController.text.isEmpty || 
                  lastNameController.text.isEmpty || 
                  phoneController.text.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Lütfen tüm alanları doldurun')),
                );
                return;
              }

              final person = Person(
                id: 'person_${DateTime.now().millisecondsSinceEpoch}',
                firstName: firstNameController.text.trim(),
                lastName: lastNameController.text.trim(),
                phone: phoneController.text.trim(),
                createdAt: DateTime.now(),
              );

              final success = await _personService.addPerson(person);
              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('✅ ${person.fullName} başarıyla eklendi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Bu telefon numarası zaten kayıtlı')),
                );
              }
            },
            child: const Text('Ekle'),
          ),
        ],
      ),
    );
  }

  void _importFromContacts() async {
    // Yükleniyor dialog'unu göster
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const AlertDialog(
        content: Row(
          children: [
            CircularProgressIndicator(),
            SizedBox(width: 16),
            Text('Telefon rehberinden kişiler yükleniyor...'),
          ],
        ),
      ),
    );

    try {
      final newContacts = await _personService.importFromContacts();
      Navigator.pop(context); // Yükleniyor dialog'unu kapat
      
      setState(() {});
      
      if (newContacts.isEmpty) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('📱 Telefon rehberinden yeni kişi bulunamadı\n'
                        'Not: Bu simülasyon sürümünde telefon rehberi erişimi kısıtlıdır.'),
            duration: Duration(seconds: 4),
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('✅ ${newContacts.length} kişi rehberden eklendi')),
        );
      }
    } catch (e) {
      Navigator.pop(context); // Yükleniyor dialog'unu kapat
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('❌ Telefon rehberine erişim hatası')),
      );
    }
  }

  void _handlePersonAction(Person person, String action) {
    if (action == 'edit') {
      _showEditPersonDialog(person);
    } else if (action == 'delete') {
      _showDeletePersonDialog(person);
    }
  }

  void _showEditPersonDialog(Person person) {
    final firstNameController = TextEditingController(text: person.firstName);
    final lastNameController = TextEditingController(text: person.lastName);
    final phoneController = TextEditingController(text: person.phone);
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('✏️ Kişi Düzenle'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: firstNameController,
              decoration: const InputDecoration(
                labelText: 'Ad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: lastNameController,
              decoration: const InputDecoration(
                labelText: 'Soyad',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.person_outline),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: const InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.phone),
              ),
              keyboardType: TextInputType.phone,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              if (firstNameController.text.isEmpty || 
                  lastNameController.text.isEmpty || 
                  phoneController.text.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Lütfen tüm alanları doldurun')),
                );
                return;
              }

              final updatedPerson = person.copyWith(
                firstName: firstNameController.text.trim(),
                lastName: lastNameController.text.trim(),
                phone: phoneController.text.trim(),
              );

              final success = await _personService.updatePerson(updatedPerson);
              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('✅ ${updatedPerson.fullName} güncellendi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Güncelleme başarısız')),
                );
              }
            },
            child: const Text('Güncelle'),
          ),
        ],
      ),
    );
  }

  void _showDeletePersonDialog(Person person) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🗑️ Kişi Sil'),
        content: Text('${person.fullName} adlı kişiyi silmek istediğinizden emin misiniz?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              final success = await _personService.deletePerson(person.id);
              Navigator.pop(context);

              if (success) {
                setState(() {});
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('✅ ${person.fullName} silindi')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Silme işlemi başarısız')),
                );
              }
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Sil', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  void _showComplaintDetails(complaint) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('📝 Şikayet Detayı'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Gönderen: ${complaint.senderName}'),
            if (complaint.senderPhone != null) Text('Telefon: ${complaint.senderPhone}'),
            const SizedBox(height: 16),
            const Text('Mesaj:'),
            Text(complaint.message),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Kapat'),
          ),
          ElevatedButton(
            onPressed: () {
              _complaintService.markAsResolved(complaintId: complaint.id);
              setState(() {});
              Navigator.pop(context);
            },
            child: const Text('Çözüldü İşaretle'),
          ),
        ],
      ),
    );
  }

  // Liste Yayınla sayfası
  Widget _buildListeYayinla() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Durum kartı
          Card(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: Row(
                children: [
                  Icon(
                    _campaignService.isListPublished ? Icons.visibility : Icons.visibility_off,
                    size: 32,
                    color: _campaignService.isListPublished ? Colors.green : Colors.grey,
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Liste Durumu',
                          style: TextStyle(fontSize: 16, color: Colors.grey[600]),
                        ),
                        Text(
                          _campaignService.isListPublished ? 'Yayınlandı' : 'Yayınlanmadı',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: _campaignService.isListPublished ? Colors.green : Colors.grey[800],
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          
          const SizedBox(height: 24),
          
          // Açıklama
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.blue.withOpacity(0.3)),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    const Icon(Icons.info, color: Colors.blue),
                    const SizedBox(width: 8),
                    Text(
                      'Liste Yayınlama Hakkında',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.blue[800],
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 12),
                Text(
                  '• Liste yayınlandığında tüm üyeler biletleri görebilir\n'
                  '• Üyeler kendi panellerindeki "Liste" butonunu kullanabilir\n'
                  '• Biletler karışık sırada gösterilir\n'
                  '• Renk kodları: Müsait (gri), Satıldı (turuncu), Ödendi (yeşil), İptal (kırmızı)',
                  style: TextStyle(color: Colors.blue[700]),
                ),
              ],
            ),
          ),
          
          const SizedBox(height: 32),
          
          // Ana butonlar
          Row(
            children: [
              if (!_campaignService.isListPublished) ...[
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () async {
                      await _campaignService.publishList();
                      setState(() {});
                      
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('✅ Liste başarıyla yayınlandı! Üyeler artık biletleri görebilir.'),
                          backgroundColor: Colors.green,
                          duration: Duration(seconds: 3),
                        ),
                      );
                    },
                    icon: const Icon(Icons.publish, size: 24),
                    label: const Text(
                      'LİSTEYİ YAYINLA',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.green,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
                ),
              ] else ...[
                Expanded(
                  child: ElevatedButton.icon(
                    onPressed: () async {
                      await _campaignService.unpublishList();
                      setState(() {});
                      
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('✅ Liste yayından kaldırıldı!'),
                          backgroundColor: Colors.orange,
                          duration: Duration(seconds: 2),
                        ),
                      );
                    },
                    icon: const Icon(Icons.visibility_off, size: 24),
                    label: const Text(
                      'LİSTEYİ GİZLE',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.orange,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(8),
                      ),
                    ),
                  ),
                ),
              ],
            ],
          ),
          
          const SizedBox(height: 24),
          
          // İstatistikler
          if (_campaignService.isListPublished) ...[
            const Text(
              'Yayınlanan Liste İstatistikleri',
              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
                          Row(
                children: [
                  Expanded(
                    child: _buildStatCard(
                      'Toplam Bilet',
                      '${_sampleTickets.length}', // Admin'in oluşturduğu gerçek sayı
                      Icons.confirmation_number,
                      Colors.blue,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: _buildStatCard(
                      'Müsait Bilet',
                      '${_sampleTickets.where((t) => t.status == TicketStatus.available).length}',
                      Icons.sell_outlined,
                      Colors.grey,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: _buildStatCard(
                      'Sistem Toplam',
                      '${_campaignService.getAllSystemTickets().length}', // Debug için
                      Icons.bug_report,
                      Colors.red,
                    ),
                  ),
                ],
              ),
          ],
        ],
      ),
    );
  }

  void _showCampaignDetails(Campaign campaign) {
    final stats = _campaignService.getTicketStats(campaign.id);
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('🎯 ${campaign.name}'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildDetailRow('📊 Durum', campaign.isCompleted ? 'Tamamlandı' : 'Aktif'),
              _buildDetailRow('📅 Hafta', 'Hafta ${campaign.weekNumber}'),
              _buildDetailRow('🔢 Hane Sayısı', '${campaign.lastDigitCount} haneli'),
              _buildDetailRow('🎲 Şans Sayısı', '${campaign.chanceCount} şans'),
              _buildDetailRow('🎫 Toplam Bilet', '${stats['total']}'),
              _buildDetailRow('💰 Bilet Fiyatı', '${campaign.ticketPrice.toStringAsFixed(0)} ₺'),
              _buildDetailRow('🏆 Ana İkramiye', campaign.prizeAmount),
              _buildDetailRow('⬆️ Bir Üst İkramiye', campaign.upperPrize),
              _buildDetailRow('⬇️ Bir Alt İkramiye', campaign.lowerPrize),
              
              const SizedBox(height: 16),
              
              const Text('📈 Satış İstatistikleri:', style: TextStyle(fontWeight: FontWeight.bold)),
              const SizedBox(height: 8),
              _buildDetailRow('✅ Satılan Bilet', '${stats['sold']}'),
              _buildDetailRow('💵 Ödenen Bilet', '${stats['paid']}'),
              _buildDetailRow('⏳ Müsait Bilet', '${stats['available']}'),
              _buildDetailRow('❌ İptal Edilen', '${stats['cancelled']}'),
              
              if (campaign.isCompleted && campaign.winningNumber != null) ...[
                const SizedBox(height: 16),
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.purple.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('🎉 Çekiliş Sonucu:', style: TextStyle(fontWeight: FontWeight.bold)),
                      const SizedBox(height: 8),
                      Text('Kazanan Numara: ${campaign.winningNumber}', 
                           style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.purple)),
                      Text('Kazanan Bilet: ${stats['winners']} adet'),
                    ],
                  ),
                ),
              ],
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Kapat'),
          ),
          if (!campaign.isCompleted)
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                _finishCampaign(campaign);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
              child: const Text('Kampanyayı Bitir'),
            ),
        ],
      ),
    );
  }

  Widget _buildDetailRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          SizedBox(
            width: 140,
            child: Text(label, style: const TextStyle(fontWeight: FontWeight.w500)),
          ),
          Expanded(child: Text(value)),
        ],
      ),
    );
  }

  Widget _buildTicketListItem(Ticket ticket) {
    Color backgroundColor;
    Color textColor = Colors.black;
    String statusText;
    bool isClickable = true; // Tüm biletler tıklanabilir

    // Durum ve renk belirleme
    switch (ticket.status) {
      case TicketStatus.available:
        backgroundColor = Colors.grey[100]!;
        statusText = 'Müsait';
        break;
      case TicketStatus.sold:
        // Satılan ödenmeyen: yarısı yeşil yarısı kırmızı
        backgroundColor = Colors.orange[100]!;
        statusText = 'Ödenmedi';
        break;
      case TicketStatus.unpaid:
        backgroundColor = Colors.orange[100]!;
        statusText = 'Ödenmedi';
        break;
      case TicketStatus.paid:
        backgroundColor = Colors.green[300]!;
        statusText = 'Ödendi';
        break;
      case TicketStatus.cancelled:
        backgroundColor = Colors.red[300]!;
        statusText = 'İptal Edildi';
        textColor = Colors.white;
        break;
      case TicketStatus.winner:
        backgroundColor = Colors.purple[300]!;
        statusText = 'Kazanan';
        break;
    }

    return Card(
      margin: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      child: InkWell(
        onTap: isClickable ? () => _showTicketStatusDialog(ticket) : null,
        child: Container(
          decoration: BoxDecoration(
            color: backgroundColor,
            borderRadius: BorderRadius.circular(4),
            // Satılan ödenmemiş için özel gradient
            gradient: ticket.status == TicketStatus.sold
                ? LinearGradient(
                    colors: [Colors.green[200]!, Colors.red[200]!],
                    stops: const [0.5, 0.5],
                    begin: Alignment.centerLeft,
                    end: Alignment.centerRight,
                  )
                : null,
          ),
          child: ListTile(
            leading: Container(
              width: 60,
              height: 60,
              decoration: BoxDecoration(
                color: ticket.status == TicketStatus.available
                    ? Colors.grey
                    : ticket.status == TicketStatus.sold
                        ? Colors.orange
                        : ticket.status == TicketStatus.paid
                            ? Colors.green
                            : Colors.red,
                shape: BoxShape.circle,
              ),
              child: Center(
                child: Text(
                  ticket.numbersFormatted,
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.bold,
                    fontSize: 10,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ),
            title: Text(
              ticket.numbersFormatted,
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: textColor,
                fontSize: 18,
              ),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Durum: $statusText',
                  style: TextStyle(color: textColor.withOpacity(0.8)),
                ),
                if (ticket.buyerName != null)
                  Text(
                    'Alıcı: ${ticket.buyerName}',
                    style: TextStyle(color: textColor.withOpacity(0.8)),
                  ),
                if (ticket.buyerPhone != null)
                  Text(
                    'Telefon: ${ticket.buyerPhone}',
                    style: TextStyle(color: textColor.withOpacity(0.8)),
                  ),
              ],
            ),
            trailing: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  '${ticket.price.toStringAsFixed(0)} ₺',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    fontSize: 16,
                    color: textColor,
                  ),
                ),
                if (isClickable)
                  Icon(
                    Icons.edit,
                    size: 16,
                    color: textColor.withOpacity(0.6),
                  ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  void _showTicketStatusDialog(Ticket ticket) {
    final nameController = TextEditingController(text: ticket.buyerName ?? '');
    final phoneController = TextEditingController(text: ticket.buyerPhone ?? '');
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            const Text('🎫 Bilet Durumu Güncelle'),
            IconButton(
              onPressed: () => _printTicket(ticket),
              icon: const Icon(Icons.print),
              tooltip: 'Bileti Yazdır',
            ),
          ],
        ),
        content: SingleChildScrollView(
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Bilet No: ${ticket.id}', 
                   style: const TextStyle(fontSize: 14, fontWeight: FontWeight.w500)),
              const SizedBox(height: 8),
              Text('Numaralar: ${ticket.numbersFormatted}', 
                   style: const TextStyle(fontSize: 16, fontWeight: FontWeight.bold)),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: _getStatusColor(ticket.status),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(_getStatusIcon(ticket.status), color: Colors.white),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        'Mevcut Durum: ${_getStatusText(ticket.status)}',
                        style: const TextStyle(color: Colors.white, fontWeight: FontWeight.bold),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 24),
              
              // Ad Soyad alanı (isteğe bağlı)
              TextField(
                controller: nameController,
                decoration: const InputDecoration(
                  labelText: 'Ad Soyad (İsteğe bağlı)',
                  hintText: 'Müşteri adını girebilirsiniz',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person_outline),
                ),
              ),
              const SizedBox(height: 16),
              
              // Telefon alanı (isteğe bağlı)
              TextField(
                controller: phoneController,
                decoration: const InputDecoration(
                  labelText: 'Telefon (İsteğe bağlı)',
                  hintText: '05XXXXXXXXX',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.phone_outlined),
                ),
                keyboardType: TextInputType.phone,
              ),
              const SizedBox(height: 24),
              
              const Text('Yeni durum seçin:', style: TextStyle(fontWeight: FontWeight.bold)),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          // Müsait durumu için buton
          if (ticket.status != TicketStatus.available)
            ElevatedButton(
              onPressed: () {
                _updateTicketStatusWithInfo(ticket, TicketStatus.available, nameController.text.trim(), phoneController.text.trim());
                Navigator.pop(context);
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.grey),
              child: const Text('Müsait'),
            ),
          // Satıldı (Ödenmedi) butonu
          ElevatedButton(
            onPressed: () {
              // Ödenmedi durumu için isim zorunlu
              if (nameController.text.trim().isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('❌ Borçlu işaretlemek için en az isim bilgisi gereklidir'),
                    backgroundColor: Colors.red,
                  ),
                );
                return;
              }
              _updateTicketStatusWithInfo(ticket, TicketStatus.sold, nameController.text.trim(), phoneController.text.trim());
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
            child: const Text('Ödenmedi'),
          ),
          // Ödendi butonu
          ElevatedButton(
            onPressed: () {
              _updateTicketStatusWithInfo(ticket, TicketStatus.paid, nameController.text.trim(), phoneController.text.trim());
              Navigator.pop(context);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: const Text('Ödendi'),
          ),
          // İptal butonu
          if (ticket.status != TicketStatus.available)
            ElevatedButton(
              onPressed: () {
                _updateTicketStatusWithInfo(ticket, TicketStatus.cancelled, nameController.text.trim(), phoneController.text.trim());
                Navigator.pop(context);
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
              child: const Text('İptal Et'),
            ),
        ],
      ),
    );
  }

  // Bilet yazdırma fonksiyonu
  void _printTicket(Ticket ticket) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🖨️ Bilet Yazdırma'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Bilet No: ${ticket.id}'),
            Text('Numaralar: ${ticket.numbersFormatted}'),
            Text('Fiyat: ₺${ticket.price.toStringAsFixed(2)}'),
            Text('Durum: ${_getStatusText(ticket.status)}'),
            if (ticket.buyerName != null && ticket.buyerName!.isNotEmpty)
              Text('Alıcı: ${ticket.buyerName}'),
            if (ticket.buyerPhone != null && ticket.buyerPhone!.isNotEmpty)
              Text('Telefon: ${ticket.buyerPhone}'),
            const SizedBox(height: 20),
            const Text(
              'Bu bilet yazdırılacak. Devam etmek istiyor musunuz?',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('✅ Bilet ${ticket.id} yazdırıldı'),
                  backgroundColor: Colors.green,
                ),
              );
              // Burada gerçek yazdırma işlemi yapılabilir
              print('Bilet yazdırıldı: ${ticket.id}');
            },
            child: const Text('Yazdır'),
          ),
        ],
      ),
    );
  }

  // Tüm biletleri yazdırma fonksiyonu
  void _printAllTickets() {
    final ticketCount = _sampleTickets.length;
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🖨️ Tüm Biletleri Yazdır'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.print, size: 48, color: Colors.blue),
            const SizedBox(height: 20),
            Text(
              'Toplam $ticketCount adet bilet yazdırılacak.',
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 10),
            const Text(
              'Bu işlem biraz zaman alabilir. Devam etmek istiyor musunuz?',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text('✅ $ticketCount adet bilet yazdırıldı'),
                  backgroundColor: Colors.green,
                  duration: const Duration(seconds: 3),
                ),
              );
              // Burada gerçek toplu yazdırma işlemi yapılabilir
              for (var ticket in _sampleTickets) {
                print('Bilet yazdırıldı: ${ticket.id}');
              }
            },
            child: const Text('Tümünü Yazdır'),
          ),
        ],
      ),
    );
  }

  Color _getStatusColor(TicketStatus status) {
    switch (status) {
      case TicketStatus.available:
        return Colors.grey;
      case TicketStatus.sold:
        return Colors.orange;
      case TicketStatus.unpaid:
        return Colors.orange;
      case TicketStatus.paid:
        return Colors.green;
      case TicketStatus.cancelled:
        return Colors.red;
      case TicketStatus.winner:
        return Colors.purple;
    }
  }

  IconData _getStatusIcon(TicketStatus status) {
    switch (status) {
      case TicketStatus.available:
        return Icons.sell_outlined;
      case TicketStatus.sold:
        return Icons.payment;
      case TicketStatus.unpaid:
        return Icons.schedule;
      case TicketStatus.paid:
        return Icons.check_circle;
      case TicketStatus.cancelled:
        return Icons.cancel;
      case TicketStatus.winner:
        return Icons.emoji_events;
    }
  }

  String _getStatusText(TicketStatus status) {
    switch (status) {
      case TicketStatus.available:
        return 'Müsait';
      case TicketStatus.sold:
        return 'Ödenmedi';
      case TicketStatus.unpaid:
        return 'Ödenmedi';
      case TicketStatus.paid:
        return 'Ödendi';
      case TicketStatus.cancelled:
        return 'İptal Edildi';
      case TicketStatus.winner:
        return 'Kazanan';
    }
  }

  void _updateTicketStatus(Ticket ticket, TicketStatus newStatus) {
    // Eğer iptal ediliyorsa otomatik olarak satılabilir duruma geçir
    if (newStatus == TicketStatus.cancelled) {
      newStatus = TicketStatus.available;
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('✅ Bilet iptal edildi ve satılmak için listeye geri eklendi'),
          backgroundColor: Colors.orange,
        ),
      );
    }

    // Gerçek veri güncellemesi - sample biletlerde bu bileti bul ve güncelle
    final ticketIndex = _sampleTickets.indexWhere((t) => t.id == ticket.id);
    
    if (ticketIndex != -1) {
      // Sample biletlerde güncelleme yap
      _sampleTickets[ticketIndex] = _sampleTickets[ticketIndex].copyWith(
        status: newStatus,
        buyerName: newStatus == TicketStatus.available ? null : _sampleTickets[ticketIndex].buyerName,
        buyerPhone: newStatus == TicketStatus.available ? null : _sampleTickets[ticketIndex].buyerPhone,
      );
    }

    // Ticket service üzerinden güncelleme yap
    _ticketService.updateTicketStatus(
      ticketId: ticket.id,
      status: newStatus,
      buyerName: newStatus == TicketStatus.available ? null : ticket.buyerName,
      buyerPhone: newStatus == TicketStatus.available ? null : ticket.buyerPhone,
    );

    setState(() {
      // UI'ı gerçekten güncelle
    });

    _autoSave(); // Otomatik kaydet

    // Eğer bilet satıldı durumuna geçiyorsa ve alıcı bilgisi yoksa sor
    if (newStatus == TicketStatus.sold && ticket.buyerName == null) {
      _showBuyerInfoDialog(ticket);
      return;
    }

    if (newStatus != TicketStatus.available) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('✅ Bilet durumu güncellendi ve kaydedildi: ${_getStatusText(newStatus)}'),
          backgroundColor: Colors.green,
        ),
      );
    }
  }

  void _updateTicketStatusWithInfo(Ticket ticket, TicketStatus newStatus, String? name, String? phone) {
    // Boş stringleri null yap
    final buyerName = name?.isNotEmpty == true ? name : null;
    final buyerPhone = phone?.isNotEmpty == true ? phone : null;

    // Eğer iptal ediliyorsa otomatik olarak satılabilir duruma geçir
    if (newStatus == TicketStatus.cancelled) {
      newStatus = TicketStatus.available;
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('✅ Bilet iptal edildi ve satılmak için listeye geri eklendi'),
          backgroundColor: Colors.orange,
        ),
      );
    }

    // Gerçek veri güncellemesi - sample biletlerde bu bileti bul ve güncelle
    final ticketIndex = _sampleTickets.indexWhere((t) => t.id == ticket.id);
    
    if (ticketIndex != -1) {
      // Sample biletlerde güncelleme yap
      final updatedTicket = _sampleTickets[ticketIndex].copyWith(
        status: newStatus,
        buyerName: newStatus == TicketStatus.available ? null : buyerName,
        buyerPhone: newStatus == TicketStatus.available ? null : buyerPhone,
        soldAt: newStatus == TicketStatus.sold ? DateTime.now() : null,
        paidAt: newStatus == TicketStatus.paid ? DateTime.now() : null,
      );
      _sampleTickets[ticketIndex] = updatedTicket;
      
      // Campaign service'deki global bilet listesine de güncelle
      _campaignService.updateTicket(updatedTicket);
    }

    // Ticket service üzerinden güncelleme yap
    _ticketService.updateTicketStatus(
      ticketId: ticket.id,
      status: newStatus,
      buyerName: newStatus == TicketStatus.available ? null : buyerName,
      buyerPhone: newStatus == TicketStatus.available ? null : buyerPhone,
    );

    setState(() {
      // UI'ı gerçekten güncelle
    });

    _autoSave(); // Otomatik kaydet

    // Durum mesajı göster
    String statusMessage = '✅ Bilet durumu güncellendi ve kaydedildi: ${_getStatusText(newStatus)}';
    if (buyerName != null || buyerPhone != null) {
      statusMessage += '\n👤 Müşteri bilgileri kaydedildi';
    }

    if (newStatus != TicketStatus.available) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(statusMessage),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  void _showBuyerInfoDialog(Ticket ticket) {
    final nameController = TextEditingController();
    final phoneController = TextEditingController();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('👤 Alıcı Bilgileri - ${ticket.numbersFormatted}'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TextField(
              controller: nameController,
              decoration: const InputDecoration(
                labelText: 'Ad Soyad',
                border: OutlineInputBorder(),
              ),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: phoneController,
              decoration: const InputDecoration(
                labelText: 'Telefon',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.phone,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              // Sample biletlerde alıcı bilgilerini güncelle
              final ticketIndex = _sampleTickets.indexWhere((t) => t.id == ticket.id);
              
              if (ticketIndex != -1) {
                _sampleTickets[ticketIndex] = _sampleTickets[ticketIndex].copyWith(
                  status: TicketStatus.sold,
                  buyerName: nameController.text.isNotEmpty ? nameController.text : null,
                  buyerPhone: phoneController.text.isNotEmpty ? phoneController.text : null,
                );
              }
              
              // Ticket service üzerinden güncelleme yap
              _ticketService.updateTicketStatus(
                ticketId: ticket.id,
                status: TicketStatus.sold,
                buyerName: nameController.text.isNotEmpty ? nameController.text : null,
                buyerPhone: phoneController.text.isNotEmpty ? phoneController.text : null,
              );
              
              setState(() {
                // UI'ı güncelle
              });
              Navigator.pop(context);
              
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text('✅ Alıcı bilgileri kaydedildi'),
                  backgroundColor: Colors.green,
                ),
              );
            },
            child: const Text('Kaydet'),
          ),
        ],
      ),
    );
  }

  void _finishCampaign(Campaign campaign) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🔚 Kampanyayı Bitir'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('${campaign.name} kampanyasını bitirmek istediğinizden emin misiniz?'),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.red.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Column(
                children: [
                  Row(
                    children: [
                      const Icon(Icons.warning, color: Colors.red),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          'UYARI!',
                          style: TextStyle(
                            color: Colors.red[800],
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '• Çekiliş sonucu otomatik çekilecek\n'
                    '• Kazanan biletler belirlendikten sonra\n'
                    '• TÜM BİLETLER SİLİNECEK!\n'
                    '• Sadece kazanan bilet kayıtları kalacak',
                    style: TextStyle(color: Colors.red[700]),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              
              // Milli Piyango sonucunu çek
              final winningNumber = await _fetchMilliPiyangoResult();
              
              // Çekiliş yap
              final result = _campaignService.conductDraw(campaign.id, winningNumber);
              
              if (result['success']) {
                // Kazanan biletleri kaydet
                final campaignTickets = _campaignService.getCampaignTickets(campaign.id);
                final winningTickets = campaignTickets.where((ticket) => ticket.isWinner).toList();
                
                // Kampanya Sona Ermiştir mesajı göster
                await _showCampaignEndedDialog(campaign, winningNumber, winningTickets);
                
                // Tüm biletleri sil (kazanan biletler hariç çünkü onlar zaten saklandı)
                _campaignService.clearAllSystemTickets();
                
                setState(() {});
                
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('❌ Kampanya bitirme hatası: ${result['error']}'),
                    backgroundColor: Colors.red,
                  ),
                );
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('Evet, Bitir ve Sil'),
          ),
        ],
      ),
    );
  }

  // Kampanya Sona Ermiştir dialog'u
  Future<void> _showCampaignEndedDialog(Campaign campaign, String winningNumber, List<Ticket> winningTickets) async {
    return showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Column(
          children: [
            Icon(Icons.celebration, size: 64, color: Colors.amber),
            SizedBox(height: 16),
            Text(
              '🎉 KAMPANYA SONA ERMİŞTİR 🎉',
              style: TextStyle(
                fontSize: 20,
                fontWeight: FontWeight.bold,
                color: Colors.red,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
        content: SizedBox(
          width: double.maxFinite,
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              // Kampanya bilgileri
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.purple.withOpacity(0.1), Colors.amber.withOpacity(0.1)],
                  ),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    Text(
                      campaign.name,
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.purple[800],
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 12),
                    Text(
                      '🎯 KAZANAN NUMARA: $winningNumber',
                      style: const TextStyle(
                        fontSize: 24,
                        fontWeight: FontWeight.bold,
                        color: Colors.red,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 12),
                    Text(
                      '🏆 ${winningTickets.length} Talihli Bilet Kazandı!',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Colors.green[700],
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 16),
              
              // Kazanan biletler listesi
              if (winningTickets.isNotEmpty) ...[
                Text(
                  'KAZANAN BİLETLER:',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.purple[800],
                  ),
                ),
                const SizedBox(height: 8),
                SizedBox(
                  height: 200,
                  child: ListView.builder(
                    itemCount: winningTickets.length,
                    itemBuilder: (context, index) {
                      final ticket = winningTickets[index];
                      String winType = '';
                      Color winColor = Colors.purple;
                      
                      switch (ticket.winnerType) {
                        case 'main':
                          winType = '🏆 Ana İkramiye';
                          winColor = Colors.amber;
                          break;
                        case 'upper':
                          winType = '⬆️ Bir Üst';
                          winColor = Colors.green;
                          break;
                        case 'lower':
                          winType = '⬇️ Bir Alt';
                          winColor = Colors.blue;
                          break;
                        default:
                          winType = '🎯 Kazanan';
                      }
                      
                      return Card(
                        margin: const EdgeInsets.only(bottom: 4),
                        child: ListTile(
                          leading: Icon(Icons.star, color: winColor),
                          title: Text(
                            ticket.numbersFormatted,
                            style: const TextStyle(fontWeight: FontWeight.bold),
                          ),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(winType, style: TextStyle(color: winColor, fontWeight: FontWeight.bold)),
                              if (ticket.buyerName != null) Text('👤 ${ticket.buyerName}'),
                            ],
                          ),
                          trailing: Text(
                            '${ticket.price.toStringAsFixed(0)} ₺',
                            style: const TextStyle(fontWeight: FontWeight.bold),
                          ),
                        ),
                      );
                    },
                  ),
                ),
              ] else ...[
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.orange.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Text(
                    '😔 Bu kampanyada kazanan bilet bulunamadı',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.orange[800],
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
              
              const SizedBox(height: 16),
              
              // Bilgilendirme
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Colors.red.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Column(
                  children: [
                    Row(
                      children: [
                        const Icon(Icons.delete_sweep, color: Colors.red),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            'TÜM BİLETLER SİLİNDİ!',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.red[800],
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'Kampanya sona erdiği için tüm biletler sistemden silindi. Sadece kazanan bilet kayıtları korundu.',
                      style: TextStyle(color: Colors.red[700]),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
        actions: [
          ElevatedButton.icon(
            onPressed: () {
              Navigator.pop(context);
              if (winningTickets.isNotEmpty) {
                _exportWinningTickets(campaign, winningTickets);
              }
            },
            icon: const Icon(Icons.download),
            label: const Text('Kazanan Listesini Kaydet'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('Tamam'),
          ),
        ],
      ),
    );
  }

  // Milli Piyango sonucunu çek (gerçek entegrasyon)
  Future<String> _fetchMilliPiyangoResult() async {
    // Yükleme dialog'u göster
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        backgroundColor: Colors.white,
        content: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            CircularPercentIndicator(
              radius: 32.0,
              lineWidth: 8.0,
              percent: 0.8,
              animation: true,
              animationDuration: 1200,
              circularStrokeCap: CircularStrokeCap.round,
              backgroundColor: Colors.grey.shade200,
              progressColor: Colors.cyan,
              widgetIndicator: null,
            ),
            const SizedBox(width: 24),
            const Text('Sonuç çekiliyor...'),
          ],
        ),
      ),
    );

    try {
      // Gerçek Milli Piyango API'sini kontrol et
      final isAPIAvailable = await _milliPiyangoService.checkAPIAvailability();
      
      if (isAPIAvailable) {
        // Gerçek API'den sonuç çek
        final result = await _milliPiyangoService.fetchAutomaticResult();
        
        // Dialog'u kapat
        Navigator.pop(context);
        
        // Başarı mesajı göster
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('✅ Milli Piyango sonucu başarıyla alındı!'),
            backgroundColor: Colors.green,
            duration: Duration(seconds: 2),
          ),
        );
        
        return result.winningNumber;
      } else {
        // API mevcut değilse manuel simülasyon yap
        final result = await _milliPiyangoService.fetchLatestResult();
        
        // Dialog'u kapat
        Navigator.pop(context);
        
        // Uyarı mesajı göster
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('⚠️ Milli Piyango API\'sine ulaşılamadı, simülasyon numarası kullanıldı.'),
            backgroundColor: Colors.orange,
            duration: Duration(seconds: 3),
          ),
        );
        
        return result;
      }
    } catch (e) {
      // Dialog'u kapat
      Navigator.pop(context);
      
      // Hata mesajı göster
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('❌ Milli Piyango sonucu alınamadı: $e'),
          backgroundColor: Colors.red,
          duration: const Duration(seconds: 3),
        ),
      );
      
      // Hata durumunda rastgele numara döndür
      final random = Random();
      String result = '';
      for (int i = 0; i < 10; i++) {
        result += random.nextInt(10).toString();
      }
      return result;
    }
  }





  void _showDrawResultDialog(Campaign campaign) {
    final resultController = TextEditingController();
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('🎰 Çekiliş Sonucu Gir'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              '${campaign.name} kampanyası için kazanan numarayı girin:',
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: resultController,
              decoration: const InputDecoration(
                labelText: 'Kazanan Numara',
                hintText: 'Örnek: 12345',
                border: OutlineInputBorder(),
                prefixIcon: Icon(Icons.confirmation_number),
              ),
              keyboardType: TextInputType.number,
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () async {
                // Kum saati dialogunu göster
                showDialog(
                  context: context,
                  barrierDismissible: false,
                  builder: (context) => const AlertDialog(
                    content: Row(
                      children: [
                        CircularProgressIndicator(),
                        SizedBox(width: 16),
                        Text('Sonuç çekiliyor...'),
                      ],
                    ),
                  ),
                );
                try {
                  final resultObj = await _milliPiyangoService.fetchAutomaticResult();
                  Navigator.of(context).pop(); // Kum saatini kapat
                  if (resultObj.winningNumber.isNotEmpty) {
                    _showMilliPiyangoResultDialog(context, resultObj.winningNumber, resultObj.drawDate, resultController);
                  } else {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(content: Text('❌ Milli Piyango sonucu alınamadı!')),
                    );
                  }
                } catch (e) {
                  Navigator.of(context).pop(); // Kum saatini kapat
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('❌ Sonuç alınırken hata oluştu: $e')),
                  );
                }
              },
              icon: const Icon(Icons.refresh),
              label: const Text('Milli Piyango\'dan Otomatik Çek'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              final result = resultController.text.trim();
              if (result.isEmpty) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Lütfen kazanan numarayı girin')),
                );
                return;
              }
              // Sadece rakam olup olmadığını kontrol et
              if (!RegExp(r'^\d+$').hasMatch(result)) {
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(content: Text('❌ Sadece rakam girebilirsiniz')),
                );
                return;
              }
              // Son hane kontrolü ve otomatik kırpma
              String finalWinningNumber;
              if (result.length > campaign.lastDigitCount) {
                finalWinningNumber = result.substring(result.length - campaign.lastDigitCount);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('ℹ️ Girilen numara: $result → Son ${campaign.lastDigitCount} hane: $finalWinningNumber dikkate alınacak'),
                    backgroundColor: Colors.blue,
                    duration: const Duration(seconds: 3),
                  ),
                );
              } else if (result.length == campaign.lastDigitCount) {
                finalWinningNumber = result;
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('❌ Numara en az ${campaign.lastDigitCount} haneli olmalıdır')),
                );
                return;
              }
              Navigator.pop(context);
              _processDrawResult(campaign, finalWinningNumber);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('Sonucu Kaydet'),
          ),
        ],
      ),
    );
  }

  void _processDrawResult(Campaign campaign, String winningNumber) async {
    // Çekiliş sonucunu işle
    final result = _campaignService.conductDraw(campaign.id, winningNumber);
    
    if (result['success']) {
      setState(() {});
      
      final mainWinners = result['mainWinners'] ?? 0;
      final upperWinners = result['upperWinners'] ?? 0;
      final lowerWinners = result['lowerWinners'] ?? 0;
      final totalWinners = mainWinners + upperWinners + lowerWinners;
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(
            '🎉 Çekiliş tamamlandı!\n'
            '🏆 Ana kazanan: $mainWinners bilet\n'
            '⬆️ Bir üst: $upperWinners bilet\n'
            '⬇️ Bir alt: $lowerWinners bilet\n'
            '🎯 Toplam: $totalWinners Talihli bilet!'
          ),
          backgroundColor: Colors.green,
          duration: const Duration(seconds: 5),
        ),
      );
      
      // Kazanan biletleri otomatik göster
      _showWinningTickets(campaign);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('❌ Çekiliş hatası: ${result['error']}'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  void _showWinningTickets(Campaign campaign) {
    final campaignTickets = _campaignService.getCampaignTickets(campaign.id);
    final winningTickets = campaignTickets.where((ticket) => ticket.isWinner).toList();
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('🌟 ${campaign.name} - Talihli Biletler'),
        content: SizedBox(
          width: double.maxFinite,
          height: 400,
          child: Column(
            children: [
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.purple.withOpacity(0.1), Colors.amber.withOpacity(0.1)],
                  ),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    const Icon(Icons.emoji_events, color: Colors.amber, size: 32),
                    const SizedBox(width: 16),
                    Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            '${campaign.name} Kazananları',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.purple[800],
                            ),
                          ),
                          Text(
                            'Kazanan Numara: ${campaign.winningNumber}',
                            style: TextStyle(color: Colors.grey[600]),
                          ),
                          Text(
                            'Toplam ${winningTickets.length} Talihli Bilet',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              color: Colors.green[700],
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
              
              const SizedBox(height: 16),
              
              Expanded(
                child: winningTickets.isEmpty
                    ? Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            const Icon(Icons.search_off, size: 64, color: Colors.grey),
                            const SizedBox(height: 16),
                            Text(
                              'Bu kampanyada kazanan bilet bulunamadı',
                              style: TextStyle(fontSize: 16, color: Colors.grey[600]),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'Çekiliş sonucu: ${campaign.winningNumber ?? "Henüz çekilmedi"}',
                              style: TextStyle(color: Colors.grey[500]),
                            ),
                          ],
                        ),
                      )
                    : ListView.builder(
                        itemCount: winningTickets.length,
                        itemBuilder: (context, index) {
                          final ticket = winningTickets[index];
                          return _buildWinningTicketCard(ticket, campaign);
                        },
                      ),
              ),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Kapat'),
          ),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.pop(context);
              _exportWinningTickets(campaign, winningTickets);
            },
            icon: const Icon(Icons.download),
            label: const Text('Listeyi Dışa Aktar'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildWinningTicketCard(Ticket ticket, Campaign campaign) {
    String winTypeText = '';
    Color winColor = Colors.purple;
    String prizeText = '';
    
    switch (ticket.winnerType) {
      case 'main':
        winTypeText = '🏆 Ana İkramiye';
        winColor = Colors.amber;
        prizeText = _getCampaignPrizeText(campaign);
        break;
      case 'upper':
        winTypeText = '⬆️ Bir Üst';
        winColor = Colors.green;
        prizeText = '${campaign.upperPrize} ${_getCurrencySymbol(campaign)}';
        break;
      case 'lower':
        winTypeText = '⬇️ Bir Alt';
        winColor = Colors.blue;
        prizeText = '${campaign.lowerPrize} ${_getCurrencySymbol(campaign)}';
        break;
      default:
        winTypeText = '🎯 Kazanan';
        winColor = Colors.purple;
    }
    
    return Card(
      elevation: 4,
      margin: const EdgeInsets.only(bottom: 8),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(8),
          gradient: LinearGradient(
            colors: [winColor.withOpacity(0.1), Colors.white],
            begin: Alignment.centerLeft,
            end: Alignment.centerRight,
          ),
        ),
        child: ListTile(
          leading: Container(
            width: 50,
            height: 50,
            decoration: BoxDecoration(
              color: winColor,
              shape: BoxShape.circle,
            ),
            child: const Icon(Icons.star, color: Colors.white, size: 24),
          ),
          title: Text(
            'Bilet: ${ticket.numbersFormatted}',
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
          subtitle: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(winTypeText, style: TextStyle(color: winColor, fontWeight: FontWeight.bold)),
              if (ticket.buyerName != null) Text('👤 ${ticket.buyerName}'),
              if (ticket.buyerPhone != null) Text('📞 ${ticket.buyerPhone}'),
            ],
          ),
          trailing: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'İkramiye',
                style: TextStyle(fontSize: 12, color: Colors.grey[600]),
              ),
              Text(
                prizeText,
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: winColor,
                  fontSize: 14,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  String _getCurrencySymbol(Campaign campaign) {
    switch (campaign.prizeCurrency) {
      case PrizeCurrency.tl:
        return '₺';
      case PrizeCurrency.dolar:
        return '\$';
      case PrizeCurrency.euro:
        return '€';
      case PrizeCurrency.altin:
        return '🥇';
      case PrizeCurrency.other:
        return campaign.customCurrency ?? '';
      default:
        return '₺';
    }
  }

  void _exportWinningTickets(Campaign campaign, List<Ticket> winningTickets) {
    final exportText = StringBuffer();
    exportText.writeln('${campaign.name} - Talihli Biletler');
    exportText.writeln('Kazanan Numara: ${campaign.winningNumber}');
    exportText.writeln('Çekiliş Tarihi: ${campaign.drawDate.day}/${campaign.drawDate.month}/${campaign.drawDate.year}');
    exportText.writeln('');
    
    for (int i = 0; i < winningTickets.length; i++) {
      final ticket = winningTickets[i];
      exportText.writeln('${i + 1}. ${ticket.numbersFormatted} - ${ticket.winnerType} - ${ticket.buyerName ?? "İsimsiz"}');
    }
    
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('📋 ${winningTickets.length} Talihli bilet listesi hazırlandı!'),
        backgroundColor: Colors.green,
        action: SnackBarAction(
          label: 'Kopyala',
          onPressed: () {
            // Clipboard'a kopyalama işlemi burada yapılır
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('✅ Liste panoya kopyalandı!')),
            );
          },
        ),
      ),
    );
  }

  Color _getTicketColor(TicketStatus status) {
    switch (status) {
      case TicketStatus.available:
        return Colors.grey[200]!;
      case TicketStatus.sold:
        return Colors.red[200]!;  // Ödenmedi = Kırmızı
      case TicketStatus.paid:
        return Colors.green[200]!;
      case TicketStatus.cancelled:
        return Colors.orange[200]!;  // İptal = Turuncu
      case TicketStatus.winner:
        return Colors.purple[200]!;
      default:
        return Colors.grey[200]!;
    }
  }

  @override
  void dispose() {
    WidgetsBinding.instance.removeObserver(this);
    _searchController.dispose();
    _countdownTimer?.cancel();
    _autoSave(); // Son kaydetme
    super.dispose();
  }

  void _showMilliPiyangoResultDialog(BuildContext context, String result, DateTime tarih, TextEditingController resultController) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.error_outline, color: Colors.red, size: 22),
            SizedBox(width: 8),
            Text('Dikkat!'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text('Çekiliş tarihine dikkat ediniz!', style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold)),
            const SizedBox(height: 12),
            Text('Çekilen Sonuç: $result', style: const TextStyle(fontSize: 16)),
            const SizedBox(height: 6),
            Text('Çekiliş Tarihi: ${tarih.day}.${tarih.month}.${tarih.year}', style: TextStyle(fontSize: 15, color: Colors.grey[700])),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('İptal'),
          ),
          ElevatedButton(
            onPressed: () {
              resultController.text = result;
              Navigator.of(context).pop();
            },
            child: const Text('Onayla'),
          ),
        ],
      ),
    );
  }

  Widget _buildCekilisTarihi() {
    // Tarih formatı
    String formattedDate = _selectedDrawDate != null
        ? '${_selectedDrawDate!.day.toString().padLeft(2, '0')}.${_selectedDrawDate!.month.toString().padLeft(2, '0')}.${_selectedDrawDate!.year}'
        : 'Henüz çekiliş tarihi seçilmedi.';

    // Yanıp sönme animasyonu
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          const Text('📅 Çekiliş Tarihi Seç', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          AnimatedBuilder(
            animation: Listenable.merge([_drawDateNotifier, _countdownNotifier]),
            builder: (context, child) {
              return Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  AnimatedOpacity(
                    opacity: _dateOpacity,
                    duration: const Duration(milliseconds: 600),
                    child: Text(
                      _selectedDrawDate != null ? 'Seçilen Tarih: $formattedDate' : 'Henüz çekiliş tarihi seçilmedi.',
                      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.deepPurple),
                    ),
                    onEnd: () {
                      Future.delayed(const Duration(milliseconds: 400), () {
                        _dateOpacity = _dateOpacity == 1.0 ? 0.3 : 1.0;
                        (_drawDateNotifier as dynamic).notifyListeners();
                      });
                    },
                  ),
                  const SizedBox(height: 12),
                  if (_selectedDrawDate != null)
                    Text(
                      _countdownNotifier.value.isNegative
                        ? 'Çekiliş zamanı geldi!'
                        : 'Çekilişe kalan süre: '
                          '${_countdownNotifier.value.inDays} gün '
                          '${_countdownNotifier.value.inHours % 24} saat '
                          '${_countdownNotifier.value.inMinutes % 60} dakika '
                          '${_countdownNotifier.value.inSeconds % 60} saniye',
                      style: const TextStyle(fontSize: 16, color: Colors.blueGrey),
                    ),
                ],
              );
            },
          ),
          const SizedBox(height: 24),
          ElevatedButton.icon(
            onPressed: () async {
              final picked = await showDatePicker(
                context: context,
                initialDate: _selectedDrawDate ?? DateTime.now().add(const Duration(days: 7)),
                firstDate: DateTime.now(),
                lastDate: DateTime.now().add(const Duration(days: 365)),
              );
              if (picked != null) {
                setState(() {
                  _selectedDrawDate = picked;
                  _drawDateNotifier.value = picked;
                  _startCountdown();
                });
                _autoSave(); // Otomatik kaydet
                ScaffoldMessenger.of(context).showSnackBar(
                  const SnackBar(
                    content: Text('💾 Çekiliş tarihi otomatik kaydedildi!'),
                    backgroundColor: Colors.green,
                    duration: Duration(seconds: 2),
                  ),
                );
              }
            },
            icon: const Icon(Icons.event),
            label: const Text('Tarih Seç'),
          ),
        ],
      ),
    );
  }

  Widget _buildTicketList(Campaign campaign) {
    // Kampanyanın biletlerini al (örnek olarak _sampleTickets kullanılıyor)
    final tickets = _sampleTickets;
    if (tickets.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.confirmation_number_outlined, size: 80, color: Colors.grey),
            SizedBox(height: 16),
            Text('Henüz bilet oluşturulmamış'),
            SizedBox(height: 8),
            Text('"Biletleri Listele" butonuna tıklayın'),
          ],
        ),
      );
    }

    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.all(16),
          child: Text(
            'Toplam ${tickets.length} bilet',
            style: const TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
        Expanded(
          child: Scrollbar(
            thumbVisibility: true,
            trackVisibility: true,
            thickness: 8,
            radius: const Radius.circular(4),
            child: GridView.builder(
              padding: const EdgeInsets.all(16),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                childAspectRatio: 1.8,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
              itemCount: tickets.length,
              itemBuilder: (context, index) {
                final ticket = tickets[index];
                return Card(
                  elevation: 4,
                  child: InkWell(
                    onTap: () => _showTicketStatusDialog(ticket),
                    child: Container(
                      decoration: BoxDecoration(
                        color: Colors.white,
                        borderRadius: BorderRadius.circular(8),
                      ),
                      child: Column(
                        children: [
                          // Üst kısım - Bilet fiyatı ve kampanya adı
                          Container(
                            padding: const EdgeInsets.all(8),
                            decoration: const BoxDecoration(
                              color: Colors.red,
                              borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(8),
                                topRight: Radius.circular(8),
                              ),
                            ),
                            child: Row(
                              children: [
                                Container(
                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                  decoration: BoxDecoration(
                                    color: Colors.white,
                                    borderRadius: BorderRadius.circular(4),
                                  ),
                                  child: Text(
                                    '${ticket.price.toStringAsFixed(0)} TL',
                                    style: const TextStyle(
                                      fontSize: 12,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                ),
                                const SizedBox(width: 8),
                                const Expanded(
                                  child: Text(
                                    'NAZZOL',
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      letterSpacing: 2,
                                    ),
                                  ),
                                ),
                              ],
                            ),
                          ),
                          // Orta kısım - İkramiye
                          Expanded(
                            child: Container(
                              padding: const EdgeInsets.symmetric(vertical: 8),
                              child: Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  const Text(
                                    'ikramiye',
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontStyle: FontStyle.italic,
                                      color: Colors.red,
                                    ),
                                  ),
                                  Text(
                                    '285.000',
                                    style: TextStyle(
                                      fontSize: 24,
                                      fontWeight: FontWeight.bold,
                                      color: Colors.blue[700],
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ),
                          // Alt kısım - Bilet numarası
                          Container(
                            padding: const EdgeInsets.all(8),
                            decoration: BoxDecoration(
                              border: Border.all(color: Colors.black, width: 1),
                              borderRadius: BorderRadius.circular(4),
                            ),
                            child: Text(
                              ticket.numbersFormatted,
                              style: const TextStyle(
                                fontSize: 20,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          const SizedBox(height: 8),
                          // Durum
                          Container(
                            padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                            decoration: BoxDecoration(
                              color: _getTicketColor(ticket.status),
                              borderRadius: BorderRadius.circular(20),
                            ),
                            child: Text(
                              _getStatusText(ticket.status),
                              style: const TextStyle(
                                color: Colors.white,
                                fontSize: 12,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          const SizedBox(height: 8),
                        ],
                      ),
                    ),
                  ),
                );
              },
            ),
          ),
        ),
      ],
    );
  }
            thumbVisibility: true,
            trackVisibility: true,
            thickness: 8,
            radius: const Radius.circular(4),
            child: GridView.builder(
              padding: const EdgeInsets.all(16),
              gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
                childAspectRatio: 1.8,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
              ),
                  itemCount: tickets.length,
                  itemBuilder: (context, index) {
                    final ticket = tickets[index];
                    return Card(
                      elevation: 4,
                      child: InkWell(
                        onTap: () => _showTicketStatusDialog(ticket),
                        child: Container(
                          decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Column(
                            children: [
                              // Üst kısım - Bilet fiyatı ve kampanya adı
                              Container(
                                padding: const EdgeInsets.all(8),
                                decoration: const BoxDecoration(
                                  color: Colors.red,
                                  borderRadius: BorderRadius.only(
                                    topLeft: Radius.circular(8),
                                    topRight: Radius.circular(8),
                                  ),
                                ),
                                child: Row(
                                  children: [
                                    Container(
                                      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                      decoration: BoxDecoration(
                                        color: Colors.white,
                                        borderRadius: BorderRadius.circular(4),
                                      ),
                                      child: Text(
                                        '${ticket.price.toStringAsFixed(0)} TL',
                                        style: const TextStyle(
                                          fontSize: 12,
                                          fontWeight: FontWeight.bold,
                                        ),
                                      ),
                                    ),
                                    const SizedBox(width: 8),
                                    const Expanded(
                                      child: Text(
                                        'NAZZOL',
                                        style: TextStyle(
                                          color: Colors.white,
                                          fontSize: 24,
                                          fontWeight: FontWeight.bold,
                                          letterSpacing: 2,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                              // Orta kısım - İkramiye
                              Expanded(
                                child: Container(
                                  padding: const EdgeInsets.symmetric(vertical: 8),
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      const Text(
                                        'ikramiye',
                                        style: TextStyle(
                                          fontSize: 14,
                                          fontStyle: FontStyle.italic,
                                          color: Colors.red,
                                        ),
                                      ),
                                      Text(
                                        '285.000',
                                        style: TextStyle(
                                          fontSize: 24,
                                          fontWeight: FontWeight.bold,
                                          color: Colors.blue[700],
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                              // Alt kısım - Bilet numarası
                              Container(
                                padding: const EdgeInsets.all(8),
                                decoration: BoxDecoration(
                                  border: Border.all(color: Colors.black, width: 1),
                                  borderRadius: BorderRadius.circular(4),
                                ),
                                child: Text(
                                  ticket.numbersFormatted,
                                  style: const TextStyle(
                                    fontSize: 20,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                              const SizedBox(height: 8),
                              // Durum
                              Container(
                                padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                                decoration: BoxDecoration(
                                  color: _getTicketColor(ticket.status),
                                  borderRadius: BorderRadius.circular(20),
                                ),
                                child: Text(
                                  _getStatusText(ticket.status),
                                  style: const TextStyle(
                                    color: Colors.white,
                                    fontSize: 12,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                                                            const SizedBox(height: 8),
                            ],
                          ),
                        ),
                      ),
                    );
                  ],
                ),
              ),
            ),
          ),
        )
      },
    );
  }

  // Şanslı biletler bölümü
  Widget _buildLuckySection() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            width: 120,
            height: 120,
            decoration: BoxDecoration(
              color: Colors.purple,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.purple.withOpacity(0.3),
                  blurRadius: 15,
                  offset: const Offset(0, 8),
                ),
              ],
            ),
            child: const Icon(
              Icons.stars,
              size: 60,
              color: Colors.white,
            ),
          ),
          const SizedBox(height: 30),
          const Text(
            '🌟 Yıldızların Seçimi',
            style: TextStyle(
              fontSize: 32,
              fontWeight: FontWeight.bold,
              color: Colors.purple,
            ),
          ),
          const SizedBox(height: 30),
          Container(
            width: 400,
            padding: const EdgeInsets.all(24),
            decoration: BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.circular(20),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(0.1),
                  blurRadius: 10,
                  offset: const Offset(0, 5),
                ),
              ],
            ),
            child: Column(
              children: [
                const Text(
                  'Burcunuzu Seçin',
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Colors.purple,
                  ),
                ),
                const SizedBox(height: 20),
                DropdownButtonFormField<String>(
                  value: _selectedZodiac,
                  decoration: const InputDecoration(
                    labelText: '🌟 Burcunuz',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.stars),
                    filled: true,
                    fillColor: Colors.white,
                  ),
                  items: _zodiacSigns.map((zodiac) {
                    return DropdownMenuItem(
                      value: zodiac,
                      child: Text(zodiac),
                    );
                  }).toList(),
                  onChanged: (value) {
                    setState(() {
                      _selectedZodiac = value;
                    });
                    if (value != null) {
                      _showLuckyTickets(value);
                    }
                  },
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  // Şanslı biletleri göster
  void _showLuckyTickets(String zodiac) {
    // Random biletler seç
    final random = Random();
    final availableTickets = _sampleTickets.where((t) => t.status == TicketStatus.available).toList();
    if (availableTickets.length < 4) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('❌ Yeterli sayıda müsait bilet yok'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // 4 rastgele bilet seç
    availableTickets.shuffle();
    final luckyTickets = availableTickets.take(4).toList();

    // Önce bilgilendirme dialogu göster
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        // 2 saniye sonra otomatik kapat
        Future.delayed(const Duration(seconds: 2), () {
          Navigator.of(context).pop();
          _showLuckyTicketsDialog(zodiac, luckyTickets);
        });

        return AlertDialog(
          title: Row(
            children: [
              const Icon(Icons.auto_awesome, color: Colors.purple),
              const SizedBox(width: 10),
              Text('$zodiac Burcu'),
            ],
          ),
          content: const Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                'Burcunuzun yıldızname özelliklerine göre biletler seçiliyor...',
                style: TextStyle(fontStyle: FontStyle.italic),
              ),
              SizedBox(height: 20),
              CircularProgressIndicator(
                valueColor: AlwaysStoppedAnimation<Color>(Colors.purple),
              ),
            ],
          ),
        );
      },
    );

  }

  // Şanslı biletleri gösteren dialog
  void _showLuckyTicketsDialog(String zodiac, List<Ticket> luckyTickets) {
    showGeneralDialog(
      context: context,
      pageBuilder: (context, animation1, animation2) => Container(),
      transitionBuilder: (context, animation1, animation2, child) {
        return ScaleTransition(
          scale: Tween<double>(begin: 0.5, end: 1.0).animate(animation1),
          child: FadeTransition(
            opacity: Tween<double>(begin: 0.0, end: 1.0).animate(animation1),
            child: AlertDialog(
              title: Row(
                children: [
                  Text('✨ $zodiac Burcu'),
                  const Spacer(),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.of(context).pop(),
                  ),
                ],
              ),
              content: SizedBox(
                width: 600,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Text(
                      'Burcunuzun yıldızname numaralarına göre size özel seçilmiş biletler:',
                      style: TextStyle(fontStyle: FontStyle.italic),
                    ),
                    const SizedBox(height: 20),
                    GridView.builder(
                      shrinkWrap: true,
                      gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: 2,
                        childAspectRatio: 2,
                        crossAxisSpacing: 8,
                        mainAxisSpacing: 8,
                      ),
                      itemCount: luckyTickets.length,
                      itemBuilder: (context, index) {
                        final ticket = luckyTickets[index];
                        return Card(
                          elevation: 4,
                          child: ListTile(
                            leading: const Icon(Icons.stars, color: Colors.amber),
                            title: Text(ticket.numbersFormatted),
                            subtitle: Text('₺${ticket.price.toStringAsFixed(2)}'),
                            trailing: ElevatedButton(
                              onPressed: () {
                                Navigator.of(context).pop();
                                _showTicketStatusDialog(ticket);
                              },
                              child: const Text('Satın Al'),
                            ),
                          ),
                        );
                      },
                    ),
                  ],
                ),
              ),
            ),
          ),
        );
      },
      transitionDuration: const Duration(milliseconds: 400),
      barrierDismissible: true,
      barrierLabel: '',
      barrierColor: Colors.black.withOpacity(0.5),
    );
  }
}
